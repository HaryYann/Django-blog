"""
Django settings for binblog project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'i89n!-gv=7!snicdlre^3v=i0zw3cgbs31@)&wv5gk_g$x1xx3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',  # 会自动 auto-discovery，自动搜索模块下的admin
    'django.contrib.admin.apps.SimpleAdminConfig',  # 当自定义AdminSite时候使用这个, 禁用auto-discovery
    'django.contrib.admindocs',  # admin文档, 需要安装 pip install docutils
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'blog',
    'user',
    'haystack',  # haystack全文搜索
    'pagedown',  # md编辑器
    'compressor',  # css/js压缩
    'rest_framework',  # DRF-api
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'blog.middleware.LoadTimeMiddleware'  # 页面加载时间
]

ROOT_URLCONF = 'binblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blog.context_processors.setting',  # 自定义模板全局变量, 网站常量
            ],
        },
    },
]

WSGI_APPLICATION = 'binblog.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'binblog',
        'USER': 'root',
        'PASSWORD': '1123',
        'HOST': '127.0.0.1'
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # timeit shows that datetime.now(tz=utc) is 24% slower

# sitemap指定站点, 对应数据表django_site中的id
SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'  # url上显示的静态文件目录127.0.0.1:8080/static/1.jpg
STATIC_ROOT = os.path.join(BASE_DIR, 'collectedstatic')  # 执行静态资源收集后存储的目录
STATICFILES_DIRS = (  # 多个存储静态资源的目录
    os.path.join(BASE_DIR, 'static'),
)

# compress压缩静态文件设置
COMPRESS_ENABLED = True  # 开启Compressor，因为默认是和DEBUG相反，用于生产环境，显式启动
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',  # 默认开启的, 磁盘中查找
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',  # 默认开启的, app目录中查找
    'compressor.finders.CompressorFinder',  # compress的
)

# 用户类
AUTH_USER_MODEL = 'user.UserProfile'
AUTHENTICATION_BACKENDS = (
    # https://docs.djangoproject.com/en/2.1/ref/contrib/auth/#django.contrib.auth.models.User.is_active
    'django.contrib.auth.backends.AllowAllUsersModelBackend',  # 要验证is_active
)

# 使用haystack进行文章搜索
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'utils.whoosh_cn_backend.WhooshEngine',  # 自定义使用jieba进行中文分词
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}
# 自动更新搜索索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 发送邮件的配置
EMAIL_HOST = 'smtp.sina.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'binloveplay1314@sina.com'
EMAIL_HOST_PASSWORD = 'sina1123.0'
EMAIL_USE_TLS = False  # 不使用TLS协议, 不https:443
EMAIL_FROM = 'binloveplay1314@sina.com'  # 发件人

# 缓存设置,想在本地看到是否有效,可以实时更改数据库里的数据,缓存里的数据不会变
# 环境里有memcached就可以使用memcached进行缓存，没有就使用本地缓存
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',  # memcached缓存
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 60 * 60 * 1,  # 过期时间 单位为秒
    },
    # 'default': {
    #     'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # 本地内存缓存
    #     'TIMEOUT': 60 * 60 * 1,  # 过期时间 秒, 一个钟过期
    #     'LOCATION': 'unique-snowflake',
    # }
}

# Django REST framework配置
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',  # json render
        'rest_framework.renderers.BrowsableAPIRenderer',  # drf浏览器render
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # 默认为 AllowAny
    )
}

# curl 测试jwt, 根据username和password返回了一个 token
# curl -X POST -d "username=bin&password=1123" http://127.0.0.1:8000/api/auth/token/
# {"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImJpbiIsImV4cCI6MTU1MjU2MzcyOCwiZW1haWwiOiJiaW5sb3ZlcGxheTEzMTRAcXEuY29tIn0.51CSDqWxiXwxMkuxm8zpCn1SJyI7eapt3Vt1cFFp4aI"}

# 测试命令, 注意权限的设置
# curl -H "Authorization: JWT <your_token>" http://127.0.0.1:8000/api/blog/article/

# 不使用JWT, 返回不到信息
# curl http://127.0.0.1:8000/api/blog/article/

# 带上jwt返回信息成功
# curl -H "Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImJpbiIsImV4cCI6MTU1MjU2MzcyOCwiZW1haWwiOiJiaW5sb3ZlcGxheTEzMTRAcXEuY29tIn0.51CSDqWxiXwxMkuxm8zpCn1SJyI7eapt3Vt1cFFp4aI" http://127.0.0.1:8000/api/blog/article/

# 测试POST数据，不加JWT，注意权限的设置 AllowAny
# curl -X POST -d "{\"name\": \"a new category\"}" -H "Content-Type:application/json" -H "Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImJpbiIsImV4cCI6MTU1MjU2MzcyOCwiZW1haWwiOiJiaW5sb3ZlcGxheTEzMTRAcXEuY29tIn0.51CSDqWxiXwxMkuxm8zpCn1SJyI7eapt3Vt1cFFp4aI" http://127.0.0.1:8000/api/blog/category/create/
# 测试POST数据，加了JWT,设置权限需要登陆
# curl -X POST -H "Content-Type: application/json" -d '{\"name\":\"A new category\"}' -H "Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImJpbiIsImV4cCI6MTU1MjU2MzcyOCwiZW1haWwiOiJiaW5sb3ZlcGxheTEzMTRAcXEuY29tIn0.51CSDqWxiXwxMkuxm8zpCn1SJyI7eapt3Vt1cFFp4aI" http://127.0.0.1:8000/api/blog/category/create/
