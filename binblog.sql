/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50636
Source Host           : 127.0.0.1:3306
Source Database       : binblog

Target Server Type    : MYSQL
Target Server Version : 50636
File Encoding         : 65001

Date: 2019-05-19 11:58:24
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for auth_group
-- ----------------------------
DROP TABLE IF EXISTS `auth_group`;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of auth_group
-- ----------------------------

-- ----------------------------
-- Table structure for auth_group_permissions
-- ----------------------------
DROP TABLE IF EXISTS `auth_group_permissions`;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  KEY `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of auth_group_permissions
-- ----------------------------

-- ----------------------------
-- Table structure for auth_permission
-- ----------------------------
DROP TABLE IF EXISTS `auth_permission`;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_permission_content_type_id_codename_01ab375a_uniq` (`content_type_id`,`codename`),
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of auth_permission
-- ----------------------------
INSERT INTO `auth_permission` VALUES ('1', 'Can add log entry', '1', 'add_logentry');
INSERT INTO `auth_permission` VALUES ('2', 'Can change log entry', '1', 'change_logentry');
INSERT INTO `auth_permission` VALUES ('3', 'Can delete log entry', '1', 'delete_logentry');
INSERT INTO `auth_permission` VALUES ('4', 'Can view log entry', '1', 'view_logentry');
INSERT INTO `auth_permission` VALUES ('5', 'Can add permission', '2', 'add_permission');
INSERT INTO `auth_permission` VALUES ('6', 'Can change permission', '2', 'change_permission');
INSERT INTO `auth_permission` VALUES ('7', 'Can delete permission', '2', 'delete_permission');
INSERT INTO `auth_permission` VALUES ('8', 'Can view permission', '2', 'view_permission');
INSERT INTO `auth_permission` VALUES ('9', 'Can add group', '3', 'add_group');
INSERT INTO `auth_permission` VALUES ('10', 'Can change group', '3', 'change_group');
INSERT INTO `auth_permission` VALUES ('11', 'Can delete group', '3', 'delete_group');
INSERT INTO `auth_permission` VALUES ('12', 'Can view group', '3', 'view_group');
INSERT INTO `auth_permission` VALUES ('13', 'Can add content type', '4', 'add_contenttype');
INSERT INTO `auth_permission` VALUES ('14', 'Can change content type', '4', 'change_contenttype');
INSERT INTO `auth_permission` VALUES ('15', 'Can delete content type', '4', 'delete_contenttype');
INSERT INTO `auth_permission` VALUES ('16', 'Can view content type', '4', 'view_contenttype');
INSERT INTO `auth_permission` VALUES ('17', 'Can add session', '5', 'add_session');
INSERT INTO `auth_permission` VALUES ('18', 'Can change session', '5', 'change_session');
INSERT INTO `auth_permission` VALUES ('19', 'Can delete session', '5', 'delete_session');
INSERT INTO `auth_permission` VALUES ('20', 'Can view session', '5', 'view_session');
INSERT INTO `auth_permission` VALUES ('21', 'Can add site', '6', 'add_site');
INSERT INTO `auth_permission` VALUES ('22', 'Can change site', '6', 'change_site');
INSERT INTO `auth_permission` VALUES ('23', 'Can delete site', '6', 'delete_site');
INSERT INTO `auth_permission` VALUES ('24', 'Can view site', '6', 'view_site');
INSERT INTO `auth_permission` VALUES ('25', 'Can add 文章', '7', 'add_article');
INSERT INTO `auth_permission` VALUES ('26', 'Can change 文章', '7', 'change_article');
INSERT INTO `auth_permission` VALUES ('27', 'Can delete 文章', '7', 'delete_article');
INSERT INTO `auth_permission` VALUES ('28', 'Can view 文章', '7', 'view_article');
INSERT INTO `auth_permission` VALUES ('29', 'Can add 文章分类', '8', 'add_category');
INSERT INTO `auth_permission` VALUES ('30', 'Can change 文章分类', '8', 'change_category');
INSERT INTO `auth_permission` VALUES ('31', 'Can delete 文章分类', '8', 'delete_category');
INSERT INTO `auth_permission` VALUES ('32', 'Can view 文章分类', '8', 'view_category');
INSERT INTO `auth_permission` VALUES ('33', 'Can add 文章评论', '9', 'add_comment');
INSERT INTO `auth_permission` VALUES ('34', 'Can change 文章评论', '9', 'change_comment');
INSERT INTO `auth_permission` VALUES ('35', 'Can delete 文章评论', '9', 'delete_comment');
INSERT INTO `auth_permission` VALUES ('36', 'Can view 文章评论', '9', 'view_comment');
INSERT INTO `auth_permission` VALUES ('37', 'Can add 友情链接', '10', 'add_link');
INSERT INTO `auth_permission` VALUES ('38', 'Can change 友情链接', '10', 'change_link');
INSERT INTO `auth_permission` VALUES ('39', 'Can delete 友情链接', '10', 'delete_link');
INSERT INTO `auth_permission` VALUES ('40', 'Can view 友情链接', '10', 'view_link');
INSERT INTO `auth_permission` VALUES ('41', 'Can add 站点配置', '11', 'add_setting');
INSERT INTO `auth_permission` VALUES ('42', 'Can change 站点配置', '11', 'change_setting');
INSERT INTO `auth_permission` VALUES ('43', 'Can delete 站点配置', '11', 'delete_setting');
INSERT INTO `auth_permission` VALUES ('44', 'Can view 站点配置', '11', 'view_setting');
INSERT INTO `auth_permission` VALUES ('45', 'Can add 侧边栏', '12', 'add_sidebar');
INSERT INTO `auth_permission` VALUES ('46', 'Can change 侧边栏', '12', 'change_sidebar');
INSERT INTO `auth_permission` VALUES ('47', 'Can delete 侧边栏', '12', 'delete_sidebar');
INSERT INTO `auth_permission` VALUES ('48', 'Can view 侧边栏', '12', 'view_sidebar');
INSERT INTO `auth_permission` VALUES ('49', 'Can add 标签', '13', 'add_tag');
INSERT INTO `auth_permission` VALUES ('50', 'Can change 标签', '13', 'change_tag');
INSERT INTO `auth_permission` VALUES ('51', 'Can delete 标签', '13', 'delete_tag');
INSERT INTO `auth_permission` VALUES ('52', 'Can view 标签', '13', 'view_tag');
INSERT INTO `auth_permission` VALUES ('53', 'Can add user', '14', 'add_userprofile');
INSERT INTO `auth_permission` VALUES ('54', 'Can change user', '14', 'change_userprofile');
INSERT INTO `auth_permission` VALUES ('55', 'Can delete user', '14', 'delete_userprofile');
INSERT INTO `auth_permission` VALUES ('56', 'Can view user', '14', 'view_userprofile');
INSERT INTO `auth_permission` VALUES ('57', 'Can add 邮箱验证码', '15', 'add_emailverifycode');
INSERT INTO `auth_permission` VALUES ('58', 'Can change 邮箱验证码', '15', 'change_emailverifycode');
INSERT INTO `auth_permission` VALUES ('59', 'Can delete 邮箱验证码', '15', 'delete_emailverifycode');
INSERT INTO `auth_permission` VALUES ('60', 'Can view 邮箱验证码', '15', 'view_emailverifycode');
INSERT INTO `auth_permission` VALUES ('61', 'Can add OAuth配置', '16', 'add_oauthconfig');
INSERT INTO `auth_permission` VALUES ('62', 'Can change OAuth配置', '16', 'change_oauthconfig');
INSERT INTO `auth_permission` VALUES ('63', 'Can delete OAuth配置', '16', 'delete_oauthconfig');
INSERT INTO `auth_permission` VALUES ('64', 'Can view OAuth配置', '16', 'view_oauthconfig');
INSERT INTO `auth_permission` VALUES ('65', 'Can add oauth用户', '17', 'add_oauthuser');
INSERT INTO `auth_permission` VALUES ('66', 'Can change oauth用户', '17', 'change_oauthuser');
INSERT INTO `auth_permission` VALUES ('67', 'Can delete oauth用户', '17', 'delete_oauthuser');
INSERT INTO `auth_permission` VALUES ('68', 'Can view oauth用户', '17', 'view_oauthuser');
INSERT INTO `auth_permission` VALUES ('69', 'Can add 图片', '18', 'add_photo');
INSERT INTO `auth_permission` VALUES ('70', 'Can change 图片', '18', 'change_photo');
INSERT INTO `auth_permission` VALUES ('71', 'Can delete 图片', '18', 'delete_photo');
INSERT INTO `auth_permission` VALUES ('72', 'Can view 图片', '18', 'view_photo');
INSERT INTO `auth_permission` VALUES ('73', 'Can add 留言板', '19', 'add_guestbook');
INSERT INTO `auth_permission` VALUES ('74', 'Can change 留言板', '19', 'change_guestbook');
INSERT INTO `auth_permission` VALUES ('75', 'Can delete 留言板', '19', 'delete_guestbook');
INSERT INTO `auth_permission` VALUES ('76', 'Can view 留言板', '19', 'view_guestbook');

-- ----------------------------
-- Table structure for blog_article
-- ----------------------------
DROP TABLE IF EXISTS `blog_article`;
CREATE TABLE `blog_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `title` varchar(100) NOT NULL,
  `content` longtext NOT NULL,
  `order` int(11) NOT NULL,
  `views` int(10) unsigned NOT NULL,
  `author_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL,
  `type` varchar(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `title` (`title`),
  KEY `blog_article_author_id_905add38_fk_user_userprofile_id` (`author_id`),
  KEY `blog_article_category_id_7e38f15e_fk_blog_category_id` (`category_id`),
  CONSTRAINT `blog_article_author_id_905add38_fk_user_userprofile_id` FOREIGN KEY (`author_id`) REFERENCES `user_userprofile` (`id`),
  CONSTRAINT `blog_article_category_id_7e38f15e_fk_blog_category_id` FOREIGN KEY (`category_id`) REFERENCES `blog_category` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_article
-- ----------------------------
INSERT INTO `blog_article` VALUES ('1', '2019-01-27 17:19:43.000000', '2019-03-16 10:13:03.209391', 'Django的通用视图', '```\r\nfrom django.views.generic xxx\r\n```\r\n\r\n1. 展示对象列表（文章列表）- ListView\r\n2. 展示某个对象的详细信息（文章详情) - DetailView\r\n3. 通过表单创建某个对象（比如创建用户，新建文章）- CreateView\r\n4. 通过表单更新某个对象信息（比如修改密码，修改文字内容）- UpdateView\r\n5. 用户填写表单后转到某个完成页面 - FormView\r\n6. 删除某个对象 - DeleteView\r\n\r\n\r\n\r\n#### 只展示这些吧，其他的建议看官方文档\r\n\r\n### ListView视图，get_queryset()方法\r\n\r\n```\r\nListView它完成的功能和 article_list = Article.objects.all() 这句代码类似，获取某个 指定Model 的列表（这里是文章列表），同时我们加入了自己的逻辑，只找出对应作者的文章列表，假如仅仅只需要获取 article_list ，则甚至可以不用复写 get_queryset 方法，只需指定一个 model 属性，告诉 Django 去获取哪个 model 的列表就可以了  ListView默认会返回指定Model.objects.all()\r\n\r\n# Create your views here.\r\nfrom django.views.generic import ListView\r\nfrom .models import Article\r\n \r\nclass IndexView(ListView):\r\n \r\n    model = Article  # 指定的model，或者可以直接在 get_queryset里 model.object.all()\r\n    template_name = \'blog/article_list.html\'  # 指定这个视图渲染的模板\r\n	# 默认为object_list 在模板上下文使用的 {{ article_list }}\r\n    context_object_name = \'article_list\'  \r\n \r\n    def get_queryset(self):\r\n        qs = super().get_queryset() # 调用父类方法\r\n        return qs.filter(author = self.request.user).order_by(\'-pub_date\')\r\n\r\n# 在url里需要捕获的参数调用\r\n从 URL 捕获的命名组参数值保存在实例的 kwargs 属性（是一个字典）里，非命名组参数值保存在实例的 args 属性（是一个列表）里。类似这样调用 id = self.kwargs.get(\'id\') \r\n```\r\n\r\n\r\n\r\n### get_context_data()\r\n\r\n```\r\nget_context_data可以用于给模板传递模型以外的内容或参数，非常有用。例如现在的时间并不属于Article模型。如果你想把现在的时间传递给模板，你还可以通过重写get_context_data方法（如下图所示)。因为调用了父类的方法，\r\n\r\n# Create your views here.\r\nfrom django.views.generic import ListView\r\nfrom .models import Article\r\nfrom django.utils import timezone\r\n \r\nclass IndexView(ListView):\r\n \r\n    queryset = Article.objects.all().order_by(\"-pub_date\")  # 可以不写get_queryset方法\r\n    template_name = \'blog/article_list.html\'\r\n    context_object_name = \'article_list\'\r\n \r\n    def get_context_data(self, **kwargs):\r\n        context = super().get_context_data(**kwargs)  # py3中可以直接super()调用父类的方法\r\n        context[\'now\'] = timezone.now()  # 只有这行代码有用，在模板中调用 article_list[\'now\']\r\n        return context  # 模板上下文中的变量\r\n```\r\n\r\n\r\n\r\n### DetailView视图的 get_object()方法\r\n\r\n```\r\nDetailView和EditView都是从URL根据pk或其它参数调取一个对象来进行后续操作。下面代码通过DetailView展示一条记录数据的详细信息。get_object 方法默认情况下获取 id 为pk_url_kwarg 的对象\r\n\r\nfrom django.views.generic import DetailView\r\nfrom django.http import Http404\r\nfrom .models import Article\r\nfrom django.utils import timezone\r\n \r\nclass ArticleDetailView(DetailView):\r\n \r\n    queryset = Article.objects.all().order_by(\"-pub_date\")\r\n    template_name = \'blog/article_detail.html\'\r\n    context_object_name = \'article\'  # 默认为 object \r\n	pk_url_kwarg = \'article_id\'  # 默认可以不写，自动调用 id=为pk_url_kwarg的对象\r\n \r\n	# 对于类似文章阅读量的增加，可以重写 DetailView的 get方法或者在 get_obejct方法里加\r\n    def get_object(self, queryset=None):\r\n        obj = super().get_object(queryset=queryset)\r\n        if obj.author != self.request.user:\r\n            raise Http404()\r\n        return obj\r\n```\r\n\r\n​', '0', '1', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('2', '2019-02-25 12:05:35.810636', '2019-03-16 10:13:14.609297', 'django2 项目定制404等错误码', '### django2 项目定制404等错误码\r\n\r\n文档地址：`https://docs.djangoproject.com/en/2.1/topics/http/views/#customizing-error-views`\r\n\r\n### 准备工作，要想要django显示404等错误页，需要关闭DEBUG模式\r\n\r\n在settings.py里将调试模式关闭，以及设置可以访问的主机\r\n\r\n```\r\nDEBUG = False\r\n\r\nALLOWED_HOSTS = [\'*\']\r\n```\r\n\r\n因为django默认对静态文件的处理，在上线模式是不会对静态文件进行处理的\r\n\r\n所以在运行项目的时候得使用 `python manage.py runserver --insecure`，这样就可以看到404页面了\r\n\r\n### 使用\r\n\r\n在blog.views(自定义哪个app下都可以)里编写如下代码：\r\n\r\n```python\r\nfrom django.shortcuts import render\r\n\r\ndef permission_denied(request, exception, template_name=\'blog/error_page.html\'):\r\n    \"\"\" 处理403错误码 \"\"\"\r\n    error_msg = \'403错误拉，没有权限访问当前页面，点击首页看看别的？\'\r\n    return render(request, template_name, {\r\n        \'error_msg\': error_msg,\r\n    }, status=403)\r\n\r\n\r\ndef page_not_found(request, exception, template_name=\'blog/error_page.html\'):\r\n    \"\"\" 处理404错误码 \"\"\"\r\n    url = request.get_full_path()\r\n    error_msg = \'404错误啦，访问的地址 \' + url + \' 不存在。请点击首页看看别的？\'\r\n    return render(request, template_name, {\r\n        \'error_msg\': error_msg,\r\n    }, status=404)\r\n\r\n\r\ndef server_error(request, template_name=\'blog/error_page.html\'):\r\n    \"\"\" 处理500错误码 \"\"\"\r\n    error_msg = \'500错误啦，服务器出错，我已经收集到了错误信息，之后会抓紧抢修，请点击首页看看别的？\'\r\n    return render(request, template_name, {\r\n        \'error_msg\': error_msg,\r\n    }, status=500)\r\n```\r\n\r\nurls.py路由文件下的配置：\r\n\r\n```python\r\n# 添加如下代码，和前面所写的方法对应即可\r\nhandler403 = \'blog.views.permission_denied\'\r\nhandler404 = \'blog.views.page_not_found\'\r\nhandler500 = \'blog.views.server_error\'\r\n```\r\n\r\n模板文件error_page.html就是简单的展示你的 error_msg即可，跟其他模板文件一样的编写方式', '0', '1', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('3', '2019-02-15 09:08:16.891934', '2019-02-27 17:52:47.898447', '使用django的标签和Paginator进行分页', '# 使用django的标签和Paginator进行分页\r\n\r\n```python\r\n# blog_tags.py 标签文件中\r\n\r\nfrom django import template\r\nfrom django.core.paginator import Paginator, PageNotAnInteger, EmptyPage\r\nregister = template.Library()  # 名字是固定的register\r\n\r\n@register.simple_tag(takes_context=True)\r\ndef pagination_tag(context, object_list, page_count=2):\r\n    \"\"\" context是Context 对象，object_list是你要分页的对象，page_count表示每页的数量 \"\"\"\r\n    paginator = Paginator(object_list, page_count)\r\n    page = context[\'request\'].GET.get(\'page\')\r\n\r\n    try:\r\n        object_list = paginator.page(page)  # 根据页码获取对应页的数据\r\n\r\n    except PageNotAnInteger:\r\n        # 如果page不是int，字符串或为None，就返回第一页\r\n        object_list = paginator.page(1)\r\n\r\n    except EmptyPage:\r\n        # 如果page是int, 负数，或0，或者超过最大页数，返回最后一页\r\n        object_list = paginator.page(paginator.num_pages)\r\n        \r\n	# 模板里as可以取得return {% pagination_tag article_list 2 as article_list %}\r\n    return object_list  \r\n```\r\n\r\n```python\r\n# 模板文件中对views中传来的 article_list 进行标签调用，进行分页\r\n{% pagination_tag article_list 2 as article_list %}\r\n\r\n{% for article in article_list %}\r\n    {% inclusion_article_info_tag article True %}\r\n{% endfor %}\r\n\r\n{% include \'blog/article_pagination.html\' %}\r\n```\r\n\r\n```html\r\n<nav id=\"nav-below\" class=\"navigation\" role=\"navigation\">\r\n    {% if article_list.has_previous %}\r\n        <div class=\"nav-previous\"><a href=\"?page={{ article_list.previous_page_number }}\">\r\n            <span class=\"meta-nav\">←</span>上一页</a>\r\n        </div>\r\n    {% endif %}\r\n    {% if article_list.has_next %}\r\n        <div class=\"nav-next\"><a href=\"?page={{ article_list.next_page_number }}\">\r\n            <span class=\"meta-nav\">→</span>下一页</a>\r\n        </div>\r\n    {% endif %}\r\n</nav>\r\n```', '0', '0', '1', '1', 'a');
INSERT INTO `blog_article` VALUES ('4', '2019-02-25 14:02:23.700718', '2019-02-27 17:54:11.706724', 'django中添加RSS', '先简单介绍下RSS:\r\n\r\n> RSS（简易信息聚合）是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘数据和授权的元数据。\r\n\r\n其实就是一种聚合阅读，这样可以用feedly等工具来订阅你喜欢的网站，这样他们的网站更新了之后你就可以通过feedly这种工具来阅读更新的内容，而不用跑到网站上面去查看。\r\n\r\n\r\n\r\n﻿官方文档地址: https://docs.djangoproject.com/en/2.1/ref/contrib/syndication/\r\n\r\n一个简单的RSS-feed功能\r\n\r\n在binblog目录下(与settings平级)，创建feeds.py文件\r\n\r\n```python\r\nfrom django.contrib.syndication.views import Feed\r\n\r\nfrom blog.models import Article\r\n\r\n\r\nclass BinBlogFeed(Feed):\r\n    title = \'彬彬博客\'  # xml里的 title, link, desc标签内容\r\n    link = \'/feed/\'\r\n    description = \'彬彬博客Feed\'\r\n\r\n    def items(self):\r\n        \"\"\" returns a list of objects that should be included in the feed as <item> elements. \"\"\"\r\n        return Article.objects.order_by(\'-add_time\')[:5]\r\n\r\n    def item_title(self, item):\r\n        return item.title\r\n\r\n    def item_description(self, item):\r\n        return item.content\r\n\r\n    def item_link(self, item):\r\n        return item.get_absolute_url()\r\n\r\n    def item_author_name(self, item):\r\n        return item.author.username\r\n\r\n    def feed_copyright(self):\r\n        return \'Copyright (c) 2019, Zhu Binbin\'\r\n```\r\n\r\nurls.py下的配置\r\n\r\n```python\r\nfrom .feeds import BinBlogFeed\r\n\r\nurlpatterns = [\r\n    ...\r\n    path(\'feed/\', BinBlogFeed()),\r\n]\r\n```\r\n\r\n运行，浏览器打开127.0.0.1:8000/feed/，下载一段xml文本\r\n\r\n打开里面就是了，里面有很多元素都是可以自定义的\r\n\r\n参考文档: https://docs.djangoproject.com/en/2.1/ref/contrib/syndication/#feed-class-reference', '0', '0', '1', '1', 'a');
INSERT INTO `blog_article` VALUES ('5', '2019-02-24 22:43:27.466507', '2019-03-16 10:15:44.130879', 'django中添加sitemap', '### 为Django博客添加sitemap功能\r\n\r\n`sitemap`是 Google 最先引入的网站地图协议，维基百科的定义-> A Sitemap is an [XML](https://en.wikipedia.org/wiki/XML) file that lists the URLs for a site. 简单说就是个列出站点所有url的xml文件，方便网络爬虫抓去网站页面，它的作用简而言之就是优化搜索引擎的索引效率，详细的解释可以参考 维基百科。`https://en.wikipedia.org/wiki/Sitemaps`。网站地图sitemap一般放在域名根目录下，例如`www.xxxx.com/sitemap.xml`\r\n\r\nDjango文档地址:` https://docs.djangoproject.com/en/2.1/ref/contrib/sitemaps/`\r\n\r\n### 启用sitemap\r\n\r\n在django的settings.py中的INSTALL_APPS中添加:\r\n\r\n```\r\n\'django.contrib.sites\',\r\n\'django.contrib.sitemaps\',\r\n```\r\n\r\n确认settings.py中的`TEMPLATES`设置包含`DjangoTemplates`后端，并将`APP_DIRS`选项设置为True。其实django默认配置就是这样的，只有当你曾经修改过这些设置，才需要调整回来。\r\n\r\n然后进行数据迁移\r\n\r\n```shell\r\npython ./manage.py makemigrations\r\npython ./manage.py migrate\r\n```\r\n\r\n在settings.py里添加一行设置 `SITE_ID = 1`指定当前站点，这个是数据库中django_site表对应的ID值\r\n\r\n而后登陆django后台，修改SITE为自己网站的域名和名称，或者在数据库端直接修改。之后在admin右上角会多一个查看站点的功能，点击后会自动跳转到对应的项目页面。\r\n\r\n```python\r\n# admin后台配置注册 Site\r\nfrom django.contrib.sites.models import Site\r\nfrom django.contrib.sites.admin import SiteAdmin\r\n\r\nadmin.register(Site, SiteAdmin)  # 站点, sitemap使用\r\n```\r\n\r\n### 官网中的使用 [`GenericSitemap`](https://docs.djangoproject.com/en/2.1/ref/contrib/sitemaps/#django.contrib.sitemaps.GenericSitemap)的例子，直接在url里配置\r\n\r\n```python\r\n# urls.py\r\nfrom django.contrib.sitemaps import GenericSitemap\r\nfrom django.contrib.sitemaps.views import sitemap\r\nfrom django.urls import path\r\nfrom blog.models import Article\r\n\r\ninfo_dict = {\r\n    \'queryset\': Article.objects.all(),\r\n    \'date_field\': \'add_time\',\r\n}\r\n\r\nurlpatterns = [\r\n    # some generic view using info_dict\r\n    # ...\r\n\r\n    # the sitemap\r\n    path(\'sitemap.xml\', sitemap,\r\n         {\'sitemaps\': {\'blog\': GenericSitemap(info_dict, priority=0.6)}},\r\n         name=\'django.contrib.sitemaps.views.sitemap\'),\r\n]\r\n# 之后访问 127.0.0.1:8000/sitemap.xml\r\n```\r\n\r\n\r\n\r\n### 结合自己博客的代码编写\r\n\r\n在项目目录下创建sitemaps.py文件（和settings.py同级）\r\n\r\n```python\r\n# sitemaps.py\r\nfrom django.contrib.sitemaps import Sitemap\r\nfrom django.urls import reverse\r\nfrom blog.models import Article\r\n\r\nclass ArticleSitemap(Sitemap):\r\n    \"\"\" 指向所有文章条目链接的Sitemap \"\"\"\r\n    changefreq = \'daily\'  # 更改频率，文档里查找可使用的属性值\r\n    priority = 0.6  # 优先级\r\n\r\n    def items(self):\r\n        # 必需，返回一个对象列表，可以自己filter过滤, 被其他方法属性调用\r\n        return Article.objects.all()\r\n\r\n    def lastmod(self, obj):\r\n        # 可选，返回个datetime类型，表示items返回的每个对象的最后修改时间\r\n        return obj.modify_time\r\n    \r\n    def location(self, obj):\r\n        # 可选，返回每个obj对象的绝对路径，默认会调用obj.get_absolute_url方法\r\n        return reverse(\'blog:article_detail\', kwargs={\'article_id\': obj.id})\r\n    \r\n# urls.py\r\nfrom django.contrib.sitemaps.views import sitemap\r\nfrom .sitemaps import ArticleSitemap\r\n\r\nsitemaps = {\r\n    \'article\': ArticleSitemap,\r\n}\r\n\r\nurlpatterns = [\r\n    ....\r\n    path(\'sitemap.xml\', sitemap, {\'sitemaps\': sitemaps}),\r\n]\r\n\r\n# 之后访问 127.0.0.1:8000/sitemap.xml，看到一个xml文档\r\n```\r\n\r\n\r\n\r\n### 静态视图的Sitemap\r\n\r\n```python\r\n# sitemaps.py\r\nfrom django.contrib import sitemaps\r\nfrom django.urls import reverse\r\n\r\nclass StaticViewSitemap(sitemaps.Sitemap):\r\n    \"\"\" 静态视图，例如抓取index和关于我页 \"\"\"\r\n    priority = 0.5\r\n    changefreq = \'daily\'\r\n\r\n    def items(self):\r\n        # 在items里显式列出静态视图名称\r\n        return [\'index\', \'about\']\r\n\r\n    def location(self, item):\r\n        # 在location里用reverse调用, obj是一个个items返回后的对象\r\n        return reverse(item)\r\n\r\n# urls.py\r\nfrom django.contrib.sitemaps.views import sitemap\r\nfrom django.urls import path\r\n\r\nfrom .sitemaps import StaticViewSitemap\r\nfrom . import views\r\n\r\nsitemaps = {\r\n    \'static\': StaticViewSitemap,\r\n}\r\n\r\nurlpatterns = [\r\n    path(\'\', views.main, name=\'main\'),\r\n    path(\'about/\', views.about, name=\'about\'),\r\n    path(\'license/\', views.license, name=\'license\'),\r\n    # ...\r\n    path(\'sitemap.xml\', sitemap, {\'sitemaps\': sitemaps},\r\n         name=\'django.contrib.sitemaps.views.sitemap\')\r\n]\r\n```', '0', '0', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('6', '2019-02-13 19:42:43.895543', '2019-03-16 10:15:29.899649', 'django-haystack全文搜索', '### 使用django-haystack进行全局文章搜索\r\n\r\n```python\r\npip install django-haystack==2.8.1\r\n```\r\n\r\n### githu地址和文档地址\r\n\r\n​	https://github.com/django-haystack/django-haystack\r\n\r\n​	https://django-haystack.readthedocs.io/en/v2.4.1/tutorial.html\r\n\r\n### 安装搜索引擎\r\n\r\n文档:https://django-haystack.readthedocs.io/en/v2.4.1/installing_search_engines.html\r\n\r\n这里选择 Whoosh，Tolearn: Elasticsearch\r\n\r\n```pip install whoosh==2.7.4```\r\n\r\n\r\n\r\n### 这里注意 :\r\n\r\nhaystack只对在安装完毕后，重新添加的有效，之前创建的数据是没有建立索引无法搜索出来的(测试了好久/捂脸)\r\n\r\n\r\n\r\n### 添加jieba作为中文分词\r\n\r\npip install jieba==0.39\r\n\r\n复制一份 haystack.backends.whoosh_backend.py出来到utils目录下 `个人设置`\r\n\r\n```python\r\n# 修改其源代码\r\nfrom jieba.analyse import ChineseAnalyzer\r\n......\r\n......\r\n# 找到build_schema这个函数的\r\nschema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=StemmingAnalyzer()\r\n# 将StemmingAnalyzer替换为jieba的ChineseAnalyzer\r\nschema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer()\r\n```\r\n\r\n\r\n\r\n添加 haystack 到 `INSTALLED_APPS`\r\n\r\nsettings里设置引擎:\r\n\r\n```python\r\nHAYSTACK_CONNECTIONS = {\r\n    \'default\': {\r\n        \'ENGINE\': \'haystack.backends.whoosh_backend.WhooshEngine\',\r\n        \'PATH\': os.path.join(os.path.dirname(__file__), \'whoosh_index\'),\r\n    },\r\n}\r\n```\r\n\r\n\r\n\r\n在blog目录下创建 search_indexes.py(看文档)\r\n\r\n```python\r\nfrom haystack import indexes\r\nfrom .models import Article\r\n\r\n\r\nclass ArticleIndex(indexes.SearchIndex, indexes.Indexable):\r\n    text = indexes.CharField(document=True, use_template=True)\r\n\r\n    def get_model(self):\r\n        return Article\r\n```\r\n\r\nurl设置\r\n\r\n```path(\'search\', include(\'haystack.urls\'))	```\r\n\r\n\r\n\r\n模板文件:\r\n\r\n`search/indexes/myapp/aitilce_text.txt`\r\n\r\n```\r\n{{ object.title }}\r\n{{ object.author.username }}\r\n{{ object.content }}\r\n```\r\n\r\n\r\n\r\n模板文件 search.html\r\n\r\n```html\r\n{% extends \'base.html\' %}\r\n\r\n{% block content %}\r\n    <h2>Search</h2>\r\n\r\n    <form method=\"get\" action=\".\">\r\n        <table>\r\n            {{ form.as_table }}\r\n            <tr>\r\n                <td>&nbsp;</td>\r\n                <td>\r\n                    <input type=\"submit\" value=\"Search\">\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n        {% if query %}\r\n            <h3>Results</h3>\r\n\r\n            {% for result in page.object_list %}\r\n                <p>\r\n                    <a href=\"{{ result.object.get_absolute_url }}\">{{ result.object.title }}</a>\r\n                </p>\r\n            {% empty %}\r\n                <p>No results found.</p>\r\n            {% endfor %}\r\n\r\n            {% if page.has_previous or page.has_next %}\r\n                <div>\r\n                    {% if page.has_previous %}<a href=\"?q={{ query }}&amp;page={{ page.previous_page_number }}\">{% endif %}&laquo; Previous{% if page.has_previous %}</a>{% endif %}\r\n                    |\r\n                    {% if page.has_next %}<a href=\"?q={{ query }}&amp;page={{ page.next_page_number }}\">{% endif %}Next &raquo;{% if page.has_next %}</a>{% endif %}\r\n                </div>\r\n            {% endif %}\r\n        {% else %}\r\n            {# Show some example queries to run, maybe query syntax, something else? #}\r\n        {% endif %}\r\n    </form>\r\n{% endblock %}\r\n```\r\n\r\n\r\n\r\n### 问题\r\n\r\n他的分页，可以自己重写SearchView来进行分页的实现\r\n\r\n参考: https://blog.csdn.net/caca95/article/details/84893990', '0', '1', '1', '1', 'a');
INSERT INTO `blog_article` VALUES ('7', '2019-02-22 10:22:23.199958', '2019-03-16 10:15:14.279346', 'django-compressor压缩css和js', '# 使用`django-compressor`，压缩 css/js\r\n\r\n将静态文件压缩并合并成一个文件，减少网站请求次数，节省网络带宽\r\n\r\ngithub地址: https://github.com/django-compressor/django-compressor\r\n\r\n文档地址: https://django-compressor.readthedocs.io/en/latest/quickstart/\r\n\r\n\r\n\r\n### 补充：Settings文件静态资源配置详解\r\n\r\n新版的Django都有将  `django.contrib.staticfiles` 加入内置app\r\n\r\n### 1. STATIC_URL\r\n\r\nsettings里： ```STATIC_URL = \'/static/\' ```\r\n\r\nSTATIC_URL是浏览器访问静态资源时路径，比如：模版中定义的资源路径是：\r\n\r\n```python\r\n{% load static %}\r\n<script src=\"{% static \"css/style.css\" %}\"></script>\r\n\r\n# 最后实际渲染出来的是：\r\n<script src=\"/static/css/style.css\"></script>\r\n\r\n# url上显示的静态文件目录127.0.0.1:8080/static/css/style.css\r\n# 可以自己指定, 没有强制规定为 static，不过一般约定俗成\r\n```\r\n\r\n### 2. STATICFILES_DIRS，多个存储静态资源的目录\r\n\r\n```python\r\n# settings里\r\nSTATICFILES_DIRS = (\r\n    os.path.join(BASE_DIR, \"static\"),\r\n    \'其他存放静态文件的目录, 例如一些共用包，可以放在磁盘上的任意位置(有权限访问)\',\r\n)\r\n```\r\n\r\n### 3. STATIC_ROOT，收集静态资源的目录\r\n\r\n在生产环境下，就需要使用到这个了，作用是收集项目里所有的静态文件，将其收集到统一目录下，然后使用Nginx代理这些静态文件，在开发环境中可以不指定，而且不能是STATICFILES_DIRS里的元素\r\n\r\n```python\r\n# settings里\r\nSTATIC_ROOT = os.path.join(BASE_DIR, \'collectedstatic\')\r\n\r\n# 运行collectstatic管理命令\r\npython ./manage.py collectstatic\r\n\r\n# 而后所有静态资源将都会统一的收录到 collectstatic 目录下\r\n```\r\n\r\n### 4. 静态文件的finder，默认有的\r\n\r\n```python\r\nSTATICFILES_FINDERS = (\r\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\r\n	\"django.contrib.staticfiles.finders.AppDirectoriesFinder\"\r\n)\r\n# AppDirectoriesFinder就是负责在各个app/static目录下查找静态文件。\r\n# FileSystemFinder就是用来查找定义在STATICFILES_DIRS中的静态文件的。\r\n```\r\n\r\n\r\n## 使用django-compressor压缩静态文件\r\n\r\n### 1. 安装\r\n\r\n```pip install django-compressor==2.2```\r\n\r\n### 2. 配置\r\n\r\nsettings里的配置:\r\n\r\n```\r\nINSTALLED_APPS = (\r\n    # other apps\r\n    \"compressor\",\r\n)\r\n\r\nCOMPRESS_ENABLED = True  # 开启Compressor，因为默认是和DEBUG相反，用于生产环境，显式启动\r\n\r\nSTATICFILES_FINDERS = (\r\n    \'django.contrib.staticfiles.finders.FileSystemFinder\',\r\n    \'django.contrib.staticfiles.finders.AppDirectoriesFinder\',\r\n    \'compressor.finders.CompressorFinder\',\r\n)\r\n\r\nSTATIC_ROOT = os.path.join(BASE_DIR, \'collectedstatic\')  # 执行静态资源收集后存储的目录\r\n```\r\n\r\n### 3. 使用\r\n\r\n- 在模板文件中添加模板标签 `{% load compress %}`\r\n- 将需要压缩的css和js分别用 {% compress css %}{% endcompress %}包裹\r\n\r\n```html\r\n{% load compress %}\r\n\r\n{% compress css %}\r\n<link href=\"{% static \"css/base.css\" %}\" rel=\"stylesheet\">\r\n<link href=\"{% static \"css/style.css\" %}\" rel=\"stylesheet\">\r\n{% endcompress %}\r\n\r\n{% compress js %}\r\n<script src=\"{% static \"js/style.js\" %}\"></script>\r\n<script src=\"{% static \"js/blog.js\" %}\"></script>\r\n{% endcompress %}\r\n```\r\n\r\n- 启动项目查看渲染后的样子\r\n\r\n  ```html\r\n  <link rel=\"stylesheet\" href=\"/static/CACHE/css/25fb70e47f11.css\" type=\"text/css\" />\r\n  <script type=\"text/javascript\" src=\"/static/CACHE/js/c71e77581f2f.js\"></script>\r\n  ```\r\n\r\n- 同时项目目录下出现 `STATIC_ROOT`里设置的目录，并且压缩后的文件都存放在这的CACHE下\r\n\r\n- 修改静态文件后，项目重启会自动压缩并更新在CACHE里的压缩文件\r\n\r\n### 4. 不知道生产环境下是否需要(还没尝试) TODO\r\n\r\n```\r\npython manage.py collectstatic\r\npython manage.py compress --force\r\n```', '0', '0', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('8', '2019-02-08 21:30:45.462461', '2019-02-27 18:18:21.468450', '在网页中引入github项目的 star数量图标', '# 在网页中引入	github项目的 star数量图标\r\n\r\n\r\ngithub丝绸图片地址:\r\n\r\n​	https://github.blog/2008-12-19-github-ribbons/\r\n\r\n\r\niframe引入\r\n\r\n​<iframe frameborder=\"0\" scrolling=\"0\" width=\"91px\" height=\"20px\"\r\n    src=\"https://ghbtns.com/github-btn.html?user=enjoy-binbin&repo=binshop-Django&type=star&count=true\" >\r\n</iframe>	\r\n\r\n\r\n\r\n\r\n\r\n推荐图片引入:https://shields.io/category/social，修改对应的用户和仓库名\r\n\r\n<a href=\"https://github.com/enjoy-binbin\"><img src=\"https://img.shields.io/github/stars/enjoy-binbin/binshop-Django.svg?style=social\"></a>\r\n\r\n<a href=\"https://github.com/enjoy-binbin\"><img src=\"https://img.shields.io/github/forks/enjoy-binbin/binshop-Django.svg?style=social\"></a>', '0', '0', '1', '1', 'a');
INSERT INTO `blog_article` VALUES ('9', '2019-02-17 11:46:49.783391', '2019-03-16 10:14:58.599932', 'django中间件, 页面加载时间', '﻿用django中间件，实现一个功能，获取一个页面的加载时间，并显示在页面底部\r\n\r\n### 编写中间件，在blog目录下新建一个 middleware.py\r\n\r\n```python\r\nimport time\r\n\r\n\r\nclass LoadTimeMiddleware(object):\r\n    \"\"\" 在页面底部显示当前页面的加载时间 \"\"\"\r\n\r\n    def __init__(self, get_response=None):\r\n        self.get_response = get_response\r\n\r\n    def __call__(self, request):\r\n        # 会在调用view和之后的中间件之前调用\r\n        start_time = time.time()\r\n        response = self.get_response(request)\r\n        load_time = time.time() - start_time\r\n        # 要使用bytes, 将 <!!LOAD_TIME!!> 替换为加载时间\r\n        response.content = response.content.replace(b\'<!!LOAD_TIME!!>\', str.encode(str(load_time)[:5]))\r\n        return response\r\n\r\n```\r\n\r\n### settIngs里设置中间件\r\n\r\n```\r\nMIDDLEWARE = [\r\n    ....\r\n    \'blog.middleware.LoadTimeMiddleware\'  # 页面加载时间\r\n]\r\n```\r\n\r\n### 模板文件里调用\r\n\r\n```html\r\n<div style=\"text-align: center\">\r\n    本页面加载耗时:<!!LOAD_TIME!!>s\r\n</div>\r\n```', '0', '0', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('10', '2019-02-10 21:11:24.518015', '2019-02-27 18:21:10.523516', '文章按日期归档', '### 博客文章按日期归档\r\n\r\n基本用法为 `{% regroup 类列表对象 by 列表中元素的某个属性 as 模板变量 %}`\r\n\r\n下例中根据 `aritlce_list`列表中元素的 `add_time.year`  属性  `regroup`  了 `cities`，并通过 as 将分组后的结果保存到了 `country_list` 模板变量中。\r\n\r\n然后可以循环这个分组后的列表。被循环的元素包含两个属性：\r\n\r\n- `grouper`，就是分组依据的属性值，例如下面中的 19年 18年\r\n- `list`，属于该组下原列表中元素\r\n\r\n\r\n\r\n```python\r\n# model\r\nfrom django.db import models\r\n	class Article(models.Model):\r\n		title = models.CharField(max_length=100)\r\n    	add_time = models.DatetimeField()\r\n\r\n# view，这里如果不用通用视图，只需要view里能返回一个有序的article_list即可\r\nclass ArchivesView(ListView):\r\n    template_name = \'blog/archives.html\'  # 渲染的模板\r\n    context_object_name = \'article_list\'  # 模板中上下文调用的对象名称\r\n    queryset = Article.objects.all().order_by(\'-add_time\')  # 这里需要排好序\r\n    \r\n# template \r\n{% regroup article_list by add_time.year as year_list %}\r\n<ul>\r\n    {% for year in year_list %}\r\n        <li>{{ year.grouper }} 年\r\n            {% regroup year.list by add_time.month as month_list %}\r\n            <ul>\r\n                {% for month in month_list %}\r\n                    <li>{{ month.grouper }} 月\r\n                        <ul>\r\n                            {% for article in month.list %}\r\n                                <li><a href=\"{{ article.get_absolute_url }}\">{{ article.title }}</a></li>\r\n                            {% endfor %}\r\n                        </ul>\r\n                    </li>\r\n                {% endfor %}\r\n            </ul>\r\n        </li>\r\n    {% endfor %}\r\n</ul>\r\n\r\n```\r\n\r\n## 总结\r\n\r\n`regroup` 模板标签对于需要层级分组显示的对象十分有用。但有一点需要注意，**被分组的对象一定要是已经有序排列的**，否则 `regroup` 无法正确地分组。相信从以上两个示例中你可以很容易地总结出 `regroup` 模板标签的用法，从而用于自己的特定需求中，例如像知乎一样对用户每天的通知进行分组显示。', '0', '0', '1', '1', 'a');
INSERT INTO `blog_article` VALUES ('11', '2019-02-26 10:38:31.848824', '2019-02-27 18:23:07.854833', '为django的manage添加命令', '### 为django的manage添加命令\r\n\r\n文档地址：https://docs.djangoproject.com/en/2.1/howto/custom-management-commands/\r\n\r\n在已注册的app目录下 创建 `management目录`和，接着在在management目录下创建`commands目录`和`__init__.py文件`，最后在`commands目录`下创`建命令py文件`和`__init__.py`，文件名即为命令\r\n\r\ndjango/core/management/commands/...  (django的命令源码)\r\n\r\n下面创建一个命令create_testdata，执行命令后会向表里插入一些博客测试数据\r\n\r\n```powershell\r\n# 目录结构为\r\n├─management\r\n│  │  __init__.py\r\n│  │\r\n│  └─commands\r\n│          create_testdata.py\r\n│          __init__.py\r\n```\r\n\r\n\r\n\r\ncreate_testdata.py文件\r\n\r\n~~~python\r\nfrom django.core.management.base import BaseCommand\r\nfrom django.contrib.auth import get_user_model\r\n\r\nfrom blog.models import Article, Tag, Category\r\n\r\nuser_model = get_user_model()\r\n\r\n\r\nclass Command(BaseCommand):\r\n    \"\"\" run manage.py create_testdata \"\"\"\r\n    help = \'create test datas\'\r\n\r\n    def handle(self, *args, **options):\r\n        # get_or_create 没有便创建, 返回一个元组 (obj, created)\r\n        user = user_model.objects.get_or_create(\r\n            username=\'testadmin\', password=\'abc123456.0\', email=\'test@qq.com\',\r\n            is_staff=True, is_superuser=True)[0]\r\n\r\n        parent_category = Category.objects.get_or_create(name=\'python学习\', parent_category=None)[0]\r\n\r\n        sub_category = Category.objects.get_or_create(name=\'django学习\', parent_category=parent_category)[0]\r\n\r\n        basetag = Tag.objects.get_or_create(name=\'Django\')[0]\r\n\r\n        # 创建20篇测试文章\r\n        for i in range(1, 20):\r\n            article = Article.objects.get_or_create(\r\n                category=sub_category,\r\n                title=\'我是测试标题 \' + str(i),\r\n                content=\'我是测试内容 \' + str(i),\r\n                author=user\r\n            )[0]\r\n            tag = Tag.objects.get_or_create(name=\'标签\' + str(i))[0]\r\n\r\n            article.tags.add(tag)\r\n            article.tags.add(basetag)\r\n            article.save()\r\n\r\n        # 创建文章\r\n        article = Article.objects.get_or_create(\r\n            category=sub_category,\r\n            title=\'彬彬博客\',\r\n            content=\"\"\"### 支持Markdown\r\n\r\n```python\r\nprint(\'支持语法高亮\')\r\n```\r\n            \"\"\",\r\n            author=user\r\n        )[0]\r\n        article.tags.add(basetag)\r\n        article.save()\r\n\r\n        self.stdout.write(self.style.SUCCESS(\'Data created sucessfully！ \\n\'))\r\n~~~\r\n\r\n之后在命令行里运行\r\n\r\n```\r\npython manage.py create_testdata\r\n```', '0', '0', '1', '1', 'a');
INSERT INTO `blog_article` VALUES ('12', '2019-02-27 16:25:35.653472', '2019-03-16 10:14:45.948053', '在django中使用缓存', '### 在django中使用缓存\r\n\r\n文档地址：https://docs.djangoproject.com/en/2.1/topics/cache/\r\n\r\n中文文档：http://djangobook.py3k.cn/2.0/chapter15/\r\n\r\ndjango的缓存系统中有基于全站，有基于视图等不同粒度的缓存\r\n\r\n下面我根据自己的想法，只使用了最基本的，cache.get和cache.set两个接口\r\n\r\n一般缓存处理逻辑，在缓存中查找数据，有则返回，否则则从数据库获取数据并写入缓存\r\n\r\n### 使用本地内存缓冲\r\n\r\n```python\r\n# settings.py里配置\r\nCACHES = {\r\n    \'default\': {\r\n        \'BACKEND\': \'django.core.cache.backends.locmem.LocMemCache\',  # 本地内存缓存\r\n        \'TIMEOUT\': 60 * 60 * 1,  # 过期时间 秒, 一个钟过期\r\n        \'LOCATION\': \'unique-snowflake\',\r\n    }\r\n}\r\n\r\n# views.py中\r\nfrom django.core.cache import cache\r\nfrom django.views.generic import ListView\r\n\r\nfrom blog.models import Article\r\n\r\nclass IndexView(ListView):\r\n    \"\"\" 首页view，返回一些文章列表 \"\"\"\r\n    model = Article  # 指定的model\r\n    template_name = \'blog/index.html\'  # 渲染的模板\r\n    context_object_name = \'article_list\'  # 在模板中使用的上下文变量，默认为 object_list\r\n    page_kwarg = \'page\'  # 前端约定好的页码的key\r\n\r\n    def get_queryset(self):\r\n        queryset = cache.get(self.cache_key)  # 查询缓存\r\n        if not queryset:  # 缓存没命中会返回 None\r\n            queryset = super().get_queryset()  # 调用父类的方法\r\n            cache.set(self.cache_key, queryset)  # 设置缓存\r\n        return queryset\r\n\r\n    @property\r\n    def page_value(self):\r\n        \"\"\" 前端页码值，用于做缓存key的拼接 \"\"\"\r\n        page = self.request.GET.get(self.page_kwarg) or 1\r\n        return page\r\n\r\n    @property\r\n    def cache_key(self):\r\n        \"\"\" 缓存里的key \"\"\"\r\n        return \'index_%s\' % self.page_value\r\n    \r\n # 缓存设置,想在本地看到是否有效,可以实时更改数据库里的数据,缓存里的数据不会变\r\n```\r\n\r\n\r\n\r\n### 使用Memcached进行缓存\r\n\r\n首先安装memcached (本机win10 64位)\r\n\r\n下载地址：http://static.runoob.com/download/memcached-win64-1.4.4-14.zip\r\n\r\n参考连接：http://www.runoob.com/memcached/window-install-memcached.html\r\n\r\n按照链接下载符合版本的文件，解压后，进入命令行，注意使用管理员命令行\r\n\r\n```\r\n# 安装服务，之后可以在 我的电脑>管理>服务和应用程序中查看，可以这样启动或关闭\r\nd:\\memcached>memcached.exe -d install\r\n\r\n# 启动服务\r\nd:\\memcached>memcached.exe -d start\r\n\r\n# 关闭服务\r\nd:\\memcached\\memcached.exe -d stop\r\n\r\n# 卸载\r\nd:\\memcached\\memcached.exe -d uninstall\r\n\r\n# 设置 memcached 最大的缓存配置为512M\r\nd:\\memcached>memcached.exe -d runserver -m 512\r\n```\r\n\r\n```shell\r\n# 一些命令行操作，连接 set get\r\ntelnet 127.0.0.1 11211\r\n\r\n# 设置一个缓存, key为bin，flag为0（不懂） 10s过期，存储5个字节\r\n< set bin 0 10 5\r\n> abcde\r\n> STORED\r\n\r\n# 获取一个缓存\r\n< get bin\r\n> VALUE bin 0 5\r\n> abcde\r\n> END\r\n\r\n其他略。\r\n```\r\n\r\n\r\n\r\n\r\n\r\n#### 在django中使用memcached缓存\r\n\r\n安装python-memcached `pip install python-memcached`，记得安装和启动memached服务\r\n\r\n```python\r\n# settings.py里配置\r\nCACHES = {\r\n    \'default\': {\r\n        \'BACKEND\': \'django.core.cache.backends.memcached.MemcachedCache\',\r\n        \'LOCATION\': \'127.0.0.1:11211\',  # 连接主机和端口\r\n        \'TIMEOUT\': 60 * 60 * 1,  # 过期时间 单位为秒\r\n    }\r\n}\r\n\r\n# views中的逻辑和之前的一样\r\nfrom django.core.cache import cache\r\nfrom django.views.generic import ListView\r\n\r\nfrom blog.models import Article\r\n\r\nclass IndexView(ListView):\r\n    \"\"\" 首页view，返回一些文章列表 \"\"\"\r\n    model = Article  # 指定的model\r\n    template_name = \'blog/index.html\'  # 渲染的模板\r\n    context_object_name = \'article_list\'  # 在模板中使用的上下文变量，默认为 object_list\r\n    page_kwarg = \'page\'  # 前端约定好的页码的key\r\n\r\n    def get_queryset(self):\r\n        queryset = cache.get(self.cache_key)  # 查询缓存\r\n        if not queryset:  # 缓存没命中会返回 None\r\n            queryset = super().get_queryset()  # 调用父类的方法\r\n            cache.set(self.cache_key, queryset)  # 设置缓存\r\n        return queryset\r\n\r\n    @property\r\n    def page_value(self):\r\n        \"\"\" 前端页码值，用于做缓存key的拼接 \"\"\"\r\n        page = self.request.GET.get(self.page_kwarg) or 1\r\n        return page\r\n\r\n    @property\r\n    def cache_key(self):\r\n        \"\"\" 缓存里的key \"\"\"\r\n        return \'index_%s\' % self.page_value\r\n    \r\n# 缓存设置,想在本地看到是否有效,可以实时更改数据库里的数据,缓存里的数据不会变\r\n# 对于 memcached服务，需要开启服务，而后重启Django项目，查看效果。\r\n```', '0', '2', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('13', '2019-02-08 18:37:25.013733', '2019-03-16 10:14:17.391222', 'Markdown你的文章', '```\r\nmarkdown越来越流行, 在博客网站上集成markdown\r\n```\r\n\r\n### 在admin后台编辑详情页里，给博客文章content加上markdown\r\n\r\n查看我那篇关于admin设置的笔记文章吧。\r\n\r\n\r\n\r\n### markdown你的博文\r\n\r\n新建一个py文件，在后面用于引入。我是放在 utils目录下的\r\n\r\n```python\r\nimport mistune\r\nfrom pygments import highlight\r\nfrom pygments.lexers import get_lexer_by_name\r\nfrom pygments.formatters import html\r\n\r\n\r\n# The fastest markdown parser in pure Python with renderer features, inspired by marked.\r\n# https://github.com/lepture/mistune\r\n\r\nclass ArticleRenderer(mistune.Renderer):\r\n    \"\"\" 对文章进行 markdown显示，和 代码高亮 \"\"\"\r\n\r\n    def block_code(self, code, lang=None):\r\n        \"\"\"Rendering block level code. ``pre > code``.\r\n\r\n        :param code: text content of the code block.\r\n        :param lang: language of the given code.\r\n        \"\"\"\r\n        code = code.rstrip(\'\\n\')  # 去掉尾部的换行符\r\n        if not lang:\r\n            code = mistune.escape(code)\r\n            return \'<pre><code>%s\\n</code></pre>\\n\' % code\r\n\r\n        # 给代码加上高亮  例如: lang=\'python\'的话\r\n        # ```python\r\n        #   print(\'666\')\r\n        # ```\r\n        lexer = get_lexer_by_name(lang, stripall=True)\r\n        formatter = html.HtmlFormatter()\r\n        return highlight(code, lexer, formatter)\r\n\r\n\r\ndef article_markdown(text):\r\n    \"\"\" 对传入的text文本进行markdown \"\"\"\r\n    renderer = ArticleRenderer()\r\n    markdown = mistune.Markdown(renderer=renderer)\r\n    return markdown(text)\r\n\r\n```\r\n\r\n\r\n\r\n在blog_tags.py里自定义一个过滤器，在模板文件里对文章进行markdown\r\n\r\n```python\r\nfrom django.template.defaultfilters import stringfilter\r\nfrom django import template\r\n\r\nfrom utils.mistune_markdown import article_markdown as _article_markdown\r\n\r\nregister = template.Library()  # 名字是固定的register\r\n\r\n@register.filter(is_safe=True)\r\n@stringfilter\r\ndef article_markdown(text):\r\n    \"\"\" 给文章加上 markdown支持 和 代码高亮 \"\"\"\r\n    return mark_safe(_article_markdown(text))\r\n```\r\n\r\n\r\n\r\n模板文件里面调用方式:   ( truncatechars_html过滤器是 django自带的可以用来截取html)\r\n\r\n在列表页就截取部分长度的内容，而在文章详情页就不用截取\r\n\r\n```\r\n{{ article.content|article_markdown|truncatechars_html:250 }}\r\n```', '0', '0', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('14', '2019-03-07 19:34:44.741123', '2019-03-16 10:13:49.691511', 'Django的managers管理器', '### Django的managers\r\n\r\n文档地址：https://docs.djangoproject.com/en/2.1/topics/db/managers/\r\n\r\n\r\n\r\nArticle.objects.all()    objects就是一个manager管理器，django会默认给所有模型增添上objects管理器\r\n\r\n下面是创建自定义manager的两个原因： 增加额外的manager方法，或修改manager返回的初始QuerySet。\r\n\r\n增加额外的manager方法可以将经常使用的查询进行封装，就不用重复编码了\r\n\r\n\r\n\r\n#### 修改manager返回的初始QuerySet简单用法：\r\n\r\n场景：在博客中，找出所有的一级分类\r\n\r\n当然，我们可以 Category.objects.filter(parent_category=None)\r\n\r\n或者，用管理器 Category.top_objects.all()\r\n\r\n\r\n\r\n```python\r\nclass TopCategoryManager(models.Manager):\r\n    \"\"\" Django.Manager的用法，定义管理器，返回一级分类 \"\"\"\r\n\r\n    def get_queryset(self):\r\n        return super().get_queryset().filter(parent_category=None)\r\n\r\nclass Category(BaseModel):\r\n    \"\"\" 文章分类 \"\"\"\r\n    name = models.CharField(\'分类名称\', max_length=30, unique=True)\r\n    parent_category = models.ForeignKey(\'self\', verbose_name=\'父级分类\', blank=True, null=True, on_delete=models.CASCADE)\r\n\r\n    objects = models.Manager()  # 当自定义了管理器，django将不再默认管理对象objects了, 需要手动指定\r\n    top_objects = TopCategoryManager()  # 调用方式: Category.top_object.all()\r\n```', '0', '3', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('15', '2019-03-16 10:19:48.625682', '2019-03-16 10:22:23.936705', '(转)不是技术也能看懂云计算，大数据，人工智能', '作者： 刘超\r\n\r\nPOST: 2018-03-04\r\n\r\n<a href=\'http://www.cnblogs.com/popsuper1982/p/8505203.html\'>www.cnblogs.com/popsuper1982/p/8505203.html</a>\r\n\r\n\r\n\r\n我今天要讲这三个话题，一个是云计算，一个大数据，一个人工智能，我为什么要讲这三个东西呢？因为这三个东西现在非常非常的火，它们之间好像互相有关系，一般谈云计算的时候也会提到大数据，谈人工智能的时候也会提大数据，谈人工智能的时候也会提云计算。所以说感觉他们又相辅相成不可分割，如果是非技术的人员来讲可能比较难理解说这三个之间的相互关系，所以有必要解释一下。\r\n\r\n\r\n\r\n一、云计算最初是实现资源管理的灵活性\r\n\r\n\r\n\r\n我们首先来说云计算，云计算最初的目标是对资源的管理，管理的主要是计算资源，网络资源，存储资源三个方面。\r\n\r\n640?wx_fmt=png\r\n\r\n1.1 管数据中心就像配电脑\r\n\r\n什么叫计算，网络，存储资源呢？就说你要买台笔记本电脑吧，你是不是要关心这台电脑什么样的CPU啊？多大的内存啊？这两个我们称为计算资源。\r\n\r\n这台电脑要能上网吧，需要有个网口可以插网线，或者有无线网卡可以连接我们家的路由器，您家也需要到运营商比如联通，移动，电信开通一个网络，比如100M的带宽，然后会有师傅弄一根网线到您家来，师傅可能会帮您将您的路由器和他们公司的网络连接配置好，这样您家的所有的电脑，手机，平板就都可以通过您的路由器上网了。这就是网络。\r\n\r\n您可能还会问硬盘多大啊？原来硬盘都很小，10G之类的，后来500G，1T，2T的硬盘也不新鲜了。(1T是1024G)，这就是存储。\r\n\r\n对于一台电脑是这个样子的，对于一个数据中心也是同样的。想象你有一个非常非常大的机房，里面堆了很多的服务器，这些服务器也是有CPU，内存，硬盘的，也是通过类似路由器的设备上网的。这个时候的一个问题就是，运营数据中心的人是怎么把这些设备统一的管理起来的呢？\r\n\r\n1.2 灵活就是想啥时要都有，想要多少都行\r\n\r\n管理的目标就是要达到两个方面的灵活性。哪两个方面呢？比如有个人需要一台很小很小的电脑，只有一个CPU，1G内存，10G的硬盘，一兆的带宽，你能给他吗？像这种这么小规格的电脑，现在随便一个笔记本电脑都比这个配置强了，家里随便拉一个宽带都要100M。然而如果去一个云计算的平台上，他要想要这个资源的时候，只要一点就有了。\r\n\r\n所以说它就能达到两个方面灵活性。\r\n\r\n第一个方面就是想什么时候要就什么时候要，比如需要的时候一点就出来了，这个叫做时间灵活性。\r\n\r\n第二个方面就是想要多少呢就有多少，比如需要一个很小很小的电脑，可以满足，比如需要一个特别大的空间，以云盘为例，似乎云盘给每个人分配的空间动不动就就很大很大，随时上传随时有空间，永远用不完，这个叫做空间灵活性。\r\n\r\n空间灵活性和时间灵活性，也即我们常说的云计算的弹性。\r\n\r\n为了解决这个弹性的问题，经历了漫长时间的发展。\r\n\r\n1.3 物理设备不灵活\r\n\r\n首先第一个阶段就是物理机，或者说物理设备时期。这个时期相当于客户需要一台电脑，我们就买一台放在数据中心里。物理设备当然是越来越牛，例如服务器，内存动不动就是百G内存，例如网络设备，一个端口的带宽就能有几十G甚至上百G，例如存储，在数据中心至少是PB级别的(一个P是1024个T，一个T是1024个G)。\r\n\r\n然而物理设备不能做到很好的灵活性。首先它不能够达到想什么时候要就什么时候要、比如买台服务器，哪怕买个电脑，都有采购的时间。突然用户告诉某个云厂商，说想要开台电脑，如果使用物理服务器，当时去采购啊就很难，如果说供应商啊关系一般，可能采购一个月，供应商关系好的话也需要一个星期。用户等了一个星期后，这时候电脑才到位，用户还要登录上去开始慢慢部署自己的应用，时间灵活性非常差。第二是空间灵活性也不行，例如上述的用户，要一个很小很小的电脑，现在哪还有这么小型号的电脑啊。不能为了满足用户只要一个G的内存是80G硬盘的，就去买一个这么小的机器。但是如果买一个大的呢，因为电脑大，就向用户多收钱，用户说他只用这么小的一点，如果让用户多付钱就很冤。\r\n\r\n1.4 虚拟化灵活多了\r\n\r\n有人就想办法了。第一个办法就是虚拟化。用户不是只要一个很小的电脑么？数据中心的物理设备都很强大，我可以从物理的CPU，内存，硬盘中虚拟出一小块来给客户，同时也可以虚拟出一小块来给其他客户，每个客户都只能看到自己虚的那一小块，其实每个客户用的是整个大的设备上其中的一小块。虚拟化的技术能使得不同的客户的电脑看起来是隔离的，我看着好像这块盘就是我的，你看这呢这块盘就是你的，实际情况可能我这个10G和您这个10G是落在同样一个很大很大的这个存储上的。\r\n\r\n而且如果事先物理设备都准备好，虚拟化软件虚拟出一个电脑是非常快的，基本上几分钟就能解决。所以在任何一个云上要创建一台电脑，一点几分钟就出来了，就是这个道理。\r\n\r\n这个空间灵活性和时间灵活性就基本解决了。\r\n\r\n1.5 虚拟世界的赚钱与情怀\r\n\r\n在虚拟化阶段，最牛的公司是Vmware，是实现虚拟化技术比较早的一家公司，可以实现计算，网络，存储的虚拟化，这家公司很牛，性能也做得非常好，然后虚拟化软件卖的也非常好，赚了好多的钱，后来让EMC(世界五百强，存储厂商第一品牌)给收购了。\r\n\r\n但是这个世界上还是有很多有情怀的人的，尤其是程序员里面，有情怀的人喜欢做一件什么事情呢？开源。这个世界上很多软件都是有闭源就有开源，源就是源代码。就是说某个软件做的好，所有人都爱用，这个软件的代码呢，我封闭起来只有我公司知道，其他人不知道，如果其他人想用这个软件，就要付我钱，这就叫闭源。但是世界上总有一些大牛看不惯钱都让一家赚了去。大牛们觉得，这个技术你会我也会，你能开发出来，我也能，我开发出来就是不收钱，把代码拿出来分享给大家，全世界谁用都可以，所有的人都可以享受到好处，这个叫做开源。\r\n\r\n比如最近蒂姆·伯纳斯·李就是个非常有情怀的人，2017年，他因“发明万维网、第一个浏览器和使万维网得以扩展的基本协议和算法”而获得2016年度的图灵奖。图灵奖就是计算机界的诺贝尔奖。然而他最令人敬佩的是，他将万维网，也就是我们常见的www的技术无偿贡献给全世界免费使用。我们现在在网上的所有行为都应该感谢他的功劳，如果他将这个技术拿来收钱，应该和比尔盖茨差不多有钱。\r\n\r\n例如在闭源的世界里有windows，大家用windows都得给微软付钱，开源的世界里面就出现了Linux。比尔盖茨靠windows，Office这些闭源的软件赚了很多钱，称为世界首富，就有大牛开发了另外一种操作系统Linux。很多人可能没有听说过Linux，很多后台的服务器上跑的程序都是Linux上的，比如大家享受双十一，支撑双十一抢购的系统，无论是淘宝，京东，考拉，都是跑在Linux上的。\r\n\r\n再如有apple就有安卓。apple市值很高，但是苹果系统的代码我们是看不到的。于是就有大牛写了安卓手机操作系统。所以大家可以看到几乎所有的其他手机厂商，里面都装安卓系统，因为苹果系统不开源，而安卓系统大家都可以用。\r\n\r\n在虚拟化软件也一样，有了Vmware，这个软件非常非常的贵。那就有大牛写了两个开源的虚拟化软件，一个叫做Xen，一个叫做KVM，如果不做技术的，可以不用管这两个名字，但是后面还是会提到。\r\n\r\n1.6 虚拟化的半自动和云计算的全自动\r\n\r\n虚拟化软件似乎解决了灵活性问题，其实不全对。因为虚拟化软件一般创建一台虚拟的电脑，是需要人工指定这台虚拟电脑放在哪台物理机上的，可能还需要比较复杂的人工配置，所以使用Vmware的虚拟化软件，需要考一个很牛的证书，能拿到这个证书的人，薪资是相当的高，也可见复杂程度。所以仅仅凭虚拟化软件所能管理的物理机的集群规模都不是特别的大，一般在十几台，几十台，最多百台这么一个规模。这一方面会影响时间灵活性，虽然虚拟出一台电脑的时间很短，但是随着集群规模的扩大，人工配置的过程越来越复杂，越来越耗时。另一方面也影响空间灵活性，当用户数量多的时候，这点集群规模，还远达不到想要多少要多少的程度，很可能这点资源很快就用完了，还得去采购。所以随着集群的规模越来越大，基本都是千台起步，动辄上万台，甚至几十上百万台，如果去查一下BAT，包括网易，包括谷歌，亚马逊，服务器数目都大的吓人。这么多机器要靠人去选一个位置放这台虚拟化的电脑并做相应的配置，几乎是不可能的事情，还是需要机器去做这个事情。\r\n\r\n人们发明了各种各样的算法来做这个事情，算法的名字叫做调度(Scheduler)。通俗一点的说，就是有一个调度中心，几千台机器都在一个池子里面，无论用户需要多少CPU，内存，硬盘的虚拟电脑，调度中心会自动在大池子里面找一个能够满足用户需求的地方，把虚拟电脑启动起来做好配置，用户就直接能用了。这个阶段，我们称为池化，或者云化，到了这个阶段，才可以称为云计算，在这之前都只能叫虚拟化。\r\n\r\n1.7 云计算的私有与公有\r\n\r\n云计算大致分两种，一个是私有云，一个是公有云，还有人把私有云和公有云连接起来称为混合云，我们暂且不说这个。私有云就是把虚拟化和云化的这套软件部署在别人的数据中心里面，使用私有云的用户往往很有钱，自己买地建机房，自己买服务器，然后让云厂商部署在自己这里，Vmware后来除了虚拟化，也推出了云计算的产品，并且在私有云市场赚的盆满钵满。所谓公有云就是虚拟化和云化软件部署在云厂商自己数据中心里面的，用户不需要很大的投入，只要注册一个账号，就能在一个网页上点一下创建一台虚拟电脑，例如AWS也即亚马逊的公有云，例如国内的阿里云，腾讯云，网易云等。\r\n\r\n亚马逊呢为什么要做公有云呢？我们知道亚马逊原来是国外比较大的一个电商，它做电商的时候也肯定会遇到类似双11的场景，在某一个时刻大家都冲上来买东西。当大家都冲上买东西的时候，就特别需要云的时间灵活性和空间灵活性。因为它不能时刻准备好所有的资源，那样太浪费了。但也不能什么都不准备，看着双十一这么多用户想买东西登不上去。所以需要双十一的时候，创建一大批虚拟电脑来支撑电商应用，过了双十一再把这些资源都释放掉去干别的。所以亚马逊是需要一个云平台的。\r\n\r\n然而商用的虚拟化软件实在是太贵了，亚马逊总不能把自己在电商赚的钱全部给了虚拟化厂商吧。于是亚马逊基于开源的虚拟化技术，如上所述的Xen或者KVM，开发了一套自己的云化软件。没想到亚马逊后来电商越做越牛，云平台也越做越牛。而且由于他的云平台需要支撑自己的电商应用，而传统的云计算厂商多为IT厂商出身，几乎没有自己的应用，因而亚马逊的云平台对应用更加的友好，迅速发展成为云计算的第一品牌，赚了很多钱。在亚马逊公布其云计算平台财报之前，人们都猜测，亚马逊电商赚钱，云也赚钱吗？后来一公布财报，发现不是一般的赚钱，仅仅去年，亚马逊AWS年营收达122亿美元，运营利润31亿美元。\r\n\r\n1.8 云计算的赚钱与情怀\r\n\r\n公有云的第一名亚马逊过得很爽，第二名Rackspace过的就一般了。没办法，这就是互联网行业的残酷性，多是赢者通吃的模式。所以第二名如果不是云计算行业的，很多人可能都没听过了。第二名就想，我干不过老大怎么办呢？开源吧。如上所述，亚马逊虽然使用了开源的虚拟化技术，但是云化的代码是闭源的，很多想做又做不了云化平台的公司，只能眼巴巴的看着亚马逊挣大钱。Rackspace把源代码一公开，整个行业就可以一起把这个平台越做越好，兄弟们大家一起上，和老大拼了。\r\n\r\n于是Rackspace和美国航空航天局合作创办了开源软件OpenStack，如图所示OpenStack的架构图，不是云计算行业的不用弄懂这个图，但是能够看到三个关键字，Compute计算，Networking网络，Storage存储。还是一个计算，网络，存储的云化管理平台。\r\n\r\n当然第二名的技术也是非常棒的，有了OpenStack之后，果真像Rackspace想象的一样，所有想做云的大企业都疯了，你能想象到的所有如雷贯耳的大型IT企业，IBM，惠普，戴尔，华为，联想等等，都疯了。原来云平台大家都想做，看着亚马逊和Vmware赚了这么多钱，眼巴巴看着没办法，想自己做一个好像难度还挺大。现在好了，有了这样一个开源的云平台OpenStack，所有的IT厂商都加入到这个社区中来，对这个云平台进行贡献，包装成自己的产品，连同自己的硬件设备一起卖。有的做了私有云，有的做了公有云，OpenStack已经成为开源云平台的事实标准。\r\n\r\n1.9 IaaS, 资源层面的灵活性\r\n\r\n随着OpenStack的技术越来越成熟，可以管理的规模也越来越大，并且可以有多个OpenStack集群部署多套，比如北京部署一套，杭州部署两套，广州部署一套，然后进行统一的管理。这样整个规模就更大了。在这个规模下，对于普通用户的感知来讲，基本能够做到想什么时候要就什么什么药，想要多少就要多少。还是拿云盘举例子，每个用户云盘都分配了5T甚至更大的空间，如果有1亿人，那加起来空间多大啊。其实背后的机制是这样的，分配你的空间，你可能只用了其中很少一点，比如说它分配给你了5个T，这么大的空间仅仅是你看到的，而不是真的就给你了，你其实只用了50个G，则真实给你的就是50个G，随着你文件的不断上传，分给你的空间会越来越多。当大家都上传，云平台发现快满了的时候(例如用了70%)，会采购更多的服务器，扩充背后的资源，这个对用户是透明的，看不到的，从感觉上来讲，就实现了云计算的弹性。其实有点像银行，给储户的感觉是什么时候取钱都有，只要不同时挤兑，银行就不会垮。\r\n\r\n这里做一个简单的总结，到了这个阶段，云计算基本上实现了时间灵活性和空间灵活性，实现了计算，网络，存储资源的弹性。计算，网络，存储我们常称为基础设施Infranstracture, 因而这个阶段的弹性称为资源层面的弹性，管理资源的云平台，我们称为基础设施服务，就是我们常听到的IaaS，Infranstracture As A Service。\r\n\r\n二、云计算不光管资源，也要管应用\r\n\r\n640?wx_fmt=png\r\n\r\n有了IaaS，实现了资源层面的弹性就够了吗？显然不是。还有应用层面的弹性。这里举个例子，比如说实现一个电商的应用，平时十台机器就够了，双十一需要一百台。你可能觉得很好办啊，有了IaaS，新创建九十台机器就可以了啊。但是90台机器创建出来是空的啊，电商应用并没有放上去啊，只能你公司的运维人员一台一台的弄，还是需要很长时间才能安装好的。虽然资源层面实现了弹性，但是没有应用层的弹性，依然灵活性是不够的。\r\n\r\n有没有方法解决这个问题呢？于是人们在IaaS平台之上又加了一层，用于管理资源以上的应用弹性的问题，这一层通常称为PaaS（Platform As A Service）。这一层往往比较难理解，其实大致分两部分，一部分我称为你自己的应用自动安装，一部分我称为通用的应用不用安装。\r\n\r\n我们先来说第一部分，自己的应用自动安装。比如电商应用是你自己开发的，除了你自己，其他人是不知道怎么安装的，比如电商应用，安装的时候需要配置支付宝或者微信的账号，才能别人在你的电商上买东西的时候，付的钱是打到你的账户里面的，除了你，谁也不知道，所以安装的过程平台帮不了忙，但是能够帮你做的自动化，你需要做一些工作，将自己的配置信息融入到自动化的安装过程中方可。比如上面的例子，双十一新创建出来的90台机器是空的，如果能够提供一个工具，能够自动在这新的90台机器上将电商应用安装好，就能够实现应用层面的真正弹性。例如Puppet, Chef, Ansible, Cloud Foundary都可以干这件事情，最新的容器技术Docker能更好的干这件事情，不做技术的可以不用管这些词。\r\n\r\n第二部分，通用的应用不用安装。所谓通用的应用，一般指一些复杂性比较高，但是大家都在用的，例如数据库。几乎所有的应用都会用数据库，但是数据库软件是标准的，虽然安装和维护比较复杂，但是无论谁安装都是一样。这样的应用可以变成标准的PaaS层的应用放在云平台的界面上。当用户需要一个数据库的时候，一点就出来了，用户就可以直接用了。有人问，既然谁安装都一个样，那我自己来好了，不需要花钱在云平台上买。当然不是，数据库是一个非常难的东西，光Oracle这家公司，靠数据库就能赚这么多钱。买Oracle也是要花很多很多钱的。然而大多数云平台会提供Mysql这样的开源数据库，又是开源，钱不需要花这么多了，但是维护这个数据库，却需要专门招一个很大的团队，如果这个数据库能够优化到能够支撑双十一，也不是一年两年能够搞定的。比如您是一个做单车的，当然没必要招一个非常大的数据库团队来干这件事情，成本太高了，应该交给云平台来做这件事情，专业的事情专业的人来自，云平台专门养了几百人维护这套系统，您只要专注于您的单车应用就可以了。\r\n\r\n要么是自动部署，要么是不用部署，总的来说就是应用层你也要少操心，这就是PaaS层的重要作用。\r\n\r\n640?wx_fmt=png\r\n\r\n虽说脚本的方式能够解决自己的应用的部署问题，然而不同的环境千差万别，一个脚本往往在一个环境上运行正确，到另一个环境就不正确了。\r\n\r\n而容器是能更好的解决这个问题的。\r\n\r\n640?wx_fmt=png\r\n\r\n容器是 Container，Container另一个意思是集装箱，其实容器的思想就是要变成软件交付的集装箱。集装箱的特点，一是封装，二是标准。\r\n\r\n640?wx_fmt=png\r\n\r\n在没有集装箱的时代，假设将货物从 A运到 B，中间要经过三个码头、换三次船。每次都要将货物卸下船来，摆的七零八落，然后搬上船重新整齐摆好。因此在没有集装箱的时候，每次换船，船员们都要在岸上待几天才能走。\r\n\r\n640?wx_fmt=png\r\n\r\n有了集装箱以后，所有的货物都打包在一起了，并且集装箱的尺寸全部一致，所以每次换船的时候，一个箱子整体搬过去就行了，小时级别就能完成，船员再也不用上岸长时间耽搁了。\r\n\r\n这是集装箱“封装”、“标准”两大特点在生活中的应用。\r\n\r\n640?wx_fmt=png\r\n\r\n那么容器如何对应用打包呢？还是要学习集装箱，首先要有个封闭的环境，将货物封装起来，让货物之间互不干扰，互相隔离，这样装货卸货才方便。好在 Ubuntu中的LXC技术早就能做到这一点。\r\n\r\n封闭的环境主要使用了两种技术，一种是看起来是隔离的技术，称为 Namespace，也即每个 Namespace中的应用看到的是不同的 IP地址、用户空间、程号等。另一种是用起来是隔离的技术，称为 Cgroups，也即明明整台机器有很多的 CPU、内存，而一个应用只能用其中的一部分。\r\n\r\n所谓的镜像，就是将你焊好集装箱的那一刻，将集装箱的状态保存下来，就像孙悟空说：“定”，集装箱里面就定在了那一刻，然后将这一刻的状态保存成一系列文件。这些文件的格式是标准的，谁看到这些文件都能还原当时定住的那个时刻。将镜像还原成运行时的过程（就是读取镜像文件，还原那个时刻的过程）就是容器运行的过程。\r\n\r\n有了容器，使得 PaaS层对于用户自身应用的自动部署变得快速而优雅。\r\n\r\n三、大数据拥抱云计算\r\n\r\n在PaaS层中一个复杂的通用应用就是大数据平台。大数据是如何一步一步融入云计算的呢？\r\n\r\n3.1 数据不大也包含智慧\r\n\r\n一开始这个大数据并不大，你想象原来才有多少数据？现在大家都去看电子书，上网看新闻了，在我们80后小时候，信息量没有那么大，也就看看书，看看报，一个星期的报纸加起来才有多少字啊，如果你不在一个大城市，一个普通的学校的图书馆加起来也没几个书架，是后来随着信息化的到来，信息才会越来越多。\r\n\r\n首先我们来看一下大数据里面的数据，就分三种类型，一种叫结构化的数据，一种叫非结构化的数据，还有一种叫半结构化的数据。什么叫结构化的数据呢？叫有固定格式和有限长度的数据。例如填的表格就是结构化的数据，国籍：中华人民共和国，民族：汉，性别：男，这都叫结构化数据。现在越来越多的就是非结构化的数据，就是不定长，无固定格式的数据，例如网页，有时候非常长，有时候几句话就没了，例如语音，视频都是非结构化的数据。半结构化数据是一些xml或者html的格式的，不从事技术的可能不了解，但也没有关系。\r\n\r\n数据怎么样才能对人有用呢？其实数据本身不是有用的，必须要经过一定的处理。例如你每天跑步带个手环收集的也是数据，网上这么多网页也是数据，我们称为Data，数据本身没有什么用处，但是数据里面包含一个很重要的东西，叫做信息Information，数据十分杂乱，经过梳理和清洗，才能够称为信息。信息会包含很多规律，我们需要从信息中将规律总结出来，称为知识knowledge，知识改变命运。信息是很多的，但是有人看到了信息相当于白看，但是有人就从信息中看到了电商的未来，有人看到了直播的未来，所以人家就牛了，你如果没有从信息中提取出知识，天天看朋友圈，也只能在互联网滚滚大潮中做个看客。有了知识，然后利用这些知识去应用于实战，有的人会做得非常好，这个东西叫做智慧intelligence。有知识并不一定有智慧，例如好多学者很有知识，已经发生的事情可以从各个角度分析的头头是道，但一到实干就歇菜，并不能转化成为智慧。而很多的创业家之所以伟大，就是通过获得的知识应用于实践，最后做了很大的生意。\r\n\r\n所以数据的应用分这四个步骤：数据，信息，知识，智慧。这是很多商家都想要的，你看我收集了这么多的数据，能不能基于这些数据来帮我做下一步的决策，改善我的产品，例如让用户看视频的时候旁边弹出广告，正好是他想买的东西，再如让用户听音乐的时候，另外推荐一些他非常想听的其他音乐。用户在我的应用或者网站上随便点点鼠标，输入文字对我来说都是数据，我就是要将其中某些东西提取出来，指导实践，形成智慧，让用户陷入到我的应用里面不可自拔，上了我的网就不想离开，手不停的点，不停的买，很多人说双十一我都想断网了，我老婆在上面不断的买买买，买了A又推荐B，老婆大人说，“哎呀，B也是我喜欢的啊，老公我要买”。你说这个程序怎么这么牛，这么有智慧，比我还了解我老婆，这件事情是怎么做到的呢？\r\n\r\n640?wx_fmt=png\r\n\r\n3.2 数据如何升华为智慧\r\n\r\n数据的处理分几个步骤，完成了才最后会有智慧。\r\n\r\n第一个步骤叫数据的收集。首先得有数据，数据的收集有两个方式，第一个方式是拿，专业点的说法叫抓取或者爬取，例如搜索引擎就是这么做的，它把网上的所有的信息都下载到它的数据中心，然后你一搜才能搜出来。比如你去搜索的时候，结果会是一个列表，这个列表为什么会在搜索引擎的公司里面呢，就是因为他把这个数据啊都拿下来了，但是你一点链接，点出来这个网站就不在搜索引擎它们公司了。比如说新浪有个新闻，你拿百度搜出来，你不点的时候，那一页在百度数据中心，一点出来的网页就是在新浪的数据中心了。另外一个方式就是推送，有很多终端可以帮我收集数据，比如说小米手环，可以将你每天跑步的数据，心跳的数据，睡眠的数据都上传到数据中心里面。\r\n\r\n第二个步骤是数据的传输。一般会通过队列方式进行，因为数据量实在是太大了，数据必须经过处理才会有用，可是系统处理不过来，只好排好队，慢慢的处理。\r\n\r\n第三个步骤是数据的存储。现在数据就是金钱，掌握了数据就相当于掌握了钱。要不然网站怎么知道你想买什么呢？就是因为它有你历史的交易的数据，这个信息可不能给别人，十分宝贵，所以需要存储下来。\r\n\r\n第四个步骤是数据的处理和分析。上面存储的数据是原始数据，原始数据多是杂乱无章的，有很多垃圾数据在里面，因而需要清洗和过滤，得到一些高质量的数据。对于高质量的数据，就可以进行分析，从而对数据进行分类，或者发现数据之间的相互关系，得到知识。比如盛传的沃尔玛超市的啤酒和尿布的故事，就是通过对人们的购买数据进行分析，发现了男人一般买尿布的时候，会同时购买啤酒，这样就发现了啤酒和尿布之间的相互关系，获得知识，然后应用到实践中，将啤酒和尿布的柜台弄的很近，就获得了智慧。\r\n\r\n第五个步骤就是对于数据的检索和挖掘。检索就是搜索，所谓外事不决问google，内事不决问百度。内外两大搜索引擎都是讲分析后的数据放入搜索引擎，从而人们想寻找信息的时候，一搜就有了。另外就是挖掘，仅仅搜索出来已经不能满足人们的要求了，还需要从信息中挖掘出相互的关系。比如财经搜索，当搜索某个公司股票的时候，该公司的高管是不是也应该被挖掘出来呢？如果仅仅搜索出这个公司的股票发现涨的特别好，于是你就去买了，其实其高管发了一个声明，对股票十分不利，第二天就跌了，这不坑害广大股民么？所以通过各种算法挖掘数据中的关系，形成知识库，十分重要。\r\n\r\n640?wx_fmt=png\r\n\r\n640?wx_fmt=png\r\n\r\n3.3 大数据时代，众人拾柴火焰高\r\n\r\n当数据量很小的时候，很少的几台机器就能解决。慢慢的当数据量越来越大，最牛的服务器都解决不了问题的时候，就想怎么办呢？要聚合多台机器的力量，大家齐心协力一起把这个事搞定，众人拾柴火焰高。\r\n\r\n对于数据的收集，对于IoT来讲，外面部署这成千上万的检测设备，将大量的温度，适度，监控，电力等等数据统统收集上来，对于互联网网页的搜索引擎来讲，需要将整个互联网所有的网页都下载下来，这显然一台机器做不到，需要多台机器组成网络爬虫系统，每台机器下载一部分，同时工作，才能在有限的时间内，将海量的网页下载完毕。\r\n\r\n640?wx_fmt=png\r\n\r\n对于数据的传输，一个内存里面的队列肯定会被大量的数据挤爆掉，于是就产生了基于硬盘的分布式队列，这样队列可以多台机器同时传输，随你数据量多大，只要我的队列足够多，管道足够粗，就能够撑得住。\r\n\r\n640?wx_fmt=png\r\n\r\n对于数据的存储，一台机器的文件系统肯定是放不下了，所以需要一个很大的分布式文件系统来做这件事情，把多台机器的硬盘打成一块大的文件系统。\r\n\r\n640?wx_fmt=png\r\n\r\n再如数据的分析，可能需要对大量的数据做分解，统计，汇总，一台机器肯定搞不定，处理到猴年马月也分析不完，于是就有分布式计算的方法，将大量的数据分成小份，每台机器处理一小份，多台机器并行处理，很快就能算完。例如著名的Terasort对1个TB的数据排序，相当于1024G，如果单机处理，怎么也要几个小时，但是并行处理209秒就完成了。\r\n\r\n640?wx_fmt=png\r\n\r\n640?wx_fmt=png\r\n\r\n640?wx_fmt=png\r\n\r\n所以说大数据平台，什么叫做大数据，说白了就是一台机器干不完，大家一起干。随着数据量越来越大，很多不大的公司都需要处理相当多的数据，这些小公司没有这么多机器可怎么办呢？\r\n\r\n3.4 大数据需要云计算，云计算需要大数据\r\n\r\n说到这里，大家想起云计算了吧。当想要干这些活的时候，需要好多好多的机器一块做，真的是想什么时候要，想要多少就要多少。例如大数据分析公司的财务情况，可能一周分析一次，如果要把这一百台机器或者一千台机器都在那放着，一周用一次对吧，非常浪费。那能不能需要计算的时候，把这一千台机器拿出来，然后不算的时候，这一千台机器可以去干别的事情。谁能做这个事儿呢？只有云计算，可以为大数据的运算提供资源层的灵活性。而云计算也会部署大数据放到它的PaaS平台上，作为一个非常非常重要的通用应用。因为大数据平台能够使得多台机器一起干一个事儿，这个东西不是一般人能开发出来的，也不是一般人玩得转的，怎么也得雇个几十上百号人才能把这个玩起来，所以说就像数据库一样，其实还是需要有一帮专业的人来玩这个东西。现在公有云上基本上都会有大数据的解决方案了，一个小公司我需要大数据平台的时候，不需要采购一千台机器，只要到公有云上一点，这一千台机器都出来了，并且上面已经部署好了的大数据平台，只要把数据放进去算就可以了。\r\n\r\n云计算需要大数据，大数据需要云计算，两个人就这样结合了。\r\n\r\n四、人工智能拥抱大数据\r\n\r\n4.1 机器什么时候才能懂人心\r\n\r\n虽说有了大数据，人的欲望总是这个不能够满足。虽说在大数据平台里面有搜索引擎这个东西，想要什么东西我一搜就出来了。但是也存在这样的情况，我想要的东西不会搜，表达不出来，搜索出来的又不是我想要的。例如音乐软件里面推荐一首歌，这首歌我没听过，当然不知道名字，也没法搜，但是软件推荐给我，我的确喜欢，这就是搜索做不到的事情。当人们使用这种应用的时候，会发现机器知道我想要什么，而不是说当我想要的时候，去机器里面搜索。这个机器真像我的朋友一样懂我，这就有点人工智能的意思了。\r\n\r\n人们很早就在想这个事情了。最早的时候，人们想象，如果要是有一堵墙，墙后面是个机器，我给它说话，它就给我回应，我如果感觉不出它那边是人还是机器，那它就真的是一个人工智能的东西了。\r\n\r\n4.2 让机器学会推理\r\n\r\n怎么才能做到这一点呢？人们就想：我首先要告诉计算机人类的推理的能力。你看人重要的是什么呀，人和动物的区别在什么呀，就是能推理。我要是把我这个推理的能力啊告诉机器，机器就能根据你的提问，推理出相应的回答，真能这样多好。推理其实人们慢慢的让机器能够做到一些了，例如证明数学公式。这是一个非常让人惊喜的一个过程，机器竟然能够证明数学公式。但是慢慢发现其实这个结果，也没有那么令人惊喜，因为大家发现了一个问题，数学公式非常严谨，推理过程也非常严谨，而且数学公式很容易拿机器来进行表达，程序也相对容易表达。然而人类的语言就没这么简单了，比如今天晚上，你和你女朋友约会，你女朋友说：如果你早来，我没来，你等着，如果我早来，你没来，你等着。这个机器就比比较难理解了，但是人都懂，所以你和女朋友约会，你是不敢迟到的。\r\n\r\n4.3 教给机器知识\r\n\r\n所以仅仅告诉机器严格的推理是不够的，还要告诉机器一些知识。但是知识这个事儿，一般人可能就做不来了，可能专家可以，比如语言领域的专家，或者财经领域的专家。语言领域和财经领域知识能不能表示成像数学公式一样稍微严格点呢？例如语言专家可能会总结出主谓宾定状补这些语法规则，主语后面一定是谓语，谓语后面一定是宾语，将这些总结出来，并严格表达出来不久行了吗？后来发现这个不行，太难总结了，语言表达千变万化。就拿主谓宾的例子，很多时候在口语里面就省略了谓语，别人问：你谁啊？我回答：我刘超。但是你不能规定在语音语义识别的时候，要求对着机器说标准的书面语，这样还是不够智能，就像罗永浩在一次演讲中说的那样，每次对着手机，用书面语说：请帮我呼叫某某某，这是一件很尴尬的事情。\r\n\r\n人工智能这个阶段叫做专家系统。专家系统不易成功，一方面是知识比较难总结，另一方面总结出来的知识难以教给计算机。因为你自己还迷迷糊糊，似乎觉得有规律，就是说不出来，就怎么能够通过编程教给计算机呢？\r\n\r\n4.4 算了，教不会你自己学吧\r\n\r\n于是人们想到，看来机器是和人完全不一样的物种，干脆让机器自己学习好了。机器怎么学习呢？既然机器的统计能力这么强，基于统计学习，一定能从大量的数字中发现一定的规律。\r\n\r\n其实在娱乐圈有很好的一个例子，可见一斑\r\n\r\n有一位网友统计了知名歌手在大陆发行的 9 张专辑中 117 首歌曲的歌词，同一词语在一首歌出现只算一次，形容词、名词和动词的前十名如下表所示（词语后面的数字是出现的次数）：\r\n\r\na	形容词	b	名词	c	动词\r\n0	孤独:34	0	生命:50	0	爱:54\r\n1	自由:17	1	路:37	1	碎:37\r\n2	迷惘:16	2	夜:29	2	哭:35\r\n3	坚强:13	3	天空:24	3	死:27\r\n4	绝望:8	4	孩子:23	4	飞:26\r\n5	青春:7	5	雨:21	5	梦想:14\r\n6	迷茫:6	6	石头:9	6	祈祷:10\r\n7	光明:6	7	鸟:9	7	离去:10\r\n如果我们随便写一串数字，然后按照数位依次在形容词、名词和动词中取出一个词，连在一起会怎么样呢？\r\n\r\n例如取圆周率 3.1415926，对应的词语是：坚强，路，飞，自由，雨，埋，迷惘。稍微连接和润色一下：\r\n\r\n坚强的孩子，\r\n\r\n依然前行在路上，\r\n\r\n张开翅膀飞向自由，\r\n\r\n让雨水埋葬他的迷惘。\r\n\r\n是不是有点感觉了？当然真正基于统计的学习算法比这个简单的统计复杂的多。\r\n\r\n然而统计学习比较容易理解简单的相关性，例如一个词和另一个词总是一起出现，两个词应该有关系，而无法表达复杂的相关性，并且统计方法的公式往往非常复杂，为了简化计算，常常做出各种独立性的假设，来降低公式的计算难度，然而现实生活中，具有独立性的事件是相对较少的。\r\n\r\n4.5 模拟大脑的工作方式\r\n\r\n于是人类开始从机器的世界，反思人类的世界是怎么工作的。\r\n\r\n640?wx_fmt=png\r\n\r\n人类的脑子里面不是存储着大量的规则，也不是记录着大量的统计数据，而是通过神经元的触发实现的，每个神经元有从其他神经元的输入，当接收到输入的时候，会产生一个输出来刺激其他的神经元，于是大量的神经元相互反应，最终形成各种输出的结果。例如当人们看到美女瞳孔放大，绝不是大脑根据身材比例进行规则判断，也不是将人生中看过的所有的美女都统计一遍，而是神经元从视网膜触发到大脑再回到瞳孔。在这个过程中，其实很难总结出每个神经元对最终的结果起到了哪些作用，反正就是起作用了。\r\n\r\n于是人们开始用一个数学单元模拟神经元\r\n\r\n这个神经元有输入，有输出，输入和输出之间通过一个公式来表示，输入根据重要程度不同(权重)，影响着输出。\r\n\r\n640?wx_fmt=png\r\n\r\n于是将n个神经元通过像一张神经网络一样连接在一起，n这个数字可以很大很大，所有的神经元可以分成很多列，每一列很多个排列起来，每个神经元的对于输入的权重可以都不相同，从而每个神经元的公式也不相同。当人们从这张网络中输入一个东西的时候，希望输出一个对人类来讲正确的结果。例如上面的例子，输入一个写着2的图片，输出的列表里面第二个数字最大，其实从机器来讲，它既不知道输入的这个图片写的是2，也不知道输出的这一系列数字的意义，没关系，人知道意义就可以了。正如对于神经元来说，他们既不知道视网膜看到的是美女，也不知道瞳孔放大是为了看的清楚，反正看到美女，瞳孔放大了，就可以了。\r\n\r\n对于任何一张神经网络，谁也不敢保证输入是2，输出一定是第二个数字最大，要保证这个结果，需要训练和学习。毕竟看到美女而瞳孔放大也是人类很多年进化的结果。学习的过程就是，输入大量的图片，如果结果不是想要的结果，则进行调整。如何调整呢，就是每个神经元的每个权重都向目标进行微调，由于神经元和权重实在是太多了，所以整张网络产生的结果很难表现出非此即彼的结果，而是向着结果微微的进步，最终能够达到目标结果。当然这些调整的策略还是非常有技巧的，需要算法的高手来仔细的调整。正如人类见到美女，瞳孔一开始没有放大到能看清楚，于是美女跟别人跑了，下次学习的结果是瞳孔放大一点点，而不是放大鼻孔。\r\n\r\n4.6 没道理但做得到\r\n\r\n听起来也没有那么有道理，但是的确能做到，就是这么任性。\r\n\r\n神经网络的普遍性定理是这样说的，假设某个人给你某种复杂奇特的函数，f(x)：\r\n\r\n640?wx_fmt=png\r\n\r\n不管这个函数是什么样的，总会确保有个神经网络能够对任何可能的输入x，其值f(x)（或者某个能够准确的近似）是神经网络的输出。\r\n\r\n如果在函数代表着规律，也意味着这个规律无论多么奇妙，多么不能理解，都是能通过大量的神经元，通过大量权重的调整，表示出来的。\r\n\r\n4.7 人工智能的经济学解释\r\n\r\n这让我想到了经济学，于是比较容易理解了。\r\n\r\n640?wx_fmt=png\r\n\r\n我们把每个神经元当成社会中从事经济活动的个体。于是神经网络相当于整个经济社会，每个神经元对于社会的输入，都有权重的调整，做出相应的输出，比如工资涨了，菜价也涨了，股票跌了，我应该怎么办，怎么花自己的钱。这里面没有规律么？肯定有，但是具体什么规律呢？却很难说清楚。\r\n\r\n基于专家系统的经济属于计划经济，整个经济规律的表示不希望通过每个经济个体的独立决策表现出来，而是希望通过专家的高屋建瓴和远见卓识总结出来。专家永远不可能知道哪个城市的哪个街道缺少一个卖甜豆腐脑的。于是专家说应该产多少钢铁，产多少馒头，往往距离人民生活的真正需求有较大的差距，就算整个计划书写个几百页，也无法表达隐藏在人民生活中的小规律。\r\n\r\n基于统计的宏观调控就靠谱的多了，每年统计局都会统计整个社会的就业率，通胀率，GDP等等指标，这些指标往往代表着很多的内在规律，虽然不能够精确表达，但是相对靠谱。然而基于统计的规律总结表达相对比较粗糙，比如经济学家看到这些统计数据可以总结出长期来看房价是涨还是跌，股票长期来看是涨还是跌，如果经济总体上扬，房价和股票应该都是涨的。但是基于统计数据，无法总结出股票，物价的微小波动规律。\r\n\r\n基于神经网络的微观经济学才是对整个经济规律最最准确的表达，每个人对于从社会中的输入，进行各自的调整，并且调整同样会作为输入反馈到社会中。想象一下股市行情细微的波动曲线，正是每个独立的个体各自不断交易的结果，没有统一的规律可循。而每个人根据整个社会的输入进行独立决策，当某些因素经过多次训练，也会形成宏观上的统计性的规律，这也就是宏观经济学所能看到的。例如每次货币大量发行，最后房价都会上涨，多次训练后，人们也就都学会了。\r\n\r\n4.8 人工智能需要大数据\r\n\r\n然而神经网络包含这么多的节点，每个节点包含非常多的参数，整个参数量实在是太大了，需要的计算量实在太大，但是没有关系啊，我们有大数据平台，可以汇聚多台机器的力量一起来计算，才能在有限的时间内得到想要的结果。\r\n\r\n人工智能可以做的事情非常多，例如可以鉴别垃圾邮件，鉴别黄色暴力文字和图片等。这也是经历了三个阶段的。第一个阶段依赖于关键词黑白名单和过滤技术，包含哪些词就是黄色或者暴力的文字。随着这个网络语言越来越多，词也不断的变化，不断的更新这个词库就有点顾不过来。第二个阶段时，基于一些新的算法，比如说贝叶斯过滤等，你不用管贝叶斯算法是什么，但是这个名字你应该听过，这个一个基于概率的算法。第三个阶段就是基于大数据和人工智能，进行更加精准的用户画像和文本理解和图像理解。\r\n\r\n由于人工智能算法多是依赖于大量的数据的，这些数据往往需要面向某个特定的领域(例如电商，邮箱)进行长期的积累，如果没有数据，就算有人工智能算法也白搭，所以人工智能程序很少像前面的IaaS和PaaS一样，将人工智能程序给某个客户安装一套让客户去用，因为给某个客户单独安装一套，客户没有相关的数据做训练，结果往往是很差的。但是云计算厂商往往是积累了大量数据的，于是就在云计算厂商里面安装一套，暴露一个服务接口，比如您想鉴别一个文本是不是涉及黄色和暴力，直接用这个在线服务就可以了。这种形势的服务，在云计算里面称为软件即服务，SaaS (Software AS A Service)\r\n\r\n于是工智能程序作为SaaS平台进入了云计算。\r\n\r\n五、云计算，大数据，人工智能过上了美好的生活\r\n\r\n终于云计算的三兄弟凑齐了，分别是IaaS，PaaS和SaaS，所以一般在一个云计算平台上，云，大数据，人工智能都能找得到。对一个大数据公司，积累了大量的数据，也会使用一些人工智能的算法提供一些服务。对于一个人工智能公司，也不可能没有大数据平台支撑。所以云计算，大数据，人工智能就这样整合起来，完成了相遇，相识，相知。\r\n\r\n\r\n\r\n【关于作者】\r\n\r\n\r\n\r\n 刘超：《Lucene应用开发揭秘》的作者。个人公众号：刘超的通俗云计算 (id：popsuper1982)。', '0', '7', '1', '12', 'a');
INSERT INTO `blog_article` VALUES ('16', '2019-03-16 10:28:08.874869', '2019-03-16 10:28:08.879373', 'Django中的ContentType模型', '### Django中的ContentType模型\r\n\r\n文档地址：https://docs.djangoproject.com/en/2.1/ref/contrib/contenttypes/\r\n\r\n\r\n\r\n参考文章：\r\n\r\nhttps://www.cnblogs.com/lddhbu/archive/2012/07/18/2597755.html\r\n\r\nhttps://www.cnblogs.com/c491873412/p/7892585.html\r\n\r\ndjango中对contenttype的应用\r\n\r\n首先在instaled_apps中可以看到 `\'django.contrib.contenttypes\',`\r\n\r\n数据库表中也有`django_content_type`这张表，表结构数据大致如下，存储着app_label和model的关系\r\n\r\n| id   | app_label | model   |\r\n| ---- | --------- | ------- |\r\n| 1    | blog      | article |\r\n| 2    | blog      | movie   |\r\n| 3    | blog      | comment |\r\n\r\n\r\n\r\n下面代码使用场景：\r\n\r\n有 文章，电影等模型类， 有一个 评论类，给文章 or 电影 or 其他以后出现的（音乐、游戏）的评论\r\n\r\n当评论表，要增加列比如 文章、电影表的外键字段 article_id，movie_id建立外键关系时，就可以使用\r\n\r\n```python\r\nfrom django.db import models\r\nfrom django.contrib.contenttypes.models import ContentType\r\nfrom django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation\r\n\r\nclass Movie(models.Model):\r\n   title = models.CharField(max_length=100)\r\n   comment = GenericRelation(\'Comment\')  # GenericRelation不会生成额外的列\r\n\r\nclass Article(models.Model):\r\n   title = models.CharField(max_length=100)\r\n   comment = GenericRelation(\'Comment\')\r\n\r\nclass Comment(models.Model):\r\n   content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)  # 外键\r\n   object_id = models.IntegerField()  # 对应的那个对象的id\r\n   content_object = GenericForeignKey()  # 对应的那个对象，不会生成额外的列\r\n   title = models.CharField(max_length=100)\r\n```\r\n\r\n先看Comment。Comment中使用 `GenericForeignKey()` 来指向其它的Model实例。为了使用它，你还需要在Model中定义  `content_type` 和 `object_id` 才可以。其中content_type是指向`ContentType`这个Model。\r\n\r\n在Django中，你如何定位一条记录？一般需要三个值：`app_label` ,  `model` 和  `object_id`。\r\n\r\n在`django_content_type`表中就是保存了`app_label`和`model`的关系。因此使用`GenericForeignKey`你就只要两个值了。但`content_object`本身还是要定义一下的，不会生成`content_object`c这个列。默认情况下是GenericForeignKey(\"content_type\",\"object_id\")，你也可以自定义那些字段的名称，但是还是默认最好，\r\n\r\n结果还是三项。使用其实还是挺简单的。看文档就ok。\r\n\r\n\r\n\r\n创建上面的模型后，进入django shell进行操作，体验一下。\r\n\r\n```shell\r\npython manage.py makemigrations\r\npython manage.py migrate\r\npython manage.py shell\r\n\r\n>>> from content.models import *\r\n>>> article = Article(title=\'i am a article\')\r\n>>> article.save()\r\n>>> article.id  # 在文章表内的的文章id\r\n6\r\n>>>\r\n>>> movie = Movie(title=\'i am a movie\')  # movie同样可以和执行和article相同的操作\r\n>>> movie.save()\r\n>>>\r\n>>> article_comment = Comment()\r\n>>> article_comment.content_object = article  # 这里只需指定 content_object\r\n>>> article_comment.title = \'this article is really nice\'\r\n>>> article_comment.save()\r\n\r\n>>> article_comment.title\r\n>>> \'this article is really nice\'\r\n>>> article_comment.content_type\r\n>>> <ContentType: article>\r\n>>> article_comment.content_object\r\n>>> <Article: Article object (6)>\r\n>>> article_comment.object_id  # \r\n>>> 6\r\n\r\n>>> article.comment.all()  # 可以根据GenericRelation这样取得所有的comments\r\n<QuerySet [<Comment: Comment object (6)>]>\r\n```', '0', '2', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('17', '2018-12-02 16:41:35.000000', '2019-03-16 10:41:35.124580', '调用django的ORM', '#### 调用django的ORM\r\n\r\n一吧可以直接 python manage shell 进入django环境进行调试\r\n\r\n\r\n\r\n单纯记录一下\r\n\r\n```\r\nimport sys\r\nimport os\r\nimport pymongo\r\n\r\nclient = pymongo.MongoClient(\'localhost\')\r\ndb = client[\'suning\']\r\ngoods = db[\'goods\'].find()\r\n```\r\n\r\n​	\r\n\r\n```\r\npwd = os.path.dirname(os.path.realpath(__file__))\r\nsys.path.append(pwd+\"../\")\r\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"binshop.settings\")\r\n\r\nimport django\r\ndjango.setup()\r\n\r\nfrom goods.models import Goods, GoodsCategory, GoodsImage\r\n```\r\n\r\n​	\r\n\r\n```\r\nfor goods_detail in goods:\r\n    goods = Goods()\r\n    goods.name = goods_detail[\"good_name\"].replace(\'苏宁超市自营\', \'\').strip()\r\n    goods.market_price = float(goods_detail[\'good_price\'].replace(\'¥\',\'\').replace(\'起\', \'\'))\r\n    goods.shop_price = goods.market_price * 0.91\r\n    goods.goods_front_image = \'goods/images/\' + goods.name.replace(\':\',\'比\').replace(\'/\', \' \').replace(\'（\', \'\').replace(\'）\', \'\').replace(\'*\', \'X\').replace(\'|\', \' \').strip() + \'.jpg\'\r\n\r\n    category_name = \'奶粉\'  # 只取最后一个，最细的类别\r\n    # get的话，没有获取到是会抛异常的，filter获取不到会返回一个空数组\r\n    category = GoodsCategory.objects.filter(name=category_name)\r\n    if category:\r\n        goods.category = category[0]\r\n    goods.save()\r\n    print(goods.name + \'添加成功\')\r\n\r\n    goods_image_instance = GoodsImage()\r\n    goods_image_instance.image = goods.goods_front_image\r\n    goods_image_instance.goods = goods\r\n    goods_image_instance.save()\r\n```', '0', '1', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('18', '2018-12-13 10:44:24.000000', '2019-03-16 10:44:24.496324', 'django重载认证', '记录一下\r\n\r\n```\r\nclass CustomBackend(ModelBackend):\r\n    \"\"\"\r\n        settings里配置AUTHENTICATION_BACKENDS\r\n        这里将email和username和nickname都当作username进行Q并起来\r\n    \"\"\"\r\ndef authenticate(self, request, username=None, password=None, **kwargs):\r\n    try:\r\n        user = UserProfile.objects.get(Q(username=username) | Q(nickname=username) | Q(email=username))\r\n        if user.check_password(password):\r\n            return user\r\n    except Exception as e:\r\n        return None\r\n```\r\n\r\n\r\n\r\nsettings里\r\nAUTHENTICATION_BACKENDS = (\r\n    \'users.views.CustomBackend\',\r\n)', '0', '9', '1', '2', 'a');
INSERT INTO `blog_article` VALUES ('20', '2016-08-15 17:15:21.451521', '2019-03-16 13:03:29.879547', '从win移植博客系统(tp搭建)到linux', '<p><span style=\"font-size: 16px;line-height: 27px\"></span></p><p>博客网站建立初,我是建立在腾讯云学生优惠服务器内的,学生实名认证后一块钱一个月</p><p>头开始是选用的window server 2012 (没记错的话) 这个系统, 最先开始配置环境的时候,折腾了很久很久, &nbsp;一开始是使用的 整合包 , 然后发现问题很多 , 于是又改回 手动自己手动配置 apache php mysql &nbsp;由于是低端服务器, 环境也比不上自己的 实体笔记本,性能也远远不如笔记本快, 当时配的不要不要的, 时长卡机..最先开始也是自己拿来玩</p><p>后面写了这个博客系统, &nbsp;前台后台也都是我自己一个人写的 , 框架方面用的是 tp 和 bootdrap完成后, 把博客网站挂在了 腾讯云上 想试试,结果发现速度巨慢, 还时常进不去网址, ping是能ping通, 也百度了, 也研究了, 还是解决不了</p><p>后面头一热, 直接重装了 linux centos6.7 &nbsp;因为之前刚学完linux &nbsp;实体机上的虚拟机也是 使用的centos67同时对 服务器感到失望, 所以便舍弃了一切 &nbsp;重装上了linux</p><p><strong>linux上配置环境很简单, 直接yum</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">yum install -y httpd php php-fpm mysql mysql-server php-mysql</p><p><strong>然后启动服务</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">service httpd start &nbsp;service mysqld start &nbsp;service php-fpm start</p><p><strong>服务启动成功检查下服务的运行</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">netstat -tunlp</p><p>这样我们可以看到httpd(也就是apache服务)监听80端口，mysql监听3306端口，php-fpm监听9000端口，并且都已经正常启动</p><p>这时，我们的环境已经基本搭建好了，大家已经可以在浏览器中访问服务器的公网ip，可以看到apache的测试页面，就说明你已经成功了。为了保险起见，也建议大家进入到apache的web根目录：</p><p><strong>/var/www/html 中自己写一个最简单的php页面.</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">cd /var/www/html &nbsp;vi phpinfo.php &nbsp;&lt;?php &nbsp;&nbsp;phpinfo(); &nbsp;?&gt;</p><p>外网访问 ip/phpinfo.php &nbsp;显示phpinfo 成功即可</p><p><strong>我们要为mysql设置相应的用户去访问管理，之前我们已经启动了mysqld服务，因此此时我们需要给mysql设定一个初始的root密码，可以让root用户去访问数据库</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">mysqladmin -u root password “XXXXXXXX”</p><p>这样我们就设置好了mysql的密码，可以输入 mysql -u root -p ，然后再输入刚刚设定好的密码，就可以进入到数据库中</p><p>然后移植博客系统, 进行简单的权限设置 &nbsp;网站运行了</p><p>发现速度比window不知道提高了多少, 以前win是时常当机, linux不会, 网站运行速度也很快带宽没变的, 感觉linux上做服务器, 是真的比window好</p><p>然后我使用window系列也有10多年了 &nbsp;实体机也是win8 &nbsp;环境也配的好辛苦, 所以实际上还是使用的window对linux的学习, 只能放在 腾讯云服务器 和 虚拟机上了</p><p>good day . thanks for</p><p><span style=\"font-size: 16px;line-height: 27px\"></span></p><p>博客网站建立初,我是建立在腾讯云学生优惠服务器内的,学生实名认证后一块钱一个月</p><p>头开始是选用的window server 2012 (没记错的话) 这个系统, 最先开始配置环境的时候,折腾了很久很久, &nbsp;一开始是使用的 整合包 , 然后发现问题很多 , 于是又改回 手动自己手动配置 apache php mysql &nbsp;由于是低端服务器, 环境也比不上自己的 实体笔记本,性能也远远不如笔记本快, 当时配的不要不要的, 时长卡机..最先开始也是自己拿来玩</p><p>后面写了这个博客系统, &nbsp;前台后台也都是我自己一个人写的 , 框架方面用的是 tp 和 bootdrap完成后, 把博客网站挂在了 腾讯云上 想试试,结果发现速度巨慢, 还时常进不去网址, ping是能ping通, 也百度了, 也研究了, 还是解决不了</p><p>后面头一热, 直接重装了 linux centos6.7 &nbsp;因为之前刚学完linux &nbsp;实体机上的虚拟机也是 使用的centos67同时对 服务器感到失望, 所以便舍弃了一切 &nbsp;重装上了linux</p><p><strong>linux上配置环境很简单, 直接yum</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">yum install -y httpd php php-fpm mysql mysql-server php-mysql</p><p><strong>然后启动服务</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">service httpd start &nbsp;service mysqld start &nbsp;service php-fpm start</p><p><strong>服务启动成功检查下服务的运行</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">netstat -tunlp</p><p>这样我们可以看到httpd(也就是apache服务)监听80端口，mysql监听3306端口，php-fpm监听9000端口，并且都已经正常启动</p><p>这时，我们的环境已经基本搭建好了，大家已经可以在浏览器中访问服务器的公网ip，可以看到apache的测试页面，就说明你已经成功了。为了保险起见，也建议大家进入到apache的web根目录：</p><p><strong>/var/www/html 中自己写一个最简单的php页面.</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">cd /var/www/html &nbsp;vi phpinfo.php &nbsp;&lt;?php &nbsp;&nbsp;phpinfo(); &nbsp;?&gt;</p><p>外网访问 ip/phpinfo.php &nbsp;显示phpinfo 成功即可</p><p><strong>我们要为mysql设置相应的用户去访问管理，之前我们已经启动了mysqld服务，因此此时我们需要给mysql设定一个初始的root密码，可以让root用户去访问数据库</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">mysqladmin -u root password “XXXXXXXX”</p><p>这样我们就设置好了mysql的密码，可以输入 mysql -u root -p ，然后再输入刚刚设定好的密码，就可以进入到数据库中</p><p>然后移植博客系统, 进行简单的权限设置 &nbsp;网站运行了</p><p>发现速度比window不知道提高了多少, 以前win是时常当机, linux不会, 网站运行速度也很快带宽没变的, 感觉linux上做服务器, 是真的比window好</p><p>然后我使用window系列也有10多年了 &nbsp;实体机也是win8 &nbsp;环境也配的好辛苦, 所以实际上还是使用的window对linux的学习, 只能放在 腾讯云服务器 和 虚拟机上了</p><p>good day . thanks for look</p><p><br/> </p><p><br/> </p>', '0', '3', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('21', '2016-11-11 22:51:12.324122', '2019-03-16 13:04:39.578769', 'Centos7.2下安装php开发环境', '<p>系统 centos7.2 下安装 php开发环境&nbsp; by 飞翔的渣神丶 2016年11月8日<br/>apache2.4.6<br/>php5.6.27<br/>mariadb&nbsp; (mysql的一个分支)<br/> <br/>0. 设置源<br/>&nbsp;&nbsp; &nbsp;rpm -Uvh https://dl.Fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm<br/>&nbsp;&nbsp; &nbsp;rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm<br/>1. yum 一键安装环境<br/>&nbsp;&nbsp; &nbsp;yum install httpd mariadb-server php56w php56w-mysql php56w-mcrypt php56w-dom php56w-mbstring</p><p>&nbsp;&nbsp;&nbsp;&nbsp;安装gd库<br/> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;yum install php56w-gd</p><p>2. 设置 apache和mysql 开机自启<br/>&nbsp;&nbsp; &nbsp;systemctl start httpd<br/>&nbsp;&nbsp; &nbsp;systemctl enable httpd<br/>&nbsp;&nbsp; &nbsp;*****************说明*********************<br/>&nbsp;&nbsp; &nbsp;mariadb是mysql的一个分支,由mysql创始人带队<br/>&nbsp;&nbsp; &nbsp;由于mysql闭源了,mariadb兼容mysql,且开源<br/>&nbsp;&nbsp; &nbsp;所以现在也开始使用mariadb,mysql转mariadb<br/>&nbsp;&nbsp; &nbsp;******************************************<br/>&nbsp;&nbsp; &nbsp;systemctl start mariadb(mysql)<br/>&nbsp;&nbsp; &nbsp;systemctl enable mariadb(mysqld)<br/>3. 设置mariadb密码<br/>&nbsp;&nbsp; &nbsp;mysql_secure_installation<br/>&nbsp;&nbsp; &nbsp;输入当前密码&nbsp; 默认为空<br/>&nbsp;&nbsp; &nbsp;设置密码 和 确认密码<br/>&nbsp;&nbsp; &nbsp;移除匿名用户 y<br/>&nbsp;&nbsp; &nbsp;禁止root远程登陆 n<br/>&nbsp;&nbsp; &nbsp;删除测试表并访问 n<br/>&nbsp;&nbsp; &nbsp;重新加载权限表 y<br/> <br/>编写测试文件:<br/>cd /var/www/html<br/>vi index.php<br/> <br/>&lt;?php <br/>&nbsp;&nbsp; &nbsp;phpinfo();<br/>?&gt;<br/> <br/> <br/> <br/>扩展1:<br/>&nbsp;&nbsp; &nbsp;修改php.ini文件<br/>&nbsp;&nbsp; &nbsp;cd /<br/>&nbsp;&nbsp; &nbsp;find -name php.ini<br/>&nbsp;&nbsp; &nbsp;cd 进入目录<br/>&nbsp;&nbsp; &nbsp;cp php.ini ./php.ini.bak<br/>&nbsp;&nbsp; &nbsp;vi php.ini<br/>&nbsp;&nbsp;&nbsp; 使用vi的 /string/ 搜索</p><p>&nbsp;&nbsp;&nbsp; 例如&nbsp; /display_errors/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;再按n 后翻一次&nbsp; 找到下面的代码 <br/> </p><p>&nbsp;&nbsp;&nbsp; display_errors = Off<br/>&nbsp;&nbsp; &nbsp;display_startup_errors = Off<br/>&nbsp;&nbsp; &nbsp;off修改为on 提示错误<br/> <br/> <br/> <br/>扩展2:<br/>&nbsp;&nbsp; &nbsp;设置 mariaDB数据库 允许 远程登陆 个人用的是navicat<br/> <br/>&nbsp;&nbsp; &nbsp;host 183.36.65.xxx is not allowed to connect to ... server<br/>&nbsp;&nbsp; &nbsp;本机IP: 183.36.65.xxx 广东省广州市 电信 <br/> <br/>&nbsp;&nbsp; &nbsp;给root允许在所有IP上远程登陆&nbsp; 有所有的权限<br/>&nbsp;&nbsp; &nbsp;mysql -uroot -p<br/>&nbsp;&nbsp; &nbsp;grant all privileges on *.* to root@&#39;%&#39; identified by &#39;自己的密码&#39;;<br/>&nbsp;&nbsp; &nbsp;flush privileges;<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp; &nbsp; all privileges&nbsp;&nbsp; 所有权限&nbsp; &nbsp;<br/>&nbsp;&nbsp; &nbsp; *.*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 数据库.表 &nbsp;<br/>&nbsp;&nbsp; &nbsp; root@&#39;%&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户@&#39;ip(%表示不限制)&#39; &nbsp;<br/>&nbsp;&nbsp; &nbsp; &#39;自己的密码&#39; 密码<br/> <br/>扩展3:<br/>&nbsp;&nbsp; &nbsp;安装laravel&nbsp; (建议看着文档进行安装)<br/> <br/>&nbsp;&nbsp; &nbsp;先安装 composer<br/>&nbsp;&nbsp; &nbsp;#下载composer安装文件并使用php执行，以便生成一个composer.phar包<br/>&nbsp;&nbsp; &nbsp;curl -sS https://getcomposer.org/installer | php<br/> <br/>&nbsp;&nbsp; &nbsp;# 将生成的composer包放到一个存放命令包的目录，以便系统的$PATH能够搜索到这个命令，这样就可以在命令行直接使用composer命令了。<br/>&nbsp;&nbsp; &nbsp;mv composer.phar /usr/local/bin/composer <br/> <br/>&nbsp;&nbsp; &nbsp;需要注意composer的执行权限<br/>&nbsp;&nbsp; &nbsp;chmod +x /usr/local/bin/composer<br/> <br/>&nbsp;&nbsp; &nbsp;终端上输入　composer&nbsp; 显示提示信息 安装成功<br/> <br/>&nbsp;&nbsp; &nbsp;设置全局配置:&nbsp; composer从中国镜像packagist<br/>&nbsp;&nbsp; &nbsp;composer config -g repo.packagist composer https://packagist.phpcomposer.com<br/> <br/>&nbsp;&nbsp; &nbsp;创建project:<br/>&nbsp;&nbsp; &nbsp;cd 指定项目目录<br/>&nbsp;&nbsp; &nbsp;composer create-project laravel/laravel --prefer-dist<br/>&nbsp;&nbsp; &nbsp;#composer create-project laravel/laravel blog --prefer-dist<br/> <br/>&nbsp;&nbsp; &nbsp;安装 Laravel 之后，可能需要你配置一下目录权限。<br/>&nbsp;&nbsp; &nbsp;web 服务器需要拥有 storage 目录下的所有目录和 bootstrap/cache 目录的写权限。<br/>&nbsp;&nbsp; &nbsp;同理 tp框架下的 runtime目录也需要读写权限<br/> <br/>&nbsp;&nbsp; &nbsp;之后 ip/laravel 后看到欢迎界面&nbsp; 安装成功<br/> <br/>&nbsp;&nbsp; &nbsp;laravel路由失效, 开启 apache的重写<br/>&nbsp;&nbsp; &nbsp;模块文件在 httpd中, 里面有多个配置文件<br/>&nbsp;&nbsp; &nbsp;修改httpd.conf&nbsp; 中的 AllowOverride All&nbsp; &nbsp; &nbsp;&nbsp; <br/> </p>', '0', '0', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('22', '2016-11-06 00:17:36.982101', '2019-03-16 13:04:51.631395', '第一次给人培训呢', '<h5>由来:<br/> </h5><p>&nbsp;&nbsp;&nbsp; 前几天,老虎跟我讲要给新媒体的人开一次培训,让我讲讲后端开发的东西.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当时想着, 因为我人比较奇怪, 其实在新媒体这个部门里面 , 并没有多大的存在感, 我是想着借着这次培训, 让他们认识认识我, 也能装逼, 也能顺便锻炼下自己</p><p><br/> </p><h5>然后:</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;答应后,自己想了想才发现有点难度, 主观上, 我感觉我压力有点大, 我他么还没给人搞过这东西, 听说还嘚要严肃?? 想着那些大一师弟师妹们, 应该都不认识我, 哎呦, 我要怎么讲..</p><p>&nbsp;&nbsp;&nbsp;&nbsp;而且给他们讲, 还不知道能不能听的明白, 其实, 大学里, 真的能静下心来敲代码的人 是很少的, 新媒体里面那师弟师妹,我觉得其实他们也不会去搞IT,敲代码. 这要怎么讲!! 但是接了就要搞搞. 认真的搞搞, 锻炼下自己</p><h5>再后来:</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;花了点时间想了想要怎么搞, 在上英语课的时候打了手稿, 卧槽还好去上了课, 被点名回答问题. 那时我在打手稿, 回答问题的时候一脸蒙蔽.&nbsp; 醉醉的..&nbsp; 好在课堂后完成了手稿, 大致是这样的:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1.先给他们讲下基本的电脑知识, 结合自己大一的时候 计算机协会修机经历, 飞扬网管修网络经历, 给他们讲讲遇到电脑故障, 电脑断网, 要怎么做, 讲讲电脑卡的优化什么的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2. 弄个C 指针改游戏内存里的数据的外挂. dll注入的方式完成 植物大战僵尸 的 无限太阳</p><p>&nbsp;&nbsp;&nbsp;&nbsp;3. 然后给他们演示前端方面CSS3完成的动画页面, js完成的 贪吃蛇别踩白块五子棋的游戏</p><p>&nbsp;&nbsp;&nbsp;&nbsp;4. 演示下这个博客系统. 讲讲后端是怎么实现代码的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;5. 经验介绍,学习方法, 心灵鸡汤.</p><p><br/> </p><h5>培训:</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;卧槽真的要上台讲的时候, 那之前, 贼鸡巴紧张, 小心肝一直砰砰的的跳.,&nbsp; <br/> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;我上去讲的时候也基本一直看着笔记本....&nbsp; <br/> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;他么的,讲到最后要结束的时候, 笔记本没电了...</p><p>&nbsp;&nbsp;&nbsp;&nbsp;其实我感觉我讲的内容其实 还不错, 为什么他们说我啰嗦. 哎呦好气哦</p><p>&nbsp;&nbsp;&nbsp;&nbsp;然后就一起吃了个夜宵. 花了30 . 好气哦, 讲完的时候我就应该走的, 不太适合社交</p><p>&nbsp;&nbsp;&nbsp;&nbsp;醉醉的</p><p><br/> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;越努力越幸运&nbsp;&nbsp; .&nbsp; 1.01的365次方 ≈ 37.8&nbsp;&nbsp; 0.99的365次方 ≈ 0.026&nbsp;&nbsp; 每天要进步一点点!!! <br/>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br/> </p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br/> </p>', '0', '1', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('23', '2016-12-05 19:13:35.018975', '2019-03-16 13:05:39.323913', '献给迷惘的自己,php进阶', '<p>在网络上见着的一篇文章,略有感概,以此激励自己</p><p><br/> </p><p>转载自：PHPchina （UID：流感猪）<br/> <br/>1.首先看了PHP的源码API函数，对于许多口水仗的争论一笑而过，只是停留在脚本级别上的什么效率，安全。。。之争完全就是无稽之谈，没有深入理解API，所有的争论都是臆测和不科学的态度。你做了吗？<br/> <br/>2.不再把PHP看作一门后台语言，而是一门类似JS的脚本，页面表现级的语言，更多的是尝试使用一种软件来做后台，PHP做前台，尝试真正的B/S开发。你的看法呢？<br/> <br/>3.知识更新。PHP中的接口你懂了吗？反射你听过吗？JS中的事件冒泡你懂了吗？原型链知道吗？一切函数都是对象，你能理解否？MySQL里面的视图，存储过程你尝试过么有？<br/> <br/>4.扎实的学知识。你是不是离开了JQ框架就连个DOM操作的原生JS都不会写了？你是不是离开了DB类，就连个简单的查询都不会写了？你是不是离开了IDE，连个表格都画不出来？你是不是到现在多表查询，子查询都还不会？你是不是到现在就只知道索引是用来加快查询的？<br/>你是不是到现在连个PHP5的稍微复杂点的OO类都还不会写？你会正则吗？你的E文水平咋样？<br/> <br/>5.扎实的算法基础。你知道选择排序，插入排序，冒泡排序，二分排序，希尔排序并且能写出来吗？你知道怎么遍历二叉树吗？知道霍夫曼吗？你知道图吗？你知道龙格-库塔，迭代，插值，雅戈尔，牛顿下山法吗？知道ZIP压缩原理吗？你是不是可爱到以为加减乘除加上循环判断就搞定了算法？你知道概率论，微积分，线性方程组在算法中是非常非常基础的吗？<br/> <br/>6.学习的主动性。你是不是自己的网站连个拿的出手的JS都没有写过？你网站的效果是不是都是你下载的JQ插件弄出来的？到现在都还没有看过JQ的代码？你现在的模板引擎是谁的？DB类是谁的？框架是谁的？你是不是一直都很鄙视重复造轮子的事情，就像中国现在，“拿来主义”，永远是MADE IN CHINA,而不是Created in China？<br/> <br/>7.广泛的基础。你会汇编吗？那C总该会点吧。。那C++呢，那简单的Java总该会吧。。。那。。那傻瓜化的VB,NET,PY。。。？什么，你只会PHP？其他啥都不会？JS总该会吧？啊，不会，只会用网上下来的JQ？你除了PHP还会点啥？那假如PHP垮台了或者你所在的公司不用PHP了你吃什么？如果老板让你学J2SE你怕不怕？<br/> <br/>8.你是不是就准备一辈子做个coder?你的知识如果让你传授给别人的话，能支撑三个月吗？三个月后你还能讲得出点其他的东西吗？<br/> <br/>9.你现在的水平和你刚开始学的时候进步了多少？你有过自己的作品吗？有多少代码是你自己写的？你认为是不是只要会写PHP代码就够了？这样的话一个初中生三个月后也就能达到你的水平了，你认为呢？你准备一直停留在这个水平吗？<br/> <br/>10.最后一问，你除了会写仅会的PHP代码，还会点其他的吗？你有把握做其他工作吗？你能养活自己老婆孩子吗？能给他们幸福吗？<br/>&nbsp; <br/>问我自己，也问所有PHPER。仅供参考。<br/> <br/>醒醒吧，雄起吧！最可爱的人！仅以此文激励自己永不放弃，奋发学习，激流勇进！！！！<br/> <br/> <br/> </p>', '0', '0', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('24', '2016-12-06 12:24:22.215897', '2019-03-16 13:06:00.902470', 'javascript中的闭包', '<p><span style=\"font-size: 16px;line-height: 27px\"></span></p><p>都说闭包闭包,以前也用过,不过都还很笼统,也没认真的看,今天就认真的研究了会闭包</p><p>先说说自己的理解, 文末后面有转载别人的一篇文章, 我觉得写的很好</p><p>以前用过闭包,就是简单的来说,个人理解,在函数外部访问到函数内部的局部变量\r\n全局-&gt;局部, 局部中可以访问全局的变量. 全局不能访问局部的变量</p><p><strong>函数内部访问变量,会往上父亲找找找</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">&nbsp;&nbsp;&nbsp; (function(){<br/>&nbsp;&nbsp;&nbsp; var hello=&quot;hello,world&quot;; <br/>&nbsp;&nbsp;&nbsp; function welcome(hi){ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(hi); // 解析到作用域链的第一个对象的属性 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(hello); // 解析到作用域链的第二个对象的属性 <br/>&nbsp;&nbsp;&nbsp; } <br/>&nbsp;&nbsp;&nbsp; welcome(&quot;It&#39;s easy&quot;); <br/>})();</p><p><strong>学习代码1</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">var a=1;<br/>var b=function(){<br/>&nbsp;&nbsp;&nbsp; return a+1 ;<br/>}<br/>var c = b();<br/>alert(c); // c = 2</p><p><strong>学习代码2</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">var foo = function(){<br/>&nbsp;&nbsp;&nbsp; var name = &quot;exe&quot;;<br/>&nbsp;&nbsp;&nbsp; console.log( 1 );<br/> <br/>&nbsp;&nbsp;&nbsp; return function inner(){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log( name );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log( 2 );<br/>&nbsp;&nbsp;&nbsp; }<br/>}<br/>//foo(); // console输出 1&nbsp; 最后返回一个 inner引用<br/>//console.log(foo()); // console输出 1&nbsp; function inner()<br/>//foo()(); // console输出&nbsp; 1&nbsp; exe&nbsp; 2&nbsp;&nbsp; foo()是inner的引用, foo()(); 执行了inner函数</p><p><strong>这一部分代码,是根据下面的文章后写的</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">function f1(){<br/>&nbsp;&nbsp;&nbsp; var n = 999;<br/> <br/>&nbsp;&nbsp;&nbsp; // nAdd 前没有使用var&nbsp; 所有nAdd是全局变量 , 同时匿名函数也是一个闭包<br/>&nbsp;&nbsp;&nbsp; // 所以nAdd相当于是一个setter,可以在函数外部对函数内部的局部变量进行操作。<br/>　　nAdd = function(){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n += 1;<br/>&nbsp;&nbsp;&nbsp; }<br/> <br/>　　function f2(){<br/>　　　　alert(n);<br/>　　}<br/>　　return f2;<br/>}<br/>console.log( f1() ); // console输出 function f2()<br/>f1()(); // 执行了f2函数里面的 alert 999<br/>nAdd(); // 执行了 n += 1&nbsp; 现在n为1000<br/>f1()(); // var n = 999&nbsp;&nbsp; n = 999&nbsp; alert(999)<br/> <br/>var f3 = f1();&nbsp; // f3接收了 f2的引用&nbsp; f3实际上就是闭包f2函数(全局变量)<br/>f3(); // alert(999) , 往上找到f1中的n<br/>nAdd(); //&nbsp; 999+1 <br/>f3(); // alert(1000) , 往上找到f1中的n , 但此时n的值修改成了1000<br/> <br/>// f1中的局部变量n一直保存在内存中,并没有在f1结束后被清除&nbsp; why????<br/>// 原因就在于f1是f2的父函数,而f2被赋给了一个全局变量,这导致f2始终在内存中<br/>// 而f2的存在依赖于f1,因此f1也始终在内存中<br/>// 所以不会在调用结束后,被垃圾回收机制（garbage collection）回收。</p><p><br/> </p><p>转载一篇文章:&nbsp; <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" _src=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a><br/> </p><p><br/>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。<br/> <br/>下面就是我的学习笔记，对于Javascript初学者应该是很有用的。<br/> <br/>一、变量的作用域<br/> <br/>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br/> <br/>变量的作用域无非就是两种：全局变量和局部变量。<br/> <br/>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。<br/> <br/>&nbsp;&nbsp;&nbsp; 　　var n=999;<br/>&nbsp;&nbsp;&nbsp; 　　function f1(){<br/>&nbsp;&nbsp;&nbsp; 　　　　alert(n);<br/>&nbsp;&nbsp;&nbsp; 　　}<br/>&nbsp;&nbsp;&nbsp; 　　f1(); // 999<br/> <br/>另一方面，在函数外部自然无法读取函数内的局部变量。<br/> <br/>&nbsp;&nbsp;&nbsp; 　　function f1(){<br/>&nbsp;&nbsp;&nbsp; 　　　　var n=999;<br/>&nbsp;&nbsp;&nbsp; 　　}<br/>&nbsp;&nbsp;&nbsp; 　　alert(n); // error<br/> <br/>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br/> <br/>&nbsp;&nbsp;&nbsp; 　　function f1(){<br/>&nbsp;&nbsp;&nbsp; 　　　　n=999;<br/>&nbsp;&nbsp;&nbsp; 　　}<br/>&nbsp;&nbsp;&nbsp; 　　f1();<br/>&nbsp;&nbsp;&nbsp; 　　alert(n); // 999<br/> <br/>二、如何从外部读取局部变量？<br/> <br/>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。<br/> <br/>那就是在函数的内部，再定义一个函数。<br/> <br/>&nbsp;&nbsp;&nbsp; 　　function f1(){<br/>&nbsp;&nbsp;&nbsp; 　　　　var n=999;<br/>&nbsp;&nbsp;&nbsp; 　　　　function f2(){<br/>&nbsp;&nbsp;&nbsp; 　　　　　　alert(n); // 999<br/>&nbsp;&nbsp;&nbsp; 　　　　}<br/>&nbsp;&nbsp;&nbsp; 　　}<br/> <br/>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的&quot;链式作用域&quot;结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。<br/> <br/>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！<br/> <br/>&nbsp;&nbsp;&nbsp; 　　function f1(){<br/>&nbsp;&nbsp;&nbsp; 　　　　var n=999;<br/>&nbsp;&nbsp;&nbsp; 　　　　function f2(){<br/>&nbsp;&nbsp;&nbsp; 　　　　　　alert(n);<br/>&nbsp;&nbsp;&nbsp; 　　　　}<br/>&nbsp;&nbsp;&nbsp; 　　　　return f2;<br/>&nbsp;&nbsp;&nbsp; 　　}<br/>&nbsp;&nbsp;&nbsp; 　　var result=f1();<br/>&nbsp;&nbsp;&nbsp; 　　result(); // 999<br/> <br/>三、闭包的概念<br/> <br/>上一节代码中的f2函数，就是闭包。<br/> <br/>各种专业文献上的&quot;闭包&quot;（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。<br/> <br/>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&quot;定义在一个函数内部的函数&quot;。<br/> <br/>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。<br/> <br/>四、闭包的用途<br/> <br/>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br/> <br/>怎么来理解这句话呢？请看下面的代码。<br/> <br/>&nbsp;&nbsp;&nbsp; 　　function f1(){<br/>&nbsp;&nbsp;&nbsp; 　　　　var n=999;<br/>&nbsp;&nbsp;&nbsp; 　　　　nAdd=function(){n+=1}<br/>&nbsp;&nbsp;&nbsp; 　　　　function f2(){<br/>&nbsp;&nbsp;&nbsp; 　　　　　　alert(n);<br/>&nbsp;&nbsp;&nbsp; 　　　　}<br/>&nbsp;&nbsp;&nbsp; 　　　　return f2;<br/>&nbsp;&nbsp;&nbsp; 　　}<br/>&nbsp;&nbsp;&nbsp; 　　var result=f1();<br/>&nbsp;&nbsp;&nbsp; 　　result(); // 999<br/>&nbsp;&nbsp;&nbsp; 　　nAdd();<br/>&nbsp;&nbsp;&nbsp; 　　result(); // 1000<br/> <br/>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br/> <br/>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br/> <br/>这段代码中另一个值得注意的地方，就是&quot;nAdd=function(){n+=1}&quot;这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。<br/> <br/>五、使用闭包的注意点<br/> <br/>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br/> <br/>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br/> <br/>六、思考题<br/> <br/>如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。<br/> <br/>代码片段一。<br/> <br/>&nbsp;&nbsp;&nbsp; 　　var name = &quot;The Window&quot;;<br/>&nbsp;&nbsp;&nbsp; 　　var object = {<br/>&nbsp;&nbsp;&nbsp; 　　　　name : &quot;My Object&quot;,<br/>&nbsp;&nbsp;&nbsp; 　　　　getNameFunc : function(){<br/>&nbsp;&nbsp;&nbsp; 　　　　　　return function(){<br/>&nbsp;&nbsp;&nbsp; 　　　　　　　　return this.name;<br/>&nbsp;&nbsp;&nbsp; 　　　　　　};<br/>&nbsp;&nbsp;&nbsp; 　　　　}<br/>&nbsp;&nbsp;&nbsp; 　　};<br/>&nbsp;&nbsp;&nbsp; 　　alert(object.getNameFunc()());<br/> <br/>代码片段二。<br/>&nbsp;&nbsp;&nbsp; 　　var name = &quot;The Window&quot;;<br/>&nbsp;&nbsp;&nbsp; 　　var object = {<br/>&nbsp;&nbsp;&nbsp; 　　　　name : &quot;My Object&quot;,<br/>&nbsp;&nbsp;&nbsp; 　　　　getNameFunc : function(){<br/>&nbsp;&nbsp;&nbsp; 　　　　　　var that = this;<br/>&nbsp;&nbsp;&nbsp; 　　　　　　return function(){<br/>&nbsp;&nbsp;&nbsp; 　　　　　　　　return that.name;<br/>&nbsp;&nbsp;&nbsp; 　　　　　　};<br/>&nbsp;&nbsp;&nbsp; 　　　　}<br/>&nbsp;&nbsp;&nbsp; 　　};<br/>&nbsp;&nbsp;&nbsp; 　　alert(object.getNameFunc()());<br/> <br/>（完） &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br/> </p>', '0', '1', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('25', '2016-12-09 22:44:07.697123', '2019-03-16 13:06:34.530983', 'linux下部署git环境和git的使用', '<p><span style=\"font-size: 16px;line-height: 27px\"></span></p><p>linux下部署git环境,和git命令的使用, window版的就不介绍了(作者在本地win8,github,腾讯云linux)<br/> </p><p>系统: CentOs7.2 php环境 部署git环境</p><p><strong>yum直接安装git</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">\r\n	yum install git</p><p><br/> </p><p><strong>设置username, email</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">\r\n	git config --global user.name &quot;enjoy-binbin&quot;<br/>git config --global user.email &quot;binloveplay1314@qq.com&quot;</p><p><br/> </p><p><strong>克隆远程仓库到本地<br/> </strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">\r\n	git clone git@github.com:enjoy-binbin/blog<br/> </p><p><strong><br/> </strong></p><p><strong>到这里需要知道&nbsp; 工作区,暂存区,版本库这些概念了</strong></p><p><strong>工作区: 就是本地上 开发者的工作目录拉&nbsp; 当你git add -A 后,&nbsp;&nbsp;&nbsp; 就是将工作区的内容 add 进暂存区</strong></p><p><strong>暂存区</strong>: <strong>修改已被记录过的,&nbsp; 但是并没有录入版本库的区域 ,&nbsp; git commit -m &quot;&quot; 后,&nbsp; 进入版本库</strong></p><p><strong>版本库: 存储变化日志和版本信息</strong></p><p><strong>工作区 ---add&nbsp; ----&gt; 暂存区 ---commit ----&gt; 版本库&nbsp; --- push ----&gt; 远程仓库<br/> </strong></p><p><strong>最后,当 push 后, 会更新在 <strong>github</strong>远程仓库上的内容<br/> </strong></p><p><strong><br/> </strong></p><p><strong>所以一个标准的流程<br/> </strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">\r\n	git add -f&nbsp; . <br/>git commit -m &quot;更新内容&quot;<br/>git push</p><p><strong>以后更新本地仓库(也可以直接 git pull)</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">\r\n	git remote -v<br/>git fetch origin master<br/>git merge</p><p>这里 origin 是本地分支&nbsp; master 是远程仓库分支名 <br/> </p><p>add 的时候使用 -f&nbsp;&nbsp; 强制将文件 add <br/> </p><p>merge是合并 两个 分支</p><p>&nbsp;&nbsp; <br/> </p><p><strong>总结一下git的常用命令<br/> </strong></p><p>git init&nbsp;&nbsp;&nbsp; // 初始化</p><p>git add -A&nbsp; //&nbsp; 参数: -f 强制&nbsp;&nbsp; -A 所有&nbsp;&nbsp;&nbsp; .&nbsp; 所有<br/> </p><p>git commit -m &quot;更新日志..&quot;&nbsp; // 提交commit<br/> </p><p>git push // push到远程仓库</p><p>git pull&nbsp;&nbsp; // pull到本地仓库<br/> </p><p>git reflog // 查看所有日志吧? git log<br/> </p><p>git log --pretty=oneline // 一行行查看日志 (版本号, commit信息)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HEAD 相当于 C的指针&nbsp; 一般指向当前最新的<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向HEAD 往后走5个版本<br/>git reset // &nbsp; git reset --hard HEAD^^^^^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; git reset --hard 版本号<br/> </p><p>分支:<br/>git branch&nbsp; // &nbsp;查看所有分支<br/>git branch Name // 创建分支<br/>git checkout Name // 切换分支</p><p>git merge Name // 合并分支</p><p>git branch -d Name //&nbsp; 删除分支</p><p>一个例子:&nbsp; (先新建一个test分支, 在此分支上修改代码, 可行后, 切换master主分支 , 合并test分支)<br/>&nbsp;&nbsp; &nbsp;git branch test<br/>&nbsp;&nbsp; &nbsp;git checkout test</p><p>&nbsp;&nbsp;&nbsp; .....这里进行了很多代码修改代码实现</p><p>&nbsp;&nbsp;&nbsp; git add -A<br/>&nbsp;&nbsp; &nbsp;git commit -m &quot;test分支操作完成&quot;</p><p>&nbsp;&nbsp;&nbsp; git checkout master<br/>&nbsp;&nbsp; &nbsp;git merge test</p><p>&nbsp;分支的出现, 可以防止 污染 master主分支, 建议以后单操作, 建立一个新分支来操作最后再合并</p><p><br/> </p><p>远程仓库:<br/>git remote // 查看远程仓库<br/>git remote -v&nbsp; // 查看远程仓库地址 ,&nbsp; 出现中的&nbsp; origin&nbsp; 是默认本地仓库别名</p><p>git remote remove Name //&nbsp;删除仓库<br/>git remote add NickName https地址或者shh地址 // 为远程仓库添加一个别名&nbsp;&nbsp;&nbsp; <br/> </p><p>添加远程库<br/>&nbsp;&nbsp; &nbsp;git remote add myblog https://...<br/>&nbsp;&nbsp; &nbsp;git remote add myblog git@github.com:enjoy-binbin/blog.git<br/>push远程仓库时候, https是需要输入github账号密码的, ssh则不用</p><p>git push myblog master // 将本地myblog仓库push到远程master仓库</p><p><br/> </p><p>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。<br/>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。<br/>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。<br/>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</p><p><br/> </p><p><strong><br/> </strong></p><p><strong>最后配置 shh 密钥公钥 , 免密登陆</strong><br/> </p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">\r\n	ssh-keygen -t rsa -C &quot;binloveplay1314@qq.com&quot;</p><p>这时会生成一个 ssh-key&nbsp; 一路默认回车<br/>最后生成密钥文件 默认放在&nbsp; /root/.ssh/id_rsa.pub<br/> <br/>cat打开,将里面的内容复制 <br/> <br/>进入github官网,登陆账号,打开设置<br/>左侧栏会有个 SSH and GPG keys <br/>New SSH key<br/>Title&nbsp; 标题<br/>Key&nbsp;&nbsp; 将复制的内容复制进去<br/> <br/>Add SSH key<br/>输入github密码 确认即可</p><p><strong>上述步骤完成后, linux终端下输入</strong></p><p style=\"padding: 9.5px;margin: 0 0 10px;font-size: 13px;color: #333;background-color: #f5f5f5;border: 1px solid #ccc;border-radius: 4px;\">\r\n	ssh -T git@github.com</p><p>出现 Hi enjoy-binbin! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<br/> <br/>即成功, 有时候反应会迟钝, 确认步骤无误后, 可以等待几分钟后在试</p><p><br/> </p><p>写的好乱~~~ 也是本渣在本地上记的 散乱笔记 , 发现想要串起来也很麻烦 , 就这样了吧&nbsp; ~~<br/> </p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br/> </p>', '0', '0', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('26', '2017-01-23 11:20:53.137895', '2019-03-16 13:06:47.487033', '大二第一学期和寒假', '<p><strong>\r\n &nbsp; &nbsp;		大二的第一学期也结束了,总结下这个学期吧</strong></p><p>这个学期学校社团方面,计算机协会留任了个技术部副部长,飞扬网管就退了,原因可能是感觉太累太耗费时间了,新的方面便是加入了学生团委的新媒体部,是由我部长舍友拉我进去的</p><p>\r\n	其实,我这个人有点怪,我自己说不清楚,可能接触我的人都知道,我不太喜欢和别人交流,和那种不熟识的人,其实人际交际这点我特佩服舒浩,他跟很多人都能聊的来玩的来。我就不太行</p><p>\r\n	感觉计算机协会留任是个错误的决定,当时我留任想着能够改变下协会内的那种吊郎当的氛围,其实我自己就是,哎呦。想着留任后能用自己的计算机方面的知识带带新人,顺便锻炼下自己。可是真留任后,发现自己是真的不行。前期就不行了,中后期我自己也明白了自己的缺点,也尝试的改变。但是时间已经过去了很多了。像我,刚那时,真不喜人。别人加我微信,我都不同意。这点我要对当时加我的师弟师妹说声抱歉,可能你们也看不到这篇文章。我写给自己。现在这方面的观念也渐渐的扭转过来了。</p><p>\r\n	但是我感觉计算机协会,我这个技术部副部长已经名存实亡了,我把带人,管理人的方面都推给了其他几个管理层,跟他们说就让我负责搞搞技术,这点很惭愧,其实一个学期也就帮协会写了个报修系统,和老虎一起写的,其他方面便没了。实话说,部门里的师弟们我都叫不出名字。</p><p>\r\n	反而在gis新媒体那,活跃度比较高。这可能是管理层的问题吧,新媒体那的管理层,一个个都非常的善于交际,而且可能是大团,所以招的人也是很有质量,这样的良性循环中,让部门越来越好。我在里面担任了技术组代码组里的一个师兄,平常写写代码。但是关键我还跟技术组里面的师弟师妹不太熟。反而跟资源组中的几个人熟悉,感叹到他们的人际交往是真的好,人也好,所以我也好。开端都是从去年圣诞节平安夜那会开始的,小师弟师妹们给我送了礼物。</p><p>\r\n	实话说,那感觉很棒,我现在嘴角微微上扬,我他么竟然也有人送礼物。那时我很开心,感觉到了部门内的那种感觉,自那以后,我也就开始在群里面聊天吹水,这样的循环中,我感觉自己变了很多。也收获到了很多技术之外的东西。 这点我非常感谢他们。</p><p>\r\n	大二第一学期这段就写到这了吧。诶对了,我没挂科。 哈哈哈啊哈,还考了个四级。感觉能过。出成绩的那会,如果过了我就写篇文章吹吹牛皮。没过就不写了吧。哈哈哈啊啊感觉能过</p><p><strong>\r\n		寒假开始拉</strong></p><p>\r\n	现在是17年的1月23日的 11.07分。 大二第一学期后的寒假,寒假我给自己定的目标挺高的,就是不停的学学学,之前在学校的第一学期,在学习路上迷路,感受到了迷惘,当时就感觉什么都学不了,现在这年头也换了过来,生活还得继续</p><p>\r\n	这个寒假,发生了一件事情。我外公去世了,我也终于体验过一次生死离别。17号中午赶上见的外公最后一面,见过后的一个钟外公便走了。这里我就不多说了,那天的下午我写了点东西发了微信朋友圈,这里便不说了。生命的脆弱</p><p>\r\n	17号的晚上,我发朋友圈后的晚上,有个姑娘来安慰我。她说了一段话,我保存在手机的备忘录中了,也发了条仅自己可见的朋友圈记着。我感觉我有点喜欢上她了,她也的确很漂亮和优秀。只是我感觉我自己不行,哎。实话,我很想在大学谈次恋爱。只是我的情商是真的不高。奔跑吧我的渣神。</p><p>\r\n	寒假开始的9号到17号期间,我应舒浩的任务安排。去研究了微信的小程序,这段时间内也一直在学习小程序,写小程序的代码。当然也是和老虎。中间发生了很多不开心的事情,出bug什么的,真的是头疼。基于华商gis公众号开发的小程序,完成了对学生课表 成绩 交通出行的查询。 我负责了整个的交通出行,和局部的成绩查询,其余剩下的部分是老虎完成的。</p><p>\r\n	寒假也过去了半个月了。也经历了很多事情。我还是会好好的,move forward\r\n	加油奔跑吧。我的渣神\r\n	缩略图用了个我很喜欢的壁纸,加油吧希望我也能像壁纸所说。</p>', '0', '1', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('27', '2017-01-26 22:52:31.789750', '2019-03-16 13:07:20.745655', 'html+css+js完成别踩白块', '<h1 class=\"ue_t\" label=\"Title center\" name=\"tc\" style=\"border-bottom-color:#cccccc;border-bottom-width:2px;border-bottom-style:solid;padding:0px 4px 0px 0px;text-align:center;margin:0px 0px 20px;\"><span style=\"color:#c0504d;\">别踩白块网页版</span></h1><p style=\"text-align:center;\"><strong class=\"ue_t\">html+css+js完成一个别踩白块网页版游戏</strong></p><h3><span class=\"ue_t\" style=\"font-family:幼圆\">思路(from 十八哥):</span></h3><p style=\"text-indent:2em;\">首先有一个main,里面有个container容器,然后container里面有5个row<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 实现是: 下面4个row显示,上面1个row溢出隐藏,实现无缝滚动。其实轮播图也是这样做的<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 因为con的top为 -100px 所以有一个row超出了main&nbsp; 需要 overfloat:hidden;<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 将con的top 逐渐从 -100 增加到 0 完成块的无缝滚动<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; con的背景颜色为 white <br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 初始化: 创建 4个row&nbsp; 每一个row 中 规定 一个cell.black 则有一个黑块<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 移动: 将con的top 逐渐从 -100 增加到 0 而后又置为 -100<br/>&nbsp;&nbsp; &nbsp; &nbsp; 同时drow 删除最后一行的row<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 后续: judge判断胜负 fail输出失败信息 score计算分数 start开始按钮</p><h3><span style=\"font-family:幼圆\">index.html</span></h3><p style=\"text-indent:2em;\"></p><h3><span style=\"font-family:幼圆\">index.css</span></h3><pre class=\"brush:css;toolbar:false\">body{\r\n&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#333;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;防止文本被选中插件&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;-moz-user-select:none;/*火狐*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;-webkit-user-select:none;/*webkit浏览器*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;-ms-user-select:none;/*IE10*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;-khtml-user-select:none;/*早期浏览器*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;user-select:none;\r\n}\r\n#main{\r\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;400px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;400px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;0&nbsp;auto;\r\n&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;\r\n&nbsp;&nbsp;&nbsp;&nbsp;overflow:&nbsp;hidden;\r\n&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;white;\r\n&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;2px&nbsp;solid&nbsp;black;\r\n}\r\n#container{\r\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;\r\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;400px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;\r\n&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;-100px;\r\n}\r\n.row{\r\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;\r\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;\r\n}\r\n.cell{\r\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;\r\n}\r\n.black{\r\n&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;black;\r\n}\r\n#top{\r\n&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\r\n}\r\np{\r\n&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;10px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;0;\r\n}\r\n#top&nbsp;#score{\r\n&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;30px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#abcdef;\r\n}\r\n#top&nbsp;#hint{\r\n&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;20px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;red;\r\n}</pre><h3><span style=\"font-family:幼圆\">js</span></h3><pre class=\"brush:js;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;一些全局变量&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;speed&nbsp;=&nbsp;3;&nbsp;//速度默认为3\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;clock&nbsp;=&nbsp;null;&nbsp;//&nbsp;定时器\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;state&nbsp;=&nbsp;0;&nbsp;//&nbsp;0初始化&nbsp;1进行中&nbsp;2暂停&nbsp;3失败\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;con&nbsp;=&nbsp;document.getElementById(&#39;container&#39;);&nbsp;//&nbsp;获得con对象\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;hint&nbsp;=&nbsp;document.getElementById(&#39;hint&#39;);&nbsp;//&nbsp;获得hint对象\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**游戏初始化\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;init(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;a=0;&nbsp;a&lt;4;a++)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;crow();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&#39;start&#39;).onclick&nbsp;=&nbsp;function(ev){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&#39;restart&#39;).onclick&nbsp;=&nbsp;function(ev){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restart();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**创建div\r\n&nbsp;&nbsp;&nbsp;&nbsp;**param&nbsp;div的类名\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;cdiv(className){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;div&nbsp;=&nbsp;document.createElement(&#39;div&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;div.className&nbsp;=&nbsp;className;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;div;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**创建div.row&nbsp;一行包着4个div.cell\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;crow(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;row&nbsp;=&nbsp;cdiv(&#39;row&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;classes&nbsp;=&nbsp;createSn();//&nbsp;获取cell类名\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=&nbsp;0&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;4&nbsp;;&nbsp;i++){&nbsp;//&nbsp;创建4个cell\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;cell&nbsp;=&nbsp;cdiv(classes[i]);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row.appendChild(cell);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建row\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(con.firstChild&nbsp;==&nbsp;null)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果con的第一个child为空\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;追加一个新的row\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.appendChild(row);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;否则将创建的新的row\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;追加到第一个row的上面\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.insertBefore(row,con.firstChild);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**&nbsp;删除最后一行row\r\n&nbsp;&nbsp;&nbsp;&nbsp;**&nbsp;前四行显示在屏幕上&nbsp;,&nbsp;第五行在最上面\r\n&nbsp;&nbsp;&nbsp;&nbsp;**&nbsp;当第六行出现,删除屏幕上的最后一行&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;drow(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(con.childNodes.length&nbsp;==&nbsp;6)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.removeChild(con.lastChild);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**创建cell的类&nbsp;并随机一个black\r\n&nbsp;&nbsp;&nbsp;&nbsp;**return&nbsp;array&nbsp;&nbsp;里面是类的名字\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;createSn(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr&nbsp;=&nbsp;[&#39;cell&#39;,&#39;cell&#39;,&#39;cell&#39;,&#39;cell&#39;];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;Math.floor(Math.random()*4);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[i]&nbsp;=&nbsp;&#39;cell&nbsp;black&#39;;//&nbsp;随机一个黑块\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;arr;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**控制木块移动\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;move(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//getComputedStyle是一个可以获取当前元素所有最终使用的CSS属性值。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//返回的是一个CSS样式声明对象([object&nbsp;CSSStyleDeclaration])，只读\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//console.log(window.getComputedStyle(con,null))\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;top&nbsp;=&nbsp;parseInt(window.getComputedStyle(con,null)[&#39;top&#39;]);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//console.log(top);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(speed&nbsp;+&nbsp;top&nbsp;&gt;&nbsp;0)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;0;&nbsp;//&nbsp;一步都过头的情况\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;+=&nbsp;speed;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.style.top&nbsp;=&nbsp;top&nbsp;+&nbsp;&#39;px&#39;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(top&nbsp;==&nbsp;0){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;crow();&nbsp;//&nbsp;创建一个row\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.style.top&nbsp;=&nbsp;&#39;-100px&#39;;&nbsp;//&nbsp;top为0时,再将top往上提100px\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drow();&nbsp;//&nbsp;删除最后一个row\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(top&nbsp;==&nbsp;(-100&nbsp;+&nbsp;speed)&nbsp;){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;rows&nbsp;=&nbsp;con.childNodes;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果有五行row&nbsp;且最后一行的pass&nbsp;!=1&nbsp;判断为输\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;(rows.length==5)&nbsp;&amp;&amp;&nbsp;(rows[rows.length-1].pass&nbsp;!=1)&nbsp;){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//console.log(rows);&nbsp;这边要小心rows中有文字节点删除空格\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**&nbsp;判断黑白\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;judge(ev){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(state&nbsp;==&nbsp;3){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint.innerHTML&nbsp;=&nbsp;&#39;失败了&#39;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//console.log(ev);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;indexOf&nbsp;返回某个指定的字符串值在字符串中首次出现的位置。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ev.target.className.indexOf(&#39;black&#39;)&nbsp;==&nbsp;-1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail();&nbsp;//&nbsp;要是没找到则点击的为白块,so失败\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.target.className&nbsp;=&nbsp;&#39;cell&#39;;&nbsp;//&nbsp;将黑块变为白块\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.target.parentNode.pass&nbsp;=&nbsp;1;&nbsp;//&nbsp;parent为&nbsp;div.row\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**&nbsp;失败\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;fail(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(clock);&nbsp;//&nbsp;清楚定时器\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state&nbsp;=&nbsp;3;&nbsp;//&nbsp;设置状态\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//alert(&#39;游戏结束了&#39;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint.innerHTML&nbsp;=&nbsp;&#39;失败了&#39;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**&nbsp;计分\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;score(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;score&nbsp;=&nbsp;parseInt(document.getElementById(&#39;score&#39;).innerHTML);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;newscore&nbsp;=&nbsp;score&nbsp;+&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&#39;score&#39;).innerHTML&nbsp;=&nbsp;newscore;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;newscore&nbsp;%&nbsp;10&nbsp;==&nbsp;0&nbsp;)&nbsp;//&nbsp;每10分加一次速度\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speedUp();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;**&nbsp;加速\r\n&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;speedUp(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speed&nbsp;+=&nbsp;2;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;开始游戏&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;start(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(state&nbsp;==&nbsp;3){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint.innerHTML&nbsp;=&nbsp;&#39;请重新开始下一局..&#39;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;定时器&nbsp;30ms运行一次move()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clock&nbsp;=&nbsp;window.setInterval(&#39;move()&#39;,30);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;给main增加一个click事件,并且将event传入judge\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&#39;main&#39;).onclick&nbsp;=&nbsp;function(ev){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;judge(ev);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;restart(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location.reload(true);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//start();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;init();</pre><p><br/></p><p><a name=\"Top\"></a><br/></p>', '0', '1', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('28', '2017-02-02 01:31:23.021387', '2019-03-16 13:07:44.960537', 'Centos7.2 Apache2.4 配置https ssl证书', '<h2 style=\"border-bottom-color:#cccccc;border-bottom-width:2px;border-bottom-style:solid;padding:0px 4px 0px 0px;margin:0px 0px 10px;text-align:center;\" class=\"ue_t\">Centos7.2 Apache2.4 配置https ssl证书</h2><p><strong><span style=\"font-size:12px;\">摘要</span></strong><span style=\"font-size:12px;\" class=\"ue_t\">：由于前面寒假大部分时间用来研究了微信小程序,里面的request只能发送https请求,现在有空也将自己服务器配置成了https<br/> </span></p><p><span style=\"font-size:12px;\" class=\"ue_t\"><img src=\"http://img.baidu.com/hi/tsj/t_0038.gif\"/>&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p style=\"line-height:1.5em;\"><strong>1. 证书获取</strong></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">腾讯免费ssl证书获取</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">https://www.qcloud.com/product/ssl</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">立即使用-&gt;申请证书(免费版DVSSL证书 一年申请一次即可)<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;-&gt;填写信息(域名,邮箱,备注名一般也为域名即可) 其他不用填-&gt; 下一步<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;-&gt; 等待五分钟左右(因为我是腾讯云服务器,所以他会自己自动配置好域名解析信息)<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;如果是其他服务器,就请读者自己百度吧。。<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;五分钟左右申请通过,域名解析信息也帮你配好了<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;将证书下载到本地<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;解压后有三个文件夹,对应不同服务器<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;将apache目录下的三个文件 复制到 服务器上 /etc/httpd/conf 下(这个可以自己决定存放位置)</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\"><br/> </span></p><p style=\"line-height:1.5em;\"><strong>2. 配置ssl</strong></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">参考&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"https://www.qcloud.com/document/product/400/4143)\" _src=\"https://www.qcloud.com/document/product/400/4143)\">https://www.qcloud.com/document/product/400/4143</a><br/> </span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\"> 2.1 安装ssl</span></p><pre class=\"brush:php;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yum&nbsp;list&nbsp;all&nbsp;mod_ssl&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yum&nbsp;install&nbsp;-y&nbsp;mod_ssl</pre><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\"></span>&nbsp;&nbsp;&nbsp;&nbsp;安装后apache会自动引入ssl模块</p><pre class=\"brush:groovy;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rpm&nbsp;-qc&nbsp;mod_ssl</pre><p style=\"text-indent:2em;\">&nbsp;&nbsp;&nbsp;&nbsp;/etc/httpd/conf.d/ssl.conf 即为ssl配置文件</p><p style=\"text-indent:2em;\">2.2 配置ssl</p><pre class=\"brush:erlang;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;/etc/httpd/conf.d\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cp&nbsp;ssl.conf&nbsp;./ssl.conf.0202.bak\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vi&nbsp;ssl.conf&nbsp;#(或者用外部编辑器打开)</pre><p style=\"text-indent:2em;\">&nbsp;&nbsp;&nbsp;&nbsp;下面的配置我都建议在原来的基础上 复制新的一行,将上行注释并写点说明信息(如时间)</p><pre class=\"brush:erlang;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;59行&nbsp;取消这两行的注释#\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#DocumentRoot&nbsp;&quot;/var/www/html&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#ServerName&nbsp;www.example.com:443\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;2017年2月2日&nbsp;01:03:53&nbsp;修改\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DocumentRoot&nbsp;&quot;/var/www/html&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServerName&nbsp;www.example.com:443\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;下面这三个文件根据自己前面下载的证书放置(&nbsp;我将其放在了etc/httpd/conf下)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100行&nbsp;SSLCertificateFile&nbsp;/etc/pki/tls/certs/localhost.crt\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSLCertificateFile&nbsp;/etc/httpd/conf/2_www.zz-bin.cn.crt\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;107行&nbsp;SSLCertificateKeyFile&nbsp;/etc/pki/tls/private/localhost.key\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSLCertificateKeyFile&nbsp;/etc/httpd/conf/3_www.zz-bin.cn.key\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;116行&nbsp;#SSLCertificateChainFile&nbsp;/etc/pki/tls/certs/server-chain.crt\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSLCertificateChainFile&nbsp;/etc/httpd/conf/1_root_bundle.crt</pre><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\"> </span><br/> </p><p style=\"line-height:1.5em;\"><strong>3.&nbsp; 重启apache<br/> </strong></p><pre class=\"brush:delphi;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;systemctl&nbsp;restart&nbsp;httpd</pre><p><br/> </p><p><strong>4.&nbsp; 访问 https 域名成功</strong><br/> </p><p><img src=\"http://img.baidu.com/hi/tsj/t_0040.gif\"/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br/> </p>', '0', '1', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('29', '2017-02-02 23:22:11.945312', '2019-03-16 13:08:12.496152', '设置http自动跳转到https', '<h2 style=\"border-bottom-color:#cccccc;border-bottom-width:2px;border-bottom-style:solid;padding:0px 4px 0px 0px;margin:0px 0px 10px;text-align:center;\" class=\"ue_t\">设置http自动跳转到https</h2><p><strong><span style=\"font-size:12px;\">摘要</span></strong><span style=\"font-size:12px;\" class=\"ue_t\">：如何设置http自动跳转到https? 将所有来自http请求的转发到https<br/> </span></p><p><span style=\"font-size:12px;\" class=\"ue_t\"><br/> </span></p><p style=\"line-height:1.5em;\"><strong>基础知识<br/> </strong></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">默认下: apache监听着80端口, https的监听着443端口, ssl.conf内有ssl模块的详细配置信息<br/> </span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\"><a href=\"http://www.zz-bin.cn:80\" _src=\"http://www.zz-bin.cn:80\">http://www.zz-bin.cn:80</a> &nbsp; &nbsp; &nbsp; &nbsp; <br/> </span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\"><a href=\"https://www.zz-bin.cn:443\" _src=\"https://www.zz-bin.cn:443\">https://www.zz-bin.cn:443</a><br/> </span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">我之前有尝试将 博客系统单独的 独立出来, 在apahce内做个虚拟主机 ， 其实也算成功了. 只是 https 请求发送的时候 这两个请求对应的 目录不同， 在 ssl.conf 中有个 配置信息 DocumentRoot 即是指定 443端口进来后的目录.&nbsp; 默认和 apache设置的&nbsp; var/www/html 一样&nbsp; 这个配置也可以设置到 ..../html/blog 。 只是这样又发现了一个弊端, 因为自己服务器上也夹杂着各种奇怪的&nbsp; 实验应用&nbsp; 这样将目录写成blog 会出现很多问题 。 于是乎便放弃了<br/> </span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\"><br/> </span></p><p style=\"line-height:1.5em;\"><strong>跳转</strong></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">apache环境下, http访问跳转到https 需要实现 url重定向：</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">因为我在很久前便完成了这一步, 而laravel也是需要rewrite&nbsp; 这边无法实时的更新便不写了</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\">摘一段百度来的 信息 , 如有不会请百度<br/> </span></p><pre class=\"brush:html;toolbar:false\">打开url重定向支持\r\n1）打开Apache/conf/httpd.conf，找到&nbsp;#LoadModule&nbsp;rewrite_module&nbsp;modules/mod_rewrite.so&nbsp;去掉#号\r\n2）找到你网站目录的&lt;Directory&gt;段，比如我的网站目录是c:/www，找到\r\n&lt;Directory&nbsp;“C:/www”&gt;\r\n…\r\n&lt;/Directory&gt;\r\n修改其中的&nbsp;AllowOverride&nbsp;None&nbsp;为&nbsp;AllowOverride&nbsp;All\r\n3）重启apache</pre><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\"></span><br/> </p><p style=\"line-height:1.5em;\"><strong>设置重定向规则<br/> </strong></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\">.htaccess 写过一点东西的人应该都知道这么一个文件, laravel项目下也会有</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\">在这个文件下 设置重定向规则</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\">. 打头的文件在linux下为隐藏文件,&nbsp; 在win下无法直接创建&nbsp; 这样名字不合法的文件</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\">win下的操作是&nbsp;&nbsp; 新建文本文档, 另存为 . 所有文件　名字为 .htaccess 即可</span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\"><br/> </span></p><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\">编辑 .htaccess 写入如下规则（运用了正则）<br/> </span></p><pre class=\"brush:java;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;RewriteEngine&nbsp;on\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteCond&nbsp;%{SERVER_PORT}&nbsp;!^443$\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteCond&nbsp;%{REQUEST_URI}&nbsp;!^/index.html\r\n&nbsp;&nbsp;&nbsp;&nbsp;RewriteRule&nbsp;(.*)&nbsp;https://%{SERVER_NAME}/$1&nbsp;[R]</pre><p style=\"text-indent:2em;\"><span style=\"font-size:14px;\" class=\"ue_t\"></span>将 .htaccess 放在apache内的目录&nbsp; /var/www/html 下即可</p><p style=\"text-indent:2em;\"><br/> </p><p style=\"text-indent:2em;\">解释:</p><p style=\"text-indent:2em;\">&nbsp;&nbsp;&nbsp; 如果访问的 url地址&nbsp;&nbsp; 不是443端口&nbsp; 或者&nbsp; 不是访问的 index.html&nbsp;&nbsp; 则应用 RewriteRule重写规则</p><p style=\"text-indent:2em;\">这样便实现了&nbsp; 访问&nbsp;&nbsp; http:<a href=\"http://www.zz-bin.cn\" _src=\"http://www.zz-bin.cn\">www.zz-bin.cn</a>&nbsp; 会自动跳转到 &nbsp; <a href=\"https://www.zz-bin.cn\" _src=\"https://www.zz-bin.cn\">https://www.zz-bin.cn</a><br/> </p><p style=\"text-indent:2em;\">而访问&nbsp; http:<a href=\"http://www.zz-bin.cn/index.html\" _src=\"http://www.zz-bin.cn/index.html\">www.zz-bin.cn/index.html</a>&nbsp; 则不会跳转&nbsp; 当然这个地址也可以使用　https访问 <br/> </p><p style=\"text-indent: 2em;\"><br/> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;End &nbsp;&nbsp;&nbsp; <br/> </p>', '0', '0', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('30', '2017-03-01 13:56:19.178954', '2019-03-16 13:08:29.676646', 'Centos7.2下 源码编译安装 lnmp环境( 上 )', '<h1 label=\"Title center\" name=\"tc\" style=\"border-bottom-color:#cccccc;border-bottom-width:2px;border-bottom-style:solid;padding:0px 4px 0px 0px;text-align:center;margin:0px 0px 20px;\"><span style=\"color:#c0504d;\">centos7.2下配置lnmp<br/> </span></h1><p style=\"text-align:center;\"><strong class=\"ue_t\">源码编译nginx+php7<br/> </strong></p><h3><span class=\"ue_t\" style=\"font-family:幼圆\">前言：</span></h3><p style=\"text-indent:2em;\">之前服务器是搭建的 lamp环境, apache2.4+php5.6, nginx现在很流行了, 因为学习原因, 我也着手在自己服务器上搭建lnmp环境, 由于之前的 lamp是用yum直接安装的, 现在想在 一台服务器上 实现 apache和nginx共同工作, 经过不断搜索实践，终于完成。总结起来.</p><p style=\"text-indent:2em;\">Centos7.2 下配置&nbsp; nginx-1.42. 和 php-7.0.16 + mysql 源码编译安装方式</p><p style=\"text-indent:2em;\">实践上是在自己原有服务器上实现的。但是服务器环境太差，下文假定是在 0 服务器上执行<br/> </p><h3><span style=\"font-family:幼圆\"># 安装编译工具</span></h3><pre class=\"brush:html;toolbar:false\">yum&nbsp;install&nbsp;gcc&nbsp;automake&nbsp;autoconf&nbsp;libtool&nbsp;gcc-c++</pre><h3><span style=\"font-family:幼圆\"># 安装基础库 ( 无则安装，有则更新)<br/> </span></h3><pre class=\"brush:css;toolbar:false\">yum&nbsp;install&nbsp;gd&nbsp;zlib&nbsp;zlib-devel&nbsp;openssl&nbsp;openssl-devel&nbsp;libxml2&nbsp;libxml2-devel&nbsp;libjpeg&nbsp;libjpeg-devel&nbsp;libpng&nbsp;libpng-devel&nbsp;freetype&nbsp;freetype-devel&nbsp;libmcrypt&nbsp;libmcrypt-devel</pre><h3><span style=\"font-family:幼圆\"># 安装mysql ( 原先lamp中有了mysql，所以这部可以不用 )<br/> </span></h3><pre class=\"brush:cpp;toolbar:false\">yum&nbsp;install&nbsp;mysql&nbsp;mysql-server</pre><h3><span style=\"font-family:幼圆\"># nginx依赖 正则PCRE库</span></h3><pre class=\"brush:cpp;toolbar:false\">yum&nbsp;install&nbsp;pcre&nbsp;pcre-devel</pre><h3><span class=\"ue_t\" style=\"font-family:幼圆\"></span></h3><h3><span style=\"font-family:幼圆\"># 编译nginx</span></h3><pre class=\"brush:cpp;toolbar:false\">cd&nbsp;/usr/local/src\r\nwget&nbsp;http://nginx.org/download/nginx-1.4.2.tar.gz\r\ntar&nbsp;zxvf&nbsp;nginx-1.4.2.tar.gz\r\n\r\ncd&nbsp;nginx-1.4.2/\r\n./configure&nbsp;--prefix=/usr/local/nginx\r\nmake&nbsp;&amp;&amp;&nbsp;make&nbsp;install\r\n\r\n#&nbsp;启动nginx\r\ncd&nbsp;/usr/local/nginx\r\n./sbin/nginx</pre><h3><span class=\"ue_t\" style=\"font-family:幼圆\"></span></h3><h3><span style=\"font-family:幼圆\"></span></h3><h3><span style=\"font-family:幼圆\"># 编译php</span></h3><pre class=\"brush:cpp;toolbar:false\">#&nbsp;源码编译php7.0.16&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;/usr/local/src\r\n&nbsp;&nbsp;&nbsp;&nbsp;wget&nbsp;http://cn2.php.net/get/php-7.0.16.tar.gz/from/this/mirror\r\n&nbsp;&nbsp;&nbsp;&nbsp;mv&nbsp;./mirror&nbsp;./php-7.0.16.tar.gz\r\n&nbsp;&nbsp;&nbsp;&nbsp;tar&nbsp;zxvf&nbsp;php-7.0.16.tar.gz\r\n&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;php-7.0.16/\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;./configure&nbsp;--prefix=/usr/local/php7&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--with-gd&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--with-freetype-dir&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--enable-gd-native-ttf&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--enable-mysqlnd&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--with-pdo-mysql=mysqlnd&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--with-openssl&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--with-mcrypt&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--enable-mbstring&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--enable-zip&nbsp;\\\r\n&nbsp;&nbsp;&nbsp;&nbsp;--enable-fpm\r\n\r\n#&nbsp;这里编译安装时间会很长\r\n&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;&amp;&amp;&nbsp;make&nbsp;install\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;复制配置文件\r\n&nbsp;&nbsp;&nbsp;&nbsp;cp&nbsp;/usr/local/src/php-7.0.16/php.ini-development&nbsp;/usr/local/php7/lib/php.ini\r\n&nbsp;&nbsp;&nbsp;&nbsp;cp&nbsp;/usr/local/php7/etc/php-fpm.conf.default&nbsp;/usr/local/php7/etc/php-fpm.conf\r\n&nbsp;&nbsp;&nbsp;&nbsp;cp&nbsp;/usr/local/php7/etc/php-fpm.d/www.conf.default&nbsp;/usr/local/php7/etc/php-fpm.d/www.conf\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;启动php\r\n/usr/local/php7/sbin/php-fpm</pre><h3><span style=\"font-family:幼圆\"># nginx和php的整合<br/> </span></h3><pre class=\"brush:cpp;toolbar:false\">#&nbsp;整合nginx+php\r\n#&nbsp;编辑nginx的配置文件&nbsp;找到如下代码段,去掉注释和修改\r\n#&nbsp;将.php文件的请求转发给&nbsp;php进程\r\nlocation&nbsp;~&nbsp;\\.php$&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_pass&nbsp;&nbsp;&nbsp;127.0.0.1:9000;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_index&nbsp;&nbsp;index.php;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_param&nbsp;&nbsp;SCRIPT_FILENAME&nbsp;&nbsp;$DOCUMENT_ROOT$fastcgi_script_name;\r\n&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_params;\r\n}\r\n\r\n#&nbsp;修改nginx配置文件后记得reload\r\n/usr/local/nginx/sbin/nginx&nbsp;-t\r\n/usr/local/nginx/sbin/nginx&nbsp;-s&nbsp;reload</pre><h3><span style=\"font-family:幼圆\"># 编写测试文件</span></h3><pre class=\"brush:bash;toolbar:false\">编写测试PHP页面\r\n/usr/local/nginx/html/index.php\r\n\r\n&lt;?php\r\n&nbsp;&nbsp;&nbsp;&nbsp;phpinfo();\r\n?&gt;\r\n\r\n出现phpinfo即可</pre><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br/> </p><p># 上课去拉。 晚上还有有一篇 在nginx下测试博客系统以及nginx的一些知识点 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br/> </p>', '0', '1', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('31', '2017-03-01 18:21:45.654687', '2019-03-16 13:08:41.151234', 'Centos7.2下 源码编译安装 lnmp环境( 下 )', '<h3><span class=\"ue_t\" style=\"font-family:幼圆\">前言<br/> </span></h3><p style=\"text-indent:2em;\">这篇承接着上一篇 lnmp 环境的配置, 对nginx的一些配置, 以及对blog系统测试</p><p style=\"text-indent:2em;\">以及配置过程中遇到的问题，和知识点的总结记录</p><h3><span style=\"font-family:幼圆\">nginx日志<br/> </span></h3><p style=\"text-indent:2em;\">nginx启动后在 nginx目录下会产生个logs 文件夹里面保存着一些日志文件</p><p style=\"text-indent:2em;\">其中nginx.pid 中记录了nginx的pid&nbsp;&nbsp;&nbsp;&nbsp;cat /usr/local/nginx/logs/nginx.pid</p><p style=\"text-indent:2em;\">access.log 中记录了 用户访问nginx的信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error.log 中记录了 错误信息</p><h3><span style=\"font-family:幼圆\"># 80端口占用<br/> </span></h3><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;ps&nbsp;-aux&nbsp;|&nbsp;grep&nbsp;80&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;ps&nbsp;-aux&nbsp;|&nbsp;grep&nbsp;nginx</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为在自己服务器上有着之前配置的 lamp 环境, 所以存在着 apache占用了80端口的情况</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#修改nginx配置文件 监听端口 8000</p><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;cd&nbsp;/usr/local/nginx\r\n&nbsp;&nbsp;&nbsp;cd&nbsp;conf\r\n&nbsp;&nbsp;&nbsp;vi&nbsp;nginx.conf\r\n&nbsp;&nbsp;&nbsp;36行&nbsp;listen&nbsp;8000\r\n&nbsp;&nbsp;&nbsp;cd&nbsp;../sbin\r\n&nbsp;&nbsp;&nbsp;./nginx</pre><h3><span class=\"ue_t\" style=\"font-family:幼圆\"></span></h3><h3><span style=\"font-family:幼圆\"># nginx 的命令参数</span></h3><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;#&nbsp;nginx主程序在&nbsp;/nginx/sbin目录下\r\n&nbsp;&nbsp;&nbsp;进入目录&nbsp;&nbsp;./nginx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启动nginx\r\n\r\n&nbsp;&nbsp;&nbsp;./nginx&nbsp;-t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;测试配置是否正确\r\n&nbsp;&nbsp;&nbsp;./nginx&nbsp;-s&nbsp;reload&nbsp;&nbsp;&nbsp;&nbsp;加载最新配置&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-HUP&nbsp;nginx.pid\r\n&nbsp;&nbsp;&nbsp;./nginx&nbsp;-s&nbsp;stop&nbsp;&nbsp;&nbsp;&nbsp;立即停止nginx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-TERM\r\n&nbsp;&nbsp;&nbsp;./nginx&nbsp;-s&nbsp;quit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;优雅停止nginx\r\n&nbsp;&nbsp;&nbsp;./nginx&nbsp;-s&nbsp;reopen&nbsp;&nbsp;&nbsp;&nbsp;重新打开日志文件</pre><h3><span style=\"font-family:幼圆\"># yum安装时提示保护多库版本的解决</span></h3><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;yum&nbsp;install&nbsp;--setopt=protected_multilib=false&nbsp;zlib</pre><h3><span style=\"font-family:幼圆\"># nginx下支持 blog/index.php&nbsp; -&gt; blog</span></h3><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;&nbsp;index.php&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;重新reload加载配置文件\r\n&nbsp;&nbsp;&nbsp;&nbsp;/usr/local/nginx/sbin/nginx&nbsp;-s&nbsp;reload</pre><h3><span style=\"font-family:幼圆\"># nginx 支持pathinfo</span></h3><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;nginx默认不支持&nbsp;pathinfo&nbsp;,&nbsp;这样像thinkphp中的路由便无法支持&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;index.php/Admin/Index/index\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;这里提供了两种方法&nbsp;第一种为典型配置,&nbsp;第二种来自燕十八老师\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;典型配置\r\n&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;\\.php$&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_pass&nbsp;&nbsp;&nbsp;127.0.0.1:9000;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_index&nbsp;&nbsp;index.php;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_param&nbsp;&nbsp;SCRIPT_FILENAME&nbsp;&nbsp;$DOCUMENT_ROOT$fastcgi_script_name;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_params;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;修改第1,6行,支持pathinfo&nbsp;(from&nbsp;十八哥)\r\n&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;\\.php(.*)$&nbsp;{&nbsp;#&nbsp;正则匹配.php后的pathinfo部分\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_pass&nbsp;&nbsp;&nbsp;127.0.0.1:9000;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_index&nbsp;&nbsp;index.php;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_param&nbsp;&nbsp;SCRIPT_FILENAME&nbsp;&nbsp;$DOCUMENT_ROOT$fastcgi_script_name;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_param&nbsp;PATH_INFO&nbsp;$1;&nbsp;#&nbsp;把pathinfo部分赋给PATH_INFO变量\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_params;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3><span style=\"font-family:幼圆\"># nginx 重写rewrite隐藏index.php</span></h3><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;location&nbsp;/blog&nbsp;{&nbsp;&nbsp;#&nbsp;项目目录\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;html;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;&nbsp;index.php&nbsp;index.html&nbsp;index.htm;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;url重写规则&nbsp;注意空格\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;!-e&nbsp;$request_filename)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rewrite&nbsp;(.*)$&nbsp;/blog/index.php/$1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3><span style=\"font-family:幼圆\"># laravel框架需要 stroage目录权限, bootstrap/cache目录权限</span>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; <br/> </h3>', '0', '2', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('32', '2018-05-26 14:46:19.645675', '2019-03-19 15:52:58.678847', 'Centos下nginx+uswgi部署博客系统', '<p># linux下安装python3<br/>mkdir /usr/local/python3<br/><br/>wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz<br/>tar -zxvf Python-3.6.0.tgz<br/><br/><br/>./configure --prefix=/usr/local/python3<br/><br/>make &amp;&amp; make install<br/><br/># python链接文件路径<br/>cd /usr/bin<br/>ls | grep python<br/>mv /usr/bin/python /usr/bin/python2<br/><br/># 建立新的链接文件<br/>ln -s /usr/local/python3/bin/python3 /usr/bin/python<br/>ln -s /usr/local/python3/bin/python3 /usr/bin/python3<br/><br/><br/><br/># 安装pip<br/>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py<br/>python get-pip.py&nbsp; # 仔细看最后的输出信息，可能会需要再执行一次<br/><br/># 创建pip的链接文件<br/>cd /usr/local/python3/bin<br/>./pip list<br/>ln -s /usr/local/python3/bin/pip /usr/bin/pip<br/><br/><br/># 安装虚拟环境 virtualenv和virtualenvwrapper<br/># 注意看最后的输出信息，看它是安装到哪了<br/># 默认是会安装到 环境变量 python 当前python版本文件夹下的bin<br/>pip install virtualenv<br/>pip install virtualenvwrapper<br/><br/># 创建用来存放虚拟环境的文件夹<br/># 将下面两行加入 ~/.bashrc 这个文件<br/>export WORKON_HOME=$HOME/Envs<br/>source /usr/local/python3/bin/virtualenvwrapper.sh<br/><br/><br/>source ~/.bashrc<br/>ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv<br/><br/># 创建虚拟环境<br/>mkvirtualenv pyblog<br/><br/><br/># 显示或切换虚拟环境<br/>workon [envName]<br/><br/># 删除虚拟环境<br/>rmvirtualenv [envName]<br/><br/># 离开虚拟环境<br/>deactivate<br/><br/><br/><br/># 解决yum问题<br/># 因为yum是依赖python，升级python后yum会出错<br/># 修改第一行，将其解释器路径设置为python2<br/>vi /usr/bin/yum<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>################################################################<br/># 部署django-blog<br/>mkvirtualenv pyblog<br/>workon pyblog<br/><br/># 安装依赖<br/>pip install -i https://pypi.douban.com/simple django==1.9.8<br/>yum install mysql-devel<br/>pip install -i https://pypi.douban.com/simple mysqlclient<br/>pip install pillow<br/>pip install django-import-export==1.0.0<br/>pip install future==0.15.2<br/>pip install six==1.10.0<br/>pip install django-crispy-forms==1.6.1<br/>pip install django-formtools<br/>pip install httplib2<br/><br/># 在xadmin中集成富文本编辑器 DjangoUeditor<br/># pypi或者github下下载源码进行pip安装<br/># 或者直接拷贝文件夹到python环境中&nbsp; ~/Envs/pyblog/lib/python3.6/site-packages<br/># 在settings里注册app<br/># 使用方法 github.com/zhangfisher/DjangoUeditor<br/><br/># 这边安装这个的时候报了个编码错误<br/>pip install django-pure-pagination<br/># 修改centos系统编码<br/>vim /etc/locale.conf<br/>&nbsp;&nbsp; &nbsp;LANG=&quot;en_US.UTF-8&quot;<br/>source /etc/locale.conf<br/>locale<br/># 配置好最后logout一下<br/><br/># 用django内置的服务器启动django&nbsp; (8002端口)<br/>python manage.py migrate<br/>python manage.py runserver 0.0.0.0:8002<br/><br/># 访问 外网:8002<br/># 配置项目settings<br/>ALLOWED_HOSTS = [&#39;*&#39;]<br/><br/># 移植本地数据库<br/># 因为原先我在本地win10环境上已经完成<br/>#####################################################################<br/><br/><br/><br/><br/>################################################################<br/># 使用 uwsgi启动django (8001端口)<br/>&nbsp;&nbsp; &nbsp;pip install uwsgi<br/><br/># 编写测试文件<br/>&nbsp;&nbsp; &nbsp;vim test.py<br/><br/>&nbsp;&nbsp; &nbsp;def application(env, start_response):<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;,&#39;text/html&#39;)])<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return [b&quot;Hello World&quot;]<br/><br/>&nbsp;&nbsp;&nbsp; uwsgi --http :8001 --wsgi-file test.py<br/><br/># 在项目根目录下 blogpy下创建 uwsgi配置文件<br/>vim blogpy_uwsgi.ini<br/>&nbsp;&nbsp; &nbsp;# blogpy_uwsgi.ini file<br/>&nbsp;&nbsp; &nbsp;[uwsgi]<br/><br/>&nbsp;&nbsp; &nbsp;# Django-related settings<br/><br/>&nbsp;&nbsp; &nbsp;# 让uWSGI作为单独的web-server时，用http<br/>&nbsp;&nbsp; &nbsp;# 当配置 nginx+ uwsgi时，用socket<br/>&nbsp;&nbsp; &nbsp;http = :8001<br/>&nbsp;&nbsp; &nbsp;#socket = :8001<br/><br/>&nbsp;&nbsp; &nbsp;# the base directory (full path)<br/>&nbsp;&nbsp; &nbsp;chdir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = /var/www/html_py/blogpy<br/><br/>&nbsp;&nbsp; &nbsp;# Django s wsgi file&nbsp; 项目目录下的wsgi文件<br/>&nbsp;&nbsp; &nbsp;module&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = blogpy.wsgi<br/><br/>&nbsp;&nbsp; &nbsp;# process-related settings<br/>&nbsp;&nbsp; &nbsp;# master<br/>&nbsp;&nbsp; &nbsp;master&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = true<br/><br/>&nbsp;&nbsp; &nbsp;# maximum number of worker processes<br/>&nbsp;&nbsp; &nbsp;processes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 4<br/><br/>&nbsp;&nbsp; &nbsp;# ... with appropriate permissions - may be needed<br/>&nbsp;&nbsp; &nbsp;# chmod-socket&nbsp;&nbsp;&nbsp; = 664<br/>&nbsp;&nbsp; &nbsp;# clear environment on exit<br/>&nbsp;&nbsp; &nbsp;vacuum&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = true<br/><br/><br/><br/># 在项目目录下，用配置文件启动 uwsgi<br/>workon pyblog<br/>uwsgi --ini /var/www/html_py/blogpy/blogpy_uwsgi.ini<br/>killall -9 uwsgi<br/># 然后使用 127.0.0.1:8001 (根据自己上面配置的端口)<br/>#############################################################<br/><br/><br/>TODO:<br/>##############################################################<br/># 配置nginx+uwsgi<br/><br/># 关闭nginx&nbsp; 重启reload<br/>/usr/local/nginx/sbin/nginx -s stop<br/><br/># 设置blogpy_uwsgi.ini配置文件, 设置为socket<br/>&nbsp;&nbsp; &nbsp;socket = :8001<br/># 启动 uwsgi<br/>&nbsp;&nbsp; &nbsp;workon pyblog<br/>&nbsp;&nbsp; &nbsp;uwsgi --ini /var/www/html_py/blogpy/blogpy_uwsgi.ini<br/><br/># 修改nginx的配置文件 (/usr/local/nginx/conf)<br/>vim /usr/local/nginx/conf/nginx.conf<br/>&nbsp;&nbsp; &nbsp;server {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8003; <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server_name&nbsp;&nbsp;&nbsp; localhost<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; charset UTF-8;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; access_log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /usr/local/nginx/logs/myweb_access.log;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error_log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /usr/local/nginx/logs/myweb_error.log;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; client_max_body_size 75M;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location / {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include&nbsp; uwsgi_params;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uwsgi_pass&nbsp; 127.0.0.1:8001;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uwsgi_read_timeout 30;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location /static{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;alias /var/www/html_py/blogpy/static;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>&nbsp;&nbsp;&nbsp; }<br/><br/># 重新启动nginx<br/>/usr/local/nginx/sbin/nginx -s stop<br/>/usr/local/nginx/sbin/nginx<br/><br/># 访问 127.0.0.1:8003<br/><br/><br/></p>', '0', '2', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('33', '2018-09-14 17:09:49.654670', '2019-03-16 13:09:03.975584', 'Centos7下安装mysql5.7', '<h3 id=\"1配置yum源\">1、配置YUM源</h3><p>在MySQL官网中下载YUM源rpm安装包：https://dev.mysql.com/downloads/repo/yum/</p><pre class=\"prettyprint\">#&nbsp;下载mysql源安装包，&nbsp;如果没有wget&nbsp;就&nbsp;&nbsp;yun&nbsp;-y&nbsp;install&nbsp;wget\r\n&nbsp;&nbsp;&nbsp;&nbsp;wget&nbsp;http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;安装mysql源\r\n&nbsp;&nbsp;&nbsp;&nbsp;yum&nbsp;localinstall&nbsp;mysql57-community-release-el7-8.noarch.rpm\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;检查mysql源是否安装成功,&nbsp;检查可用的包\r\n&nbsp;&nbsp;&nbsp;&nbsp;yum&nbsp;repolist&nbsp;enabled&nbsp;|&nbsp;grep&nbsp;&quot;mysql.*-community.*&quot;</pre><p><img src=\"/media/article/ueditor/图片_20180914171716_429.png\" title=\"\" alt=\"图片.png\" style=\"width: 713px; height: 86px;\" width=\"713\" height=\"86\"/> </p><p><br/> </p><h3 id=\"2安装mysql\">2、安装MySQL</h3><pre class=\"prettyprint\">#&nbsp;yum安装mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;yum&nbsp;-y&nbsp;install&nbsp;mysql-community-server\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;查看mysql运行状态\r\n&nbsp;&nbsp;&nbsp;&nbsp;systemctl&nbsp;status&nbsp;mysqld\r\n&nbsp;&nbsp;&nbsp;\r\n#&nbsp;启动mysqld服务\r\n&nbsp;&nbsp;&nbsp;&nbsp;systemctl&nbsp;start&nbsp;mysqld\r\n\r\n#&nbsp;设计开机启动\r\n&nbsp;&nbsp;&nbsp;&nbsp;systemctl&nbsp;enable&nbsp;mysqld\r\n\r\n#&nbsp;重新载入systemd,&nbsp;扫描新的或有变动的部分\r\n&nbsp;&nbsp;&nbsp;&nbsp;systemctl&nbsp;daemon-reload</pre><p><img src=\"/media/article/ueditor/图片_20180914180654_632.png\" title=\"\" alt=\"图片.png\"/> </p><h3 id=\"5修改root本地登录密码\">3、修改root登录密码</h3><p>mysql安装完成之后，会在 /var/log/mysqld.log 文件中给root生成了一个随机默认密码。</p><pre class=\"prettyprint\">grep&nbsp;&#39;temporary&nbsp;password&#39;&nbsp;/var/log/mysqld.log</pre><p><img src=\"/media/article/ueditor/图片_20180914172531_327.png\" title=\"\" alt=\"图片.png\"/> </p><p>使用这个密码进行登陆, mysql -uroot -p</p><p><br/> </p><p>修改root密码（两种方式都可以）：</p><pre class=\"prettyprint\">mysql&gt;&nbsp;ALTER&nbsp;USER&nbsp;&#39;root&#39;@&#39;localhost&#39;&nbsp;IDENTIFIED&nbsp;BY&nbsp;&#39;MyNewPass1!&#39;;</pre><pre class=\"prettyprint\">mysql&gt;&nbsp;set&nbsp;password&nbsp;for&nbsp;&#39;root&#39;@&#39;localhost&#39;=password(&#39;MyNewPass1!&#39;);</pre><p><br/> </p><p>注意：在5.7版本，mysql有新增安全策略，密码需要设置的大小写，数字，字符，否则会报错<br/> </p><p><img src=\"/media/article/ueditor/图片_20180914172954_481.png\" title=\"\" alt=\"图片.png\" style=\"width: 782px; height: 57px;\" width=\"782\" height=\"57\"/> </p><p><br/> </p><pre class=\"prettyprint\">#&nbsp;通过show命令查看mysql密码策略的相关信息\r\nmysql&gt;&nbsp;show&nbsp;variables&nbsp;like&nbsp;&#39;%password%&#39;;</pre><p><img src=\"/media/article/ueditor/图片_20180914173118_636.png\" title=\"\" alt=\"图片.png\"/> </p><p><br/> </p><h3 id=\"5修改root本地登录密码\">4、修改密码策略</h3><pre class=\"prettyprint\">#&nbsp;修改/etc/my.cnf&nbsp;配置文件\r\n&nbsp;&nbsp;&nbsp;&nbsp;yum&nbsp;-y&nbsp;install&nbsp;vim\r\n&nbsp;&nbsp;&nbsp;&nbsp;vim&nbsp;/etc/my.cnf\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件\r\n&nbsp;&nbsp;&nbsp;&nbsp;validate_password_policy=0\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;如果不需要密码策略，禁用密码策略即可\r\n&nbsp;&nbsp;&nbsp;&nbsp;validate_password=off\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;重新启动mysql服务使配置生效：\r\n&nbsp;&nbsp;&nbsp;&nbsp;systemctl&nbsp;restart&nbsp;mysqld</pre><p><br/> </p><p>由于是实验环境，取消了密码策略，如下可以设置简单密码了<br/> </p><p><img src=\"/media/article/ueditor/图片_20180914174504_900.png\" title=\"\" alt=\"图片.png\"/> </p><p><br/> </p><p><img src=\"/media/article/ueditor/图片_20180914174815_157.png\" title=\"\" alt=\"图片.png\" style=\"width: 787px; height: 105px;\" width=\"787\" height=\"105\"/> </p><p><br/> </p><h3 id=\"5修改root本地登录密码\">4、补充<br/> </h3><p><strong>默认配置文件路径：</strong></p><p>配置文件：/etc/my.cnf <br/>日志文件：/var/log//var/log/mysqld.log <br/>服务启动脚本：/usr/lib/systemd/system/mysqld.service <br/>socket文件：/var/run/mysqld/mysqld.pid</p><p><br/> </p><p><strong>如果忘记root密码：</strong></p><pre class=\"prettyprint\">#&nbsp;修改配置文件&nbsp;/etc/my.cnf&nbsp;在&nbsp;[mysqld]&nbsp;段中加入这行，跳过密码检查\r\n&nbsp;&nbsp;&nbsp;&nbsp;skip-grant-tables&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;这时便不需要密码也可以登陆mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;mysql&nbsp;&nbsp;-uroot&nbsp;-p\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;设置密码和刷新privileges\r\n&nbsp;&nbsp;&nbsp;&nbsp;update&nbsp;mysql.user&nbsp;set&nbsp;authentication_string=password(&#39;123456&#39;)&nbsp;where&nbsp;user=&#39;root&#39;;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;flush&nbsp;privileges;</pre><p><img src=\"http://127.0.0.1:8001/media/article/ueditor/图片_20180914175627_550.png\" title=\"\" alt=\"图片.png\"/> </p><p><br/> </p>', '0', '0', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('34', '2018-09-14 21:47:16.645345', '2019-03-16 13:09:14.927202', '源码编译nginx并增加模块', '<h3 id=\"1配置yum源\">1、在Centos7下安装nginx<br/> </h3><pre class=\"brush:bash;toolbar:false\">#&nbsp;第一步当然是&nbsp;下载源码包，如果没有wget可以&nbsp;直接&nbsp;yum&nbsp;install&nbsp;wget\r\n&nbsp;&nbsp;&nbsp;&nbsp;wget&nbsp;http://nginx.org/download/nginx-1.12.2.tar.gz\r\n&nbsp;&nbsp;&nbsp;\r\n#&nbsp;考虑到网速问题，如果下载过慢也可以在win上下载后移动到linux上\r\n#&nbsp;个人使用的终端工具为:&nbsp;SecureCRT\r\n#&nbsp;可以在&nbsp;SecureCRT已连接的终端&nbsp;面板上右键&nbsp;连接SFTP标签页\r\n#&nbsp;SFTP命令的话可以自行百度了\r\n&nbsp;&nbsp;&nbsp;&nbsp;pwd,&nbsp;lpwd,&nbsp;ls,&nbsp;lls,&nbsp;cd,&nbsp;lcd,&nbsp;put,&nbsp;get\r\n&nbsp;&nbsp;&nbsp;&nbsp;lcd&nbsp;f:/\r\n&nbsp;&nbsp;&nbsp;&nbsp;put&nbsp;xxx.tar.gz</pre><p><img src=\"/media/article/ueditor/图片_20180914215921_280.png\" title=\"\" alt=\"图片.png\" style=\"width: 733px; height: 309px;\" width=\"733\" height=\"309\"/> </p><h3 id=\"1配置yum源\"><br/></h3><h3 id=\"1配置yum源\">2、源码编译nginx<br/> </h3><pre class=\"brush:bash;toolbar:false\">#&nbsp;依赖问题&nbsp;emmm&nbsp;安装时看哪个报错就安装哪个吧\r\n&nbsp;&nbsp;&nbsp;&nbsp;yum&nbsp;-y&nbsp;install&nbsp;gcc&nbsp;gcc-c++&nbsp;openssl-devel&nbsp;pcre-devel&nbsp;httpd-tools\r\n&nbsp;&nbsp;&nbsp;\r\n#&nbsp;解压，安装，因为是自己实验，with模块就没怎么装了，后面还会演示如何添加模块编译\r\n&nbsp;&nbsp;&nbsp;&nbsp;tar&nbsp;-zxf&nbsp;nginx-1.12.2.tar.gz\r\n&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;nginx-1.12.2\r\n&nbsp;&nbsp;&nbsp;&nbsp;useradd&nbsp;nginx\r\n&nbsp;&nbsp;&nbsp;&nbsp;./configure&nbsp;--prefix=/usr/local/nginx&nbsp;--user=nginx&nbsp;--group=nginx&nbsp;--with-http_ssl_module&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;&amp;&amp;&nbsp;make&nbsp;install\r\n&nbsp;&nbsp;&nbsp;\r\n#&nbsp;创建软连接\r\n&nbsp;&nbsp;&nbsp;&nbsp;ln&nbsp;-s&nbsp;/usr/local/nginx/sbin/nginx&nbsp;/usr/sbin/nginx</pre><p><br/> </p><h3 id=\"1配置yum源\">3、已编译好的nginx增加模块</h3><pre class=\"brush:bash;toolbar:false\">#&nbsp;查看nginx在编译时安装了哪些模块\r\n&nbsp;&nbsp;&nbsp;&nbsp;nginx&nbsp;-V</pre><p><img src=\"/media/article/ueditor/图片_20180914221051_602.png\" title=\"\" alt=\"图片.png\"/> </p><p><br/> </p><pre class=\"brush:bash;toolbar:false\">#&nbsp;添加新模块时需要重新在&nbsp;nginx-1.12.2里&nbsp;configure，要记得加上之前的配置和模块\r\n&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;nginx-1.12.2\r\n&nbsp;&nbsp;&nbsp;&nbsp;./configure&nbsp;--prefix=/usr/local/nginx&nbsp;--user=nginx&nbsp;--group=nginx&nbsp;--with-http_ssl_module&nbsp;--with-http_mp4_module\r\n&nbsp;&nbsp;&nbsp;&nbsp;make\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n#&nbsp;这里切记只&nbsp;make&nbsp;而不进行&nbsp;make&nbsp;install，不然就真的覆盖了\r\n#&nbsp;cd&nbsp;进&nbsp;nginx-1.12.2/objs里，对新编译的好的&nbsp;nginx二进制文件进行复制\r\n&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;objs\r\n&nbsp;&nbsp;&nbsp;&nbsp;cp&nbsp;nginx&nbsp;/usr/sbin/nginx</pre><p><img src=\"/media/article/ueditor/图片_20180914221718_749.png\" title=\"\" alt=\"图片.png\"/> </p><p><br/> </p><h3 id=\"1配置yum源\">4、之后启动nginx，使用nginx -V 查看，第三方模块可以自己百度，或者日后补充。</h3><div><h3 id=\"1配置yum源\"><img src=\"http://127.0.0.1:8000/media/article/ueditor/图片_20180914222148_567.png\" title=\"\" alt=\"图片.png\"/></h3></div>', '0', '1', '1', '13', 'a');
INSERT INTO `blog_article` VALUES ('37', '2019-03-18 23:49:27.190956', '2019-03-19 15:50:07.456995', '关于我', '﻿本站是基于 `python3.6`和`Django2.1`搭建的博客\r\n\r\n关于我: 19应届本科生，本博客系统虽借鉴于网上开源项目，所实现功能全都是基于自己理解并且手写代码的基础上完成。系统部署在亚马逊云Ubuntu，仅作为学习记录。hhh插播一下，在广州深圳求职python后台工程师，自学能力强，动手解决问题能力强，有过php开发经验，会linux，会一些前端，会一些爬虫，未来学习方向：算法和数据 结构、大数据云计算、全栈、数据分析、架构师。。。。。:tw-1f639: :tw-1f639: /捂脸\r\n\r\n欢迎访问我的Github: https://github.com/enjoy-binbin/binblog-Django\r\n\r\n欢迎star，提issue，邮箱为: binloveplay1314@qq.com\r\n\r\n感谢观看~\r\n\r\n\r\n\r\n## 主要功能\r\n\r\n- 文章分类，文章，文章标签的增删改查，展示\r\n- 文章详情支持`Markdown`，支持代码高亮\r\n- 支持文章列表分页\r\n- 文章评论功能\r\n- admin后台管理系统\r\n- 用户注册登陆\r\n- 右侧侧边栏功能，最热文章，最新文章，标签云\r\n- 文章根据添加时间进行归档\r\n- 使用Djangorestframework对博客进行API开发（在blog/api目录下）\r\n\r\n\r\n\r\n## 使用到\r\n\r\n- djangorestframework和 restframework-jwt进行API学习开发\r\n- django通用视图，ListViewDetailView，FromView，RedirectView\r\n- admin的扩展，ModelAdmin扩展，SimpleListFilter自定义过滤器\r\n- 自定义LoginView，RegisterView，LogoutView，部分django自带auth用法\r\n- context_processors自定义模板全局变量\r\n- 侧边栏编辑页 TextFields使用 `pagedown` 支持 `markdown`\r\n- 文章内容使用 `mdeditor`支持`markdown`和`图片上传`\r\n- templatetags 自定义模板标签 tags，支持markdown，代码高亮\r\n- 使用haystack和whoosh实现的全文文章搜索功能\r\n- slug的用法\r\n- 使用django-compress压缩css/js\r\n- django简单中间件的编写，显示页面加载时间\r\n- 使用django的sitemap功能\r\n- python-memcached对网站的部分信息缓存\r\n- 自定义django.manage命令,create_testdata，生成测试数据\r\n\r\n## TOLearn\r\n\r\n终于有服务器拉， 下次准备 集成 Oauth登陆，之前一直没有服务器做测试\r\n[1]: http://1 \"1\"', '0', '41', '1', '12', 'p');
INSERT INTO `blog_article` VALUES ('38', '2019-03-19 15:32:03.420033', '2019-03-19 17:06:48.761679', 'nginx+uswgi部署Django项目', '### ubuntu上使用nginx+uswgi部署Django项目\r\n\r\n这篇记录 如何在一个全新的Ubuntu18.04系统上使用 nginx+uswgi部署本博客项目\r\n\r\n\r\n\r\n#### 1. 安装虚拟环境\r\n\r\n```\r\n# 假定已经安装了 python3 pip3 mysql等环境\r\n\r\npip3 install virtualenv\r\npip3 install virtualenvwrapper\r\n\r\n# 默认下virtualenvwrapper会安装到 /usr/local/bin目录下\r\n# 新建一个文件夹存放虚拟环境，自定义\r\nmkdir -p /var/www/envs\r\n\r\n# 接着需要配置下 ~/.bashrc\r\nvim ~/.bashrc\r\n\r\n# 在末尾将虚拟环境目录添加进去\r\nexport WORKON_HOME=/var/www/envs\r\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\r\nsource /usr/local/bin/virtualenvwrapper.sh\r\n\r\n# 使bashrc生效\r\nsource ~/.bashrc\r\n\r\n# 创建虚拟环境\r\nmkvirtualenv binblog\r\n\r\n# 删除虚拟环境\r\nrm /var/www/envs/binblog\r\n\r\n# 查看虚拟环境列表\r\nworkon\r\n\r\n# 激活虚拟环境\r\nworkon binblog\r\n\r\n# 离开虚拟环境\r\ndeactivate binblog\r\n```\r\n\r\n\r\n\r\n#### 2. 安装博客项目\r\n\r\n```\r\ncd /var/www/html\r\n# 克隆项目\r\ngit clone https://github.com/enjoy-binbin/binblog-Django.git\r\n\r\n# 安装依赖\r\ncd binblog-Django\r\nworkon binblog\r\npip install -r requirement.txt\r\n\r\n# 设置配置文件，在里面配置自己的数据库连接信息\r\ncp settings.py.example settings.py\r\n\r\n# 数据迁移\r\npython manage.py migrate\r\n\r\n# 用django.runserver启动项目, 记得设置服务器上相关安全组\r\npython manage.py runserver 0.0.0.0:8081\r\n```\r\n\r\n![test_django_runserver](/media/editor/1. test_8081_20190319153113942283.png \"test_django_runserver\")\r\n\r\n\r\n\r\n#### 3. nginx+uswgi部署Django项目\r\n\r\n当然线上环境，得关闭DEBUG，使用nginx来代理静态文件\r\n\r\n##### 3.1 安装uswgi\r\n\r\n```\r\nworkon binblog\r\npip3 install uwsgi\r\n\r\n# 收集静态文件 （这部分需要去看settings里的 STATIC_ROOT等设置项）\r\npython manage.py collectstatic\r\n```\r\n\r\n##### 3.2 创建uswgi配置文件\r\n\r\nvim /var/www/html/binblog-Django/binblog/uwsgi.ini\r\n\r\n```\r\n# binblog-Django/binblog/uswgi.ini\r\n[uwsgi]\r\n\r\n# Django-related settings\r\n\r\n# 当用 uSWGI作为单独的web server时使用\r\n# http = :8000\r\n\r\n# 当配置 nginx + uSWGI时, 使用socket\r\nsocket = :8000\r\n\r\n# The base directory(Full path)\r\nchdir = /var/www/html/binblog-Django\r\n\r\n# binblog.wsgi.py 项目目录下的wsgi文件\r\nmodule = binblog.wsgi\r\n\r\n# Process-related settings\r\nmaster = true\r\n\r\n# Maximum number of worker process\r\nprocesses = 4\r\n\r\nvacuum = True\r\n```\r\n\r\n##### 3.3 用配置文件启动 uwsgi\r\n\r\n```\r\nworkon binblog\r\n\r\n# 关闭django项目里的 DEBUG\r\nDEBUG = False\r\n\r\nuwsgi --ini /var/www/html/binblog-Django/binblog/uwsgi.ini\r\n\r\n# 关闭 uwsgi\r\nkillall -9 uwsgi\r\n```\r\n\r\n\r\n\r\n##### 3.4 安装nginx\r\n\r\n```\r\napt install nginx\r\n```\r\n\r\n\r\n\r\n##### 3.5 nginx的配置\r\n\r\n```\r\n# 启动、关闭、重启 nginx (start, stop, restart)\r\nsystemctl restart nginx\r\n\r\n# nginx的配置文件位于 /etc/nginx目录下\r\n```\r\n\r\n\r\n\r\n**在sites-available目录下添加自己站点的配置文件**\r\n\r\n`vim /etc/nginx/sites-available/binblog`\r\n\r\n```\r\n# 添加下面的信息，使用nginx代理 80端口\r\nserver {\r\n        listen         80;\r\n        server_name    bin.lotiger.cn\r\n        charset UTF-8;\r\n        access_log      /usr/local/nginx/logs/myweb_access.log;\r\n        error_log       /usr/local/nginx/logs/myweb_error.log;\r\n\r\n        client_max_body_size 75M;\r\n\r\n        location / {\r\n            include  uwsgi_params;\r\n            uwsgi_pass  127.0.0.1:8000;\r\n            uwsgi_read_timeout 30;\r\n        }\r\n\r\n        location /static{\r\n            alias /var/www/html/binblog-Django/collectedstatic;\r\n        }\r\n        	\r\n        location /meida{\r\n            alias /var/www/html/binblog-Django/media;\r\n        }\r\n }\r\n```\r\n\r\n\r\n\r\n**创建软连接，因为nginx默认会加载所有sites-enabled/*下的配置信息文件 **\r\n\r\n`ln -s /etc/nginx/sites-available/binblog /etc/nginx/sites-enabled/binblog`\r\n\r\n\r\n\r\n**修改nginx默认的default配置信息，将其默认监听端口为改了**\r\n\r\n`vim /etc/nginx/sites-available/default`\r\n\r\n```\r\nlisten 8080 default_server;\r\nlisten [::]:8080 default_server;\r\n```\r\n\r\n**重启nginx和强制刷新浏览器，访问**\r\n\r\n![访问成功](/media/editor/2. test-80_20190319153145691601.png \"访问成功\")', '0', '9', '1', '14', 'a');

-- ----------------------------
-- Table structure for blog_article_tags
-- ----------------------------
DROP TABLE IF EXISTS `blog_article_tags`;
CREATE TABLE `blog_article_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `blog_article_tags_article_id_tag_id_b78a22e9_uniq` (`article_id`,`tag_id`),
  KEY `blog_article_tags_tag_id_88eb3ed9_fk_blog_tag_id` (`tag_id`),
  CONSTRAINT `blog_article_tags_article_id_82c02dd6_fk_blog_article_id` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`id`),
  CONSTRAINT `blog_article_tags_tag_id_88eb3ed9_fk_blog_tag_id` FOREIGN KEY (`tag_id`) REFERENCES `blog_tag` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_article_tags
-- ----------------------------
INSERT INTO `blog_article_tags` VALUES ('10', '5', '2');
INSERT INTO `blog_article_tags` VALUES ('11', '5', '5');
INSERT INTO `blog_article_tags` VALUES ('8', '6', '2');
INSERT INTO `blog_article_tags` VALUES ('9', '6', '4');
INSERT INTO `blog_article_tags` VALUES ('7', '7', '2');
INSERT INTO `blog_article_tags` VALUES ('6', '9', '2');
INSERT INTO `blog_article_tags` VALUES ('4', '12', '2');
INSERT INTO `blog_article_tags` VALUES ('5', '12', '3');
INSERT INTO `blog_article_tags` VALUES ('2', '13', '1');
INSERT INTO `blog_article_tags` VALUES ('3', '13', '2');
INSERT INTO `blog_article_tags` VALUES ('1', '14', '2');
INSERT INTO `blog_article_tags` VALUES ('12', '16', '2');
INSERT INTO `blog_article_tags` VALUES ('13', '18', '2');
INSERT INTO `blog_article_tags` VALUES ('14', '38', '2');

-- ----------------------------
-- Table structure for blog_category
-- ----------------------------
DROP TABLE IF EXISTS `blog_category`;
CREATE TABLE `blog_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `name` varchar(30) NOT NULL,
  `slug` varchar(50) NOT NULL,
  `parent_category_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `blog_category_parent_category_id_f50c3c0c_fk_blog_category_id` (`parent_category_id`),
  KEY `blog_category_slug_92643dc5` (`slug`),
  CONSTRAINT `blog_category_parent_category_id_f50c3c0c_fk_blog_category_id` FOREIGN KEY (`parent_category_id`) REFERENCES `blog_category` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_category
-- ----------------------------
INSERT INTO `blog_category` VALUES ('1', '2019-02-27 16:52:09.411905', '2019-03-16 10:12:22.557091', 'Python', 'python', null);
INSERT INTO `blog_category` VALUES ('2', '2019-03-14 18:35:27.969710', '2019-03-16 10:16:40.687965', 'Django', 'django', '1');
INSERT INTO `blog_category` VALUES ('12', '2019-03-16 10:16:34.681215', '2019-03-16 10:16:34.688220', '其他', 'qi-ta', null);
INSERT INTO `blog_category` VALUES ('13', '2019-03-16 13:03:12.246836', '2019-03-16 13:03:12.255338', '以前的老文章', 'yi-qian-de-lao-wen-zhang', '12');
INSERT INTO `blog_category` VALUES ('14', '2019-03-19 13:51:59.361200', '2019-03-19 13:51:59.364690', 'Django博客', 'djangobo-ke', null);

-- ----------------------------
-- Table structure for blog_comment
-- ----------------------------
DROP TABLE IF EXISTS `blog_comment`;
CREATE TABLE `blog_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `content` longtext NOT NULL,
  `is_enable` tinyint(1) NOT NULL,
  `article_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  `parent_comment_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blog_comment_article_id_3d58bca6_fk_blog_article_id` (`article_id`),
  KEY `blog_comment_author_id_4f11e2e0_fk_user_userprofile_id` (`author_id`),
  KEY `blog_comment_parent_comment_id_26791b9a_fk_blog_comment_id` (`parent_comment_id`),
  CONSTRAINT `blog_comment_article_id_3d58bca6_fk_blog_article_id` FOREIGN KEY (`article_id`) REFERENCES `blog_article` (`id`),
  CONSTRAINT `blog_comment_author_id_4f11e2e0_fk_user_userprofile_id` FOREIGN KEY (`author_id`) REFERENCES `user_userprofile` (`id`),
  CONSTRAINT `blog_comment_parent_comment_id_26791b9a_fk_blog_comment_id` FOREIGN KEY (`parent_comment_id`) REFERENCES `blog_comment` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_comment
-- ----------------------------
INSERT INTO `blog_comment` VALUES ('1', '2019-03-16 10:23:05.443770', '2019-03-16 10:23:05.453261', 'mark下来慢慢看 /捂脸', '1', '15', '1', null);
INSERT INTO `blog_comment` VALUES ('2', '2019-03-18 21:15:54.592590', '2019-03-18 21:15:54.601090', 'asdasdsadasd', '1', '18', '1', null);
INSERT INTO `blog_comment` VALUES ('6', '2019-03-19 15:32:55.037743', '2019-03-19 15:32:55.045258', '这篇有时间有继续慢慢修改完善的~', '1', '38', '1', null);
INSERT INTO `blog_comment` VALUES ('7', '2019-03-19 15:55:20.266834', '2019-03-19 15:55:20.272823', '感谢观看。会一直学习和完善的，尽量会维护的hhhh', '1', '37', '1', null);

-- ----------------------------
-- Table structure for blog_guestbook
-- ----------------------------
DROP TABLE IF EXISTS `blog_guestbook`;
CREATE TABLE `blog_guestbook` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `content` longtext NOT NULL,
  `author_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `blog_guestbook_author_id_a34aaf0d_fk_user_userprofile_id` (`author_id`),
  CONSTRAINT `blog_guestbook_author_id_a34aaf0d_fk_user_userprofile_id` FOREIGN KEY (`author_id`) REFERENCES `user_userprofile` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_guestbook
-- ----------------------------
INSERT INTO `blog_guestbook` VALUES ('1', '2019-05-12 23:52:06.414957', '2019-05-12 23:52:06.420958', '666', '1');

-- ----------------------------
-- Table structure for blog_link
-- ----------------------------
DROP TABLE IF EXISTS `blog_link`;
CREATE TABLE `blog_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `name` varchar(30) NOT NULL,
  `order` int(11) NOT NULL,
  `url` varchar(200) NOT NULL,
  `is_enable` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_link
-- ----------------------------

-- ----------------------------
-- Table structure for blog_photo
-- ----------------------------
DROP TABLE IF EXISTS `blog_photo`;
CREATE TABLE `blog_photo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `title` varchar(50) NOT NULL,
  `desc` longtext NOT NULL,
  `image` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_photo
-- ----------------------------

-- ----------------------------
-- Table structure for blog_setting
-- ----------------------------
DROP TABLE IF EXISTS `blog_setting`;
CREATE TABLE `blog_setting` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `desc` longtext NOT NULL,
  `keyword` longtext NOT NULL,
  `article_desc_len` int(11) NOT NULL,
  `sidebar_article_count` int(11) NOT NULL,
  `github_user` varchar(50) NOT NULL,
  `github_repository` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_setting
-- ----------------------------
INSERT INTO `blog_setting` VALUES ('1', 'BinBlog', '彬彬博客', 'python3, django2, blog, binblog', '250', '5', 'enjoy-binbin', 'binblog-Django');

-- ----------------------------
-- Table structure for blog_sidebar
-- ----------------------------
DROP TABLE IF EXISTS `blog_sidebar`;
CREATE TABLE `blog_sidebar` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `title` varchar(30) NOT NULL,
  `content` longtext NOT NULL,
  `order` int(11) NOT NULL,
  `is_enable` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_sidebar
-- ----------------------------
INSERT INTO `blog_sidebar` VALUES ('1', '2019-02-27 18:45:11.931795', '2019-05-19 11:39:14.658105', '公告', '#### 好好学习，天天向上', '-1', '1');

-- ----------------------------
-- Table structure for blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `name` varchar(25) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES ('1', '2019-03-16 10:13:23.023605', '2019-03-16 10:13:23.024609', 'python');
INSERT INTO `blog_tag` VALUES ('2', '2019-03-16 10:13:27.073384', '2019-03-16 10:13:27.074385', 'django');
INSERT INTO `blog_tag` VALUES ('3', '2019-03-16 10:14:44.096928', '2019-03-16 10:14:44.097428', 'memcached');
INSERT INTO `blog_tag` VALUES ('4', '2019-03-16 10:15:28.012870', '2019-03-16 10:15:28.013870', '全文搜索');
INSERT INTO `blog_tag` VALUES ('5', '2019-03-16 10:15:40.990027', '2019-03-16 10:15:40.991027', 'sitemap');

-- ----------------------------
-- Table structure for django_admin_log
-- ----------------------------
DROP TABLE IF EXISTS `django_admin_log`;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_content_type_id_c4bce8eb_fk_django_co` (`content_type_id`),
  KEY `django_admin_log_user_id_c564eba6_fk_user_userprofile_id` (`user_id`),
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_user_userprofile_id` FOREIGN KEY (`user_id`) REFERENCES `user_userprofile` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=133 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of django_admin_log
-- ----------------------------
INSERT INTO `django_admin_log` VALUES ('131', '2019-05-19 11:20:37.266360', '9', 'admin', '1', '[{\"added\": {}}]', '14', '1');
INSERT INTO `django_admin_log` VALUES ('132', '2019-05-19 11:39:14.664413', '1', '公告', '2', '[{\"changed\": {\"fields\": [\"content\"]}}]', '12', '1');

-- ----------------------------
-- Table structure for django_content_type
-- ----------------------------
DROP TABLE IF EXISTS `django_content_type`;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_model_76bd3d3b_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of django_content_type
-- ----------------------------
INSERT INTO `django_content_type` VALUES ('1', 'admin', 'logentry');
INSERT INTO `django_content_type` VALUES ('3', 'auth', 'group');
INSERT INTO `django_content_type` VALUES ('2', 'auth', 'permission');
INSERT INTO `django_content_type` VALUES ('7', 'blog', 'article');
INSERT INTO `django_content_type` VALUES ('8', 'blog', 'category');
INSERT INTO `django_content_type` VALUES ('9', 'blog', 'comment');
INSERT INTO `django_content_type` VALUES ('19', 'blog', 'guestbook');
INSERT INTO `django_content_type` VALUES ('10', 'blog', 'link');
INSERT INTO `django_content_type` VALUES ('18', 'blog', 'photo');
INSERT INTO `django_content_type` VALUES ('11', 'blog', 'setting');
INSERT INTO `django_content_type` VALUES ('12', 'blog', 'sidebar');
INSERT INTO `django_content_type` VALUES ('13', 'blog', 'tag');
INSERT INTO `django_content_type` VALUES ('4', 'contenttypes', 'contenttype');
INSERT INTO `django_content_type` VALUES ('16', 'oauth', 'oauthconfig');
INSERT INTO `django_content_type` VALUES ('17', 'oauth', 'oauthuser');
INSERT INTO `django_content_type` VALUES ('5', 'sessions', 'session');
INSERT INTO `django_content_type` VALUES ('6', 'sites', 'site');
INSERT INTO `django_content_type` VALUES ('15', 'user', 'emailverifycode');
INSERT INTO `django_content_type` VALUES ('14', 'user', 'userprofile');

-- ----------------------------
-- Table structure for django_migrations
-- ----------------------------
DROP TABLE IF EXISTS `django_migrations`;
CREATE TABLE `django_migrations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of django_migrations
-- ----------------------------
INSERT INTO `django_migrations` VALUES ('1', 'contenttypes', '0001_initial', '2019-02-27 16:47:48.017827');
INSERT INTO `django_migrations` VALUES ('2', 'contenttypes', '0002_remove_content_type_name', '2019-02-27 16:47:49.259216');
INSERT INTO `django_migrations` VALUES ('3', 'auth', '0001_initial', '2019-02-27 16:47:53.893210');
INSERT INTO `django_migrations` VALUES ('4', 'auth', '0002_alter_permission_name_max_length', '2019-02-27 16:47:54.817502');
INSERT INTO `django_migrations` VALUES ('5', 'auth', '0003_alter_user_email_max_length', '2019-02-27 16:47:54.863550');
INSERT INTO `django_migrations` VALUES ('6', 'auth', '0004_alter_user_username_opts', '2019-02-27 16:47:54.913084');
INSERT INTO `django_migrations` VALUES ('7', 'auth', '0005_alter_user_last_login_null', '2019-02-27 16:47:54.963624');
INSERT INTO `django_migrations` VALUES ('8', 'auth', '0006_require_contenttypes_0002', '2019-02-27 16:47:55.051408');
INSERT INTO `django_migrations` VALUES ('9', 'auth', '0007_alter_validators_add_error_messages', '2019-02-27 16:47:55.097230');
INSERT INTO `django_migrations` VALUES ('10', 'auth', '0008_alter_user_username_max_length', '2019-02-27 16:47:55.146876');
INSERT INTO `django_migrations` VALUES ('11', 'auth', '0009_alter_user_last_name_max_length', '2019-02-27 16:47:55.197282');
INSERT INTO `django_migrations` VALUES ('12', 'user', '0001_initial', '2019-02-27 16:48:00.418726');
INSERT INTO `django_migrations` VALUES ('13', 'admin', '0001_initial', '2019-02-27 16:48:02.968366');
INSERT INTO `django_migrations` VALUES ('14', 'admin', '0002_logentry_remove_auto_add', '2019-02-27 16:48:03.017336');
INSERT INTO `django_migrations` VALUES ('15', 'admin', '0003_logentry_add_action_flag_choices', '2019-02-27 16:48:03.066129');
INSERT INTO `django_migrations` VALUES ('16', 'blog', '0001_initial', '2019-02-27 16:48:13.636991');
INSERT INTO `django_migrations` VALUES ('17', 'sessions', '0001_initial', '2019-02-27 16:48:14.403415');
INSERT INTO `django_migrations` VALUES ('18', 'sites', '0001_initial', '2019-02-27 16:48:14.774586');
INSERT INTO `django_migrations` VALUES ('19', 'blog', '0002_auto_20190310_1511', '2019-03-10 15:11:39.392085');
INSERT INTO `django_migrations` VALUES ('20', 'blog', '0003_auto_20190318_2034', '2019-03-18 20:34:35.270903');
INSERT INTO `django_migrations` VALUES ('21', 'blog', '0004_article_type', '2019-03-18 23:40:55.542646');
INSERT INTO `django_migrations` VALUES ('22', 'oauth', '0001_initial', '2019-05-03 16:19:22.356961');
INSERT INTO `django_migrations` VALUES ('23', 'blog', '0005_photo', '2019-05-12 23:11:20.422559');
INSERT INTO `django_migrations` VALUES ('24', 'blog', '0006_guestbook', '2019-05-12 23:11:21.439582');
INSERT INTO `django_migrations` VALUES ('25', 'blog', '0007_auto_20190512_2311', '2019-05-12 23:11:22.584279');
INSERT INTO `django_migrations` VALUES ('26', 'oauth', '0002_auto_20190512_1129', '2019-05-12 23:11:22.668885');
INSERT INTO `django_migrations` VALUES ('27', 'blog', '0008_auto_20190512_2347', '2019-05-12 23:47:21.399301');

-- ----------------------------
-- Table structure for django_session
-- ----------------------------
DROP TABLE IF EXISTS `django_session`;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_expire_date_a5c62663` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of django_session
-- ----------------------------
INSERT INTO `django_session` VALUES ('1o8u0ty3dulowvpialo9ee81pxfpkdjj', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-22 17:54:40.538813');
INSERT INTO `django_session` VALUES ('2aj8bh571tuzhz7ul5d8u1iy5ivfjl5l', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-22 17:02:52.304517');
INSERT INTO `django_session` VALUES ('3dhiyifyt9blx43ltd60rpbcoo5gvzx7', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-28 19:58:27.261359');
INSERT INTO `django_session` VALUES ('7yvc1o1a3db6roz5kt38pxja0rlsip9v', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-04-01 23:48:18.946514');
INSERT INTO `django_session` VALUES ('8z3rnt4h66zx8ncczxc382gvjb79y33t', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-05-17 16:19:46.373642');
INSERT INTO `django_session` VALUES ('92efw0i0orkz2cau1qhajapb0tqggz6a', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-26 17:03:58.810603');
INSERT INTO `django_session` VALUES ('b13jkw8cn3iespvdtu5heuxne08wxve1', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-22 17:00:57.629935');
INSERT INTO `django_session` VALUES ('cpkfpoit6roy3nc95hv52vvs5fntpto0', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-22 15:12:50.450439');
INSERT INTO `django_session` VALUES ('fp7isvil47to6akiv16nf8yt7b1adp7d', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-04-01 21:14:06.266946');
INSERT INTO `django_session` VALUES ('i5l4bjlwakzt1ey39d7q4sfvbdgqdtbt', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-28 18:34:47.585152');
INSERT INTO `django_session` VALUES ('jwt7mv2n91jw0nyq85zhhs86kgt43lq6', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-24 15:09:04.337883');
INSERT INTO `django_session` VALUES ('k2ljww82ffi4obkip50uwmkt34abhq8s', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-13 16:51:42.542141');
INSERT INTO `django_session` VALUES ('k77by3kns0mhonvvuw4hax33wf7g9k5f', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-21 21:47:55.830471');
INSERT INTO `django_session` VALUES ('m8wshl2k9qtqeskh3nuwqrr9tqgne156', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-05-31 22:42:43.014872');
INSERT INTO `django_session` VALUES ('nz992x2v77siqv3la2wrbasprh5bjse7', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-03-27 21:41:55.694693');
INSERT INTO `django_session` VALUES ('s0yagfm9czzhetvivkd3rc65sz5jv920', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-06-02 10:44:45.191944');
INSERT INTO `django_session` VALUES ('sqbp16o9eau36oyb54330nod02lwmhe5', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-05-11 00:54:39.710937');
INSERT INTO `django_session` VALUES ('ti4bka473n036tw91nui5o362gomescq', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-05-26 23:11:24.428232');
INSERT INTO `django_session` VALUES ('xflp1e7h34gq41rv4lfs524gdl692wk7', 'ODU3MGRkMjIxNjM2MTg3ZWY4ZTU2OWY1YjU2YzllOWFjMTM2ZDk0YTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMjllZDE0NThhMzIwOTU1ODI0ZTkxODc0Mjk2MDk1YmUwNjBhZGVmNyJ9', '2019-05-17 15:09:35.041134');
INSERT INTO `django_session` VALUES ('yz76xgk5hfvldjumnoqqsmajfx8x9nyg', 'NGYyM2JjOTM5OTA2MWE3OWM2NWQxNzAyM2ZjYWM1ODQxN2I4NGQzNzp7Il9hdXRoX3VzZXJfaWQiOiI4IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5BbGxvd0FsbFVzZXJzTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiZjE1Mjc5MDk5Yzc0ZjQ4YjAxNDE2MWZmNjcwYWZiMjZkZGYzNmVlNiJ9', '2019-05-19 00:23:16.195508');

-- ----------------------------
-- Table structure for django_site
-- ----------------------------
DROP TABLE IF EXISTS `django_site`;
CREATE TABLE `django_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(100) NOT NULL,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `domain` (`domain`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of django_site
-- ----------------------------
INSERT INTO `django_site` VALUES ('1', '127.0.0.1:8000', 'example.com');

-- ----------------------------
-- Table structure for oauth_oauthconfig
-- ----------------------------
DROP TABLE IF EXISTS `oauth_oauthconfig`;
CREATE TABLE `oauth_oauthconfig` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(10) NOT NULL,
  `app_key` varchar(200) NOT NULL,
  `app_secret` varchar(200) NOT NULL,
  `callback_url` varchar(200) NOT NULL,
  `is_enable` tinyint(1) NOT NULL,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of oauth_oauthconfig
-- ----------------------------
INSERT INTO `oauth_oauthconfig` VALUES ('1', 'github', 'f3cc421c1de31d96dc13', 'd7b46248ea5c4b84f6f8652d2b4d8426a3eebc62', 'http://127.0.0.1:8000/oauth/authorize?type=github', '1', '2019-05-03 16:25:00.000000', '2019-05-03 16:25:00.000000');

-- ----------------------------
-- Table structure for oauth_oauthuser
-- ----------------------------
DROP TABLE IF EXISTS `oauth_oauthuser`;
CREATE TABLE `oauth_oauthuser` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(50) NOT NULL,
  `nickname` varchar(50) NOT NULL,
  `email` varchar(50) DEFAULT NULL,
  `avatar_url` varchar(350) DEFAULT NULL,
  `user_info` longtext,
  `openid` varchar(50) NOT NULL,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `oauth_oauthuser_user_id_fe2a59af_fk_user_userprofile_id` (`user_id`),
  CONSTRAINT `oauth_oauthuser_user_id_fe2a59af_fk_user_userprofile_id` FOREIGN KEY (`user_id`) REFERENCES `user_userprofile` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of oauth_oauthuser
-- ----------------------------
INSERT INTO `oauth_oauthuser` VALUES ('7', 'github', 'Binbin Zhu', 'binloveplay1314@qq.com', 'https://avatars1.githubusercontent.com/u/22811481?v=4', '{\'login\': \'enjoy-binbin\', \'id\': 22811481, \'node_id\': \'MDQ6VXNlcjIyODExNDgx\', \'avatar_url\': \'https://avatars1.githubusercontent.com/u/22811481?v=4\', \'gravatar_id\': \'\', \'url\': \'https://api.github.com/users/enjoy-binbin\', \'html_url\': \'https://github.com/enjoy-binbin\', \'followers_url\': \'https://api.github.com/users/enjoy-binbin/followers\', \'following_url\': \'https://api.github.com/users/enjoy-binbin/following{/other_user}\', \'gists_url\': \'https://api.github.com/users/enjoy-binbin/gists{/gist_id}\', \'starred_url\': \'https://api.github.com/users/enjoy-binbin/starred{/owner}{/repo}\', \'subscriptions_url\': \'https://api.github.com/users/enjoy-binbin/subscriptions\', \'organizations_url\': \'https://api.github.com/users/enjoy-binbin/orgs\', \'repos_url\': \'https://api.github.com/users/enjoy-binbin/repos\', \'events_url\': \'https://api.github.com/users/enjoy-binbin/events{/privacy}\', \'received_events_url\': \'https://api.github.com/users/enjoy-binbin/received_events\', \'type\': \'User\', \'site_admin\': False, \'name\': \'Binbin Zhu\', \'company\': None, \'blog\': \'http://13.58.211.105/\', \'location\': \'China Guangzhou\', \'email\': \'binloveplay1314@qq.com\', \'hireable\': None, \'bio\': \'Web developer. Life is short, use python\', \'public_repos\': 12, \'public_gists\': 0, \'followers\': 2, \'following\': 0, \'created_at\': \'2016-10-13T08:37:22Z\', \'updated_at\': \'2019-05-04T14:49:33Z\'}', '22811481', '2019-05-05 00:11:42.053388', '2019-05-05 00:11:42.053388', '8');

-- ----------------------------
-- Table structure for user_emailverifycode
-- ----------------------------
DROP TABLE IF EXISTS `user_emailverifycode`;
CREATE TABLE `user_emailverifycode` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(20) NOT NULL,
  `email` varchar(50) NOT NULL,
  `type` varchar(20) NOT NULL,
  `is_used` tinyint(1) NOT NULL,
  `add_time` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user_emailverifycode
-- ----------------------------

-- ----------------------------
-- Table structure for user_userprofile
-- ----------------------------
DROP TABLE IF EXISTS `user_userprofile`;
CREATE TABLE `user_userprofile` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime(6) DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(150) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  `nickname` varchar(30) NOT NULL,
  `gender` varchar(6) NOT NULL,
  `add_time` datetime(6) NOT NULL,
  `modify_time` datetime(6) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user_userprofile
-- ----------------------------
INSERT INTO `user_userprofile` VALUES ('1', 'pbkdf2_sha256$120000$Yje1KnjhtUTM$6tGozF3OfAyX5VBpdpagYnkTgl0PBpsGPNKnjTmZiAo=', '2019-05-19 10:44:45.148589', '1', 'bin', '', '', 'binloveplay13214@qq.com', '1', '1', '2019-02-27 16:51:35.103317', '', 'male', '2019-02-27 16:51:35.103317', '2019-02-27 16:51:35.103317');
INSERT INTO `user_userprofile` VALUES ('8', '', '2019-05-05 00:23:16.125597', '0', 'Binbin Zhu', '', '', 'binloveplay1314@qq.com', '0', '1', '2019-05-04 00:40:24.095904', '', 'male', '2019-05-04 00:40:24.095904', '2019-05-04 00:40:24.095904');
INSERT INTO `user_userprofile` VALUES ('9', 'admin', null, '1', 'admin', '', '', '', '0', '1', '2019-05-19 11:20:00.000000', '', 'male', '2019-05-19 11:20:00.000000', '2019-05-19 11:20:00.000000');

-- ----------------------------
-- Table structure for user_userprofile_groups
-- ----------------------------
DROP TABLE IF EXISTS `user_userprofile_groups`;
CREATE TABLE `user_userprofile_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userprofile_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_userprofile_groups_userprofile_id_group_id_52847a61_uniq` (`userprofile_id`,`group_id`),
  KEY `user_userprofile_groups_group_id_98cc4038_fk_auth_group_id` (`group_id`),
  CONSTRAINT `user_userprofile_gro_userprofile_id_49724c40_fk_user_user` FOREIGN KEY (`userprofile_id`) REFERENCES `user_userprofile` (`id`),
  CONSTRAINT `user_userprofile_groups_group_id_98cc4038_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user_userprofile_groups
-- ----------------------------

-- ----------------------------
-- Table structure for user_userprofile_user_permissions
-- ----------------------------
DROP TABLE IF EXISTS `user_userprofile_user_permissions`;
CREATE TABLE `user_userprofile_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userprofile_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_userprofile_user_pe_userprofile_id_permissio_2e86ceca_uniq` (`userprofile_id`,`permission_id`),
  KEY `user_userprofile_use_permission_id_7f559b23_fk_auth_perm` (`permission_id`),
  CONSTRAINT `user_userprofile_use_permission_id_7f559b23_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `user_userprofile_use_userprofile_id_68dc814c_fk_user_user` FOREIGN KEY (`userprofile_id`) REFERENCES `user_userprofile` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user_userprofile_user_permissions
-- ----------------------------
